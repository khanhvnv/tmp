<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.1" jmeter="3.1 r1770033">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Rhino Load Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">loadtest2.rhinoapps.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rhinoPath" elementType="Argument">
            <stringProp name="Argument.name">rhinoPath</stringProp>
            <stringProp name="Argument.value">/TRhino</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="hostapi" elementType="Argument">
            <stringProp name="Argument.name">hostapi</stringProp>
            <stringProp name="Argument.value">loadtest.rhinoapps.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="apiPath" elementType="Argument">
            <stringProp name="Argument.name">apiPath</stringProp>
            <stringProp name="Argument.value">/trhinoApi</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="contactName" elementType="Argument">
            <stringProp name="Argument.name">contactName</stringProp>
            <stringProp name="Argument.value">C001 LoadTest  Contact</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="timeDate" elementType="Argument">
            <stringProp name="Argument.name">timeDate</stringProp>
            <stringProp name="Argument.value">2017-04-03T17:00:00.000Z</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="toDate" elementType="Argument">
            <stringProp name="Argument.name">toDate</stringProp>
            <stringProp name="Argument.value">2017-04-08T17:00:00.000Z</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="fromDate" elementType="Argument">
            <stringProp name="Argument.name">fromDate</stringProp>
            <stringProp name="Argument.value">2017-04-02T17:00:00.000Z</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="firstDayOfWeekDate" elementType="Argument">
            <stringProp name="Argument.name">firstDayOfWeekDate</stringProp>
            <stringProp name="Argument.value">2017-04-03T17:00:00.000Z</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="apptimeDate" elementType="Argument">
            <stringProp name="Argument.name">apptimeDate</stringProp>
            <stringProp name="Argument.value">2017-03-27T17:00:00.000Z</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="apptoDate" elementType="Argument">
            <stringProp name="Argument.name">apptoDate</stringProp>
            <stringProp name="Argument.value">2017-04-01T17:00:00.000Z</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="appfromDate" elementType="Argument">
            <stringProp name="Argument.name">appfromDate</stringProp>
            <stringProp name="Argument.value">2017-03-26T17:00:00.000Z</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="appfirstDayOfWeekDate" elementType="Argument">
            <stringProp name="Argument.name">appfirstDayOfWeekDate</stringProp>
            <stringProp name="Argument.value">2017-03-27T17:00:00.000Z</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="false">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${host}</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol">http</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Login Data Set Config" enabled="false">
        <stringProp name="filename">Rhino_login.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">username, password</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="false">
        <collectionProp name="DNSCacheManager.servers">
          <stringProp name="-453513771">52.212.67.237</stringProp>
          <stringProp name="-226992906">52.19.51.179</stringProp>
        </collectionProp>
        <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
        <boolProp name="DNSCacheManager.isCustomResolver">true</boolProp>
      </DNSCacheManager>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Login Data Test Set Config" enabled="false">
        <stringProp name="filename">Rhino_login_test.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">username,password</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables 1" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">10.84.1.76</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="apiPath" elementType="Argument">
            <stringProp name="Argument.name">apiPath</stringProp>
            <stringProp name="Argument.value">/TRhinoApi</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rhinoPath" elementType="Argument">
            <stringProp name="Argument.name">rhinoPath</stringProp>
            <stringProp name="Argument.value">/TRhino</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="timeDate" elementType="Argument">
            <stringProp name="Argument.name">timeDate</stringProp>
            <stringProp name="Argument.value">2017-03-23T17:00:00.000Z</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="toDate" elementType="Argument">
            <stringProp name="Argument.name">toDate</stringProp>
            <stringProp name="Argument.value">2017-03-25T17:00:00.000Z</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="fromDate" elementType="Argument">
            <stringProp name="Argument.name">fromDate</stringProp>
            <stringProp name="Argument.value">2017-03-19T17:00:00.000Z</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="firstDayOfWeekDate" elementType="Argument">
            <stringProp name="Argument.name">firstDayOfWeekDate</stringProp>
            <stringProp name="Argument.value">2017-03-20T17:00:00.000Z</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="contactName" elementType="Argument">
            <stringProp name="Argument.name">contactName</stringProp>
            <stringProp name="Argument.value">AdLoadTest  Contact</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="apptimeDate" elementType="Argument">
            <stringProp name="Argument.name">apptimeDate</stringProp>
            <stringProp name="Argument.value">2017-03-27T17:00:00.000Z</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="apptoDate" elementType="Argument">
            <stringProp name="Argument.name">apptoDate</stringProp>
            <stringProp name="Argument.value">2017-04-01T17:00:00.000Z</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="appfromDate" elementType="Argument">
            <stringProp name="Argument.name">appfromDate</stringProp>
            <stringProp name="Argument.value">2017-03-26T17:00:00.000Z</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="appfirstDayOfWeekDate" elementType="Argument">
            <stringProp name="Argument.name">appfirstDayOfWeekDate</stringProp>
            <stringProp name="Argument.value">2017-03-27T17:00:00.000Z</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults 1" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${host}</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol">http</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Login Local Data Set Config 1" enabled="true">
        <stringProp name="filename">Rhino_login_admin_test.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">username,password</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="DateTime Data Set Config" enabled="false">
        <stringProp name="filename">Rhino_datettime.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">timeDate,toDate,fromDate,firstDayOfWeekDate</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Approve DateTime  Data Set Config" enabled="false">
        <stringProp name="filename">Rhino_datettime_approve.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">apptimeDate,apptoDate,appfromDate,appfirstDayOfWeekDate</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list"/>
        <boolProp name="AuthManager.clearEachIteration">true</boolProp>
      </AuthManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
      </CacheManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
      </CookieManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Members" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <longProp name="ThreadGroup.start_time">1492139962000</longProp>
        <longProp name="ThreadGroup.end_time">1492139962000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">72000</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename">view_tree.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">member_local_table.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">member_local_summary.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="01.Visit_Home&amp;Login_page" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Visit_Homepage" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${rhinoPath}/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Access Home page of Rhino website</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Home page displayed" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1394009333">&lt;title&gt;Rhino&lt;/title&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
              <stringProp name="DurationAssertion.duration">3000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Visit_Login_page" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="bannerView" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/bannerView.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="menuView" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/menuView.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LoginView" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/loginView.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">3000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">3000</stringProp>
                <stringProp name="RandomTimer.range">15000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="02.Click_Login" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;username&quot;: &quot;${username}&quot;,&#xd;
  &quot;password&quot;: &quot;${password}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${apiPath}/api/masters/GetTenantByLogin</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_tenantId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">tenantId</stringProp>
              <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_name" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">get_name</stringProp>
              <stringProp name="RegexExtractor.regex">.*&quot;name&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">&quot;${tenantId}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${tenantId}&quot; != &quot;\${tenantId}&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login_authentication" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="Password" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">Password</stringProp>
                    <stringProp name="Argument.value">${password}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="Scope" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">Scope</stringProp>
                    <stringProp name="Argument.value">{&quot;tenantId&quot;:&quot;${tenantId}&quot;,&quot;remember&quot;:false}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="UserName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">UserName</stringProp>
                    <stringProp name="Argument.value">${username}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="grant_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">grant_type</stringProp>
                    <stringProp name="Argument.value">password</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${get_name}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">name</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${apiPath}/Token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">Login Rhino with valid username/ password</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_token" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">token</stringProp>
                <stringProp name="RegexExtractor.regex">.*&quot;access_token&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_userprofile_ID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">userProfileId</stringProp>
                <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify_Login_successfull" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-802238693">${userProfileId}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">3000</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Load_SystemInformation" enabled="true"/>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">bearer ${token}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SystemAppearances" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/SystemAppearances</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${token}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                  <stringProp name="RandomTimer.range">74.0</stringProp>
                  <stringProp name="ConstantTimer.delay">148.0</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SystemSettings" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/SystemSettings</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${token}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                  <stringProp name="RandomTimer.range">74.0</stringProp>
                  <stringProp name="ConstantTimer.delay">148.0</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_UserProfiles" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/UserProfiles/${userProfileId}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_username" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">userName</stringProp>
                  <stringProp name="RegexExtractor.regex">.*&quot;userName&quot;:&quot;([^&quot;]+)&quot;.* </stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_userTypeId" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">userTypeId</stringProp>
                  <stringProp name="RegexExtractor.regex">.*&quot;userTypeId&quot;:&quot;([^&quot;]+)&quot;.* </stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetAppConfiguration" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/Stripes/GetAppConfiguration</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${token}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                  <stringProp name="RandomTimer.range">74.0</stringProp>
                  <stringProp name="ConstantTimer.delay">148.0</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserTypes" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/UserTypes/${userTypeId}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${token}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                  <stringProp name="RandomTimer.range">74.0</stringProp>
                  <stringProp name="ConstantTimer.delay">148.0</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Load_Dashboard" enabled="true"/>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">bearer ${token}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DashboardView" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/dashboardView.html</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetCountActionsOverDue" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="userId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">userId</stringProp>
                      <stringProp name="Argument.value">${userProfileId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="targetDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">targetDate</stringProp>
                      <stringProp name="Argument.value">${timeDate}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/Comms/GetCountActionsOverDue</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${token}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetCountOverDue" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="plannedDeadLine" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">plannedDeadLine</stringProp>
                      <stringProp name="Argument.value">${timeDate}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="userId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">userId</stringProp>
                      <stringProp name="Argument.value">${userProfileId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTasks/GetCountOverDue</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${token}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetCountTimesheetSubmissions" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/TimesheetSubmissions/GetCountTimesheetSubmissions/${userProfileId}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${token}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetCountExpenseSubmissions" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/ExpenseSubmissions/GetCountExpenseSubmissions/${userProfileId}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${token}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetTasksWithPeriod" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="from" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">from</stringProp>
                      <stringProp name="Argument.value">${fromDate}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="to" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">to</stringProp>
                      <stringProp name="Argument.value">${toDate}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="userId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">userId</stringProp>
                      <stringProp name="Argument.value">${userProfileId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTasks/GetTasksWithPeriod</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${token}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetActionsWithPeriod" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="from" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">from</stringProp>
                      <stringProp name="Argument.value">${fromDate}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="to" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">to</stringProp>
                      <stringProp name="Argument.value">${toDate}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="userId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">userId</stringProp>
                      <stringProp name="Argument.value">${userProfileId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/Comms/GetActionsWithPeriod</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${token}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                  <stringProp name="RandomTimer.range">3000</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Default_Task***" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTasks/e878e61b-7dee-42fe-9030-8c45d43e0cfe</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">DEL_Default_Project_Task</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">bearer ${token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
            <stringProp name="DurationAssertion.duration">3000</stringProp>
          </DurationAssertion>
          <hashTree/>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">3000</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${token}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${token}&quot; != &quot;\${token}&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transaction Contact" enabled="true"/>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="03.Visit_Contact_page" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Visit_Contact_page" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${rhinoPath}/#/contact</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify_Contact_page_displayed" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1394009333">&lt;title&gt;Rhino&lt;/title&gt;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                  <stringProp name="DurationAssertion.duration">3000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="contactMainView" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/contactMainView.html</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Contacts/GetWithPaging" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="filter" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">filter</stringProp>
                    </elementProp>
                    <elementProp name="page" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">page</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts/GetWithPaging</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${token}</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Contacts/GetWithPaging" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="filter" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">filter</stringProp>
                    </elementProp>
                    <elementProp name="page" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">2</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">page</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts/GetWithPaging</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${token}</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="contactList" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/contactList.html</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                  <stringProp name="RandomTimer.range">3000</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04.Click_Add_Contact" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/contactFormAdd.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify_Add_Contact_form_displayed" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1382916811">Contact Name</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">3000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">5000</stringProp>
                <stringProp name="RandomTimer.range">30000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="05.Click_Save_Contact" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Save_Contact" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;customer&quot;: true,&#xd;
  &quot;supplier&quot;: false,&#xd;
  &quot;contactName&quot;: &quot;${contactName}&quot;,&#xd;
  &quot;active&quot;: true&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${token}</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                  <stringProp name="RandomTimer.range">3000</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_contactId" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">contactId</stringProp>
                  <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify_contact_has_been_created" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1487416983">${contactName}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="TestPlan.comments">Verify contact has been created</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                  <stringProp name="DurationAssertion.duration">3000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">bearer ${token}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContacts" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts/${contactId}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetFooterCounts" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts/GetFooterCounts/${contactId}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="contactFormDetail" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/contactFormDetail.html</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">3000</stringProp>
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${contactId}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${contactId}&quot; != &quot;\${contactId}&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Note" enabled="true"/>
              <hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="06.Open_Note_Contact" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                      <elementProp name="Authorization" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">bearer ${token}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Note_icon_Contact" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/noteView.html</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                      <stringProp name="RandomTimer.range">3000</stringProp>
                      <stringProp name="ConstantTimer.delay">1000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                    <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                      <stringProp name="DurationAssertion.duration">3000</stringProp>
                    </DurationAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Comms" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="recordId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">recordId</stringProp>
                          <stringProp name="Argument.value">${contactId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="commType" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">commType</stringProp>
                          <stringProp name="Argument.value">2</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/Comms</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="noteList" enabled="false">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/noteList.html</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserProfiles" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/UserProfiles</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">3000</stringProp>
                      <stringProp name="ConstantTimer.delay">1000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="07.Click_Add_Note_Contact" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/noteFormAdd.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                    <stringProp name="DurationAssertion.duration">3000</stringProp>
                  </DurationAssertion>
                  <hashTree/>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">3000</stringProp>
                    <stringProp name="RandomTimer.range">10000</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="08.Click_Save_Note_Contact" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Save_Note_Contact" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
  &quot;updateNotes&quot;: &quot;note for contact&quot;,&#xd;
  &quot;active&quot;: true,&#xd;
  &quot;commsTypeValue&quot;: 2,&#xd;
  &quot;recordId&quot;: &quot;${contactId}&quot;,&#xd;
  &quot;toDoTargetDate&quot;: &quot;&quot;,&#xd;
  &quot;entityType&quot;: 1&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/Comms</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="TestPlan.comments">Add Note for a Contact</stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">bearer ${token}</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                      <stringProp name="RandomTimer.range">3000</stringProp>
                      <stringProp name="ConstantTimer.delay">1000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_noteIdContact" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">noteIdContact</stringProp>
                      <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_NotecommsTypeId" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">NotecommsTypeId</stringProp>
                      <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                      <stringProp name="DurationAssertion.duration">3000</stringProp>
                    </DurationAssertion>
                    <hashTree/>
                  </hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                      <elementProp name="Authorization" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">bearer ${token}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="noteFormDetail" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/noteFormDetail.html</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="noteList" enabled="false">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">Rhino/language/en/views/web/noteList.html</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserProfiles" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/UserProfiles</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">3000</stringProp>
                      <stringProp name="ConstantTimer.delay">1000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                  <stringProp name="IfController.condition">&quot;${noteIdContact}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${noteIdContact}&quot; != &quot;\${noteIdContact}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="09.Click_Edit_Note_Contact" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/noteFormEdit.html</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="Authorization" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">bearer ${token}</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">3000</stringProp>
                      <stringProp name="ConstantTimer.delay">1000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="10.Update_Note_Contact" enabled="true"/>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="10.Update_Note_Contact" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&#xd;
  &quot;commsType&quot;: null,&#xd;
  &quot;commsTypeValue&quot;: 0,&#xd;
  &quot;commsTypeId&quot;: &quot;${NotecommsTypeId}&quot;,&#xd;
  &quot;entityType&quot;: 1,&#xd;
  &quot;recordId&quot;: &quot;${contactId}&quot;,&#xd;
  &quot;todoUserId&quot;: null,&#xd;
  &quot;toDoReadStatus&quot;: null,&#xd;
  &quot;toDoInstruction&quot;: null,&#xd;
  &quot;toDoTargetDate&quot;: &quot;&quot;,&#xd;
  &quot;updateNotes&quot;: &quot;note for contact updated&quot;,&#xd;
  &quot;toDoTargetTime&quot;: null,&#xd;
  &quot;toDoCompleted&quot;: null,&#xd;
  &quot;shareExternal&quot;: false,&#xd;
  &quot;communicationTypeStatusId&quot;: null,&#xd;
  &quot;associatedDescription&quot;: null,&#xd;
  &quot;docName&quot;: null,&#xd;
  &quot;documents&quot;: null,&#xd;
  &quot;userDisplayName&quot;: null,&#xd;
  &quot;ucir&quot;: &quot;${tenantId}&quot;,&#xd;
  &quot;createdBy&quot;: &quot;${username}&quot;,&#xd;
  &quot;updatedBy&quot;: null,&#xd;
  &quot;createdDate&quot;: &quot;${timeDate}&quot;,&#xd;
  &quot;updatedDate&quot;: null,&#xd;
  &quot;id&quot;: &quot;${noteIdContact}&quot;,&#xd;
  &quot;version&quot;: &quot;AAAAAAAAXfs=&quot;&#xd;
}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Comms</stringProp>
                      <stringProp name="HTTPSampler.method">PUT</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="RandomTimer.range">3000</stringProp>
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="11.DELETE_Note_for_a _Contact" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE_Note_for_a _Contact" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Comms/${noteIdContact}</stringProp>
                      <stringProp name="HTTPSampler.method">DELETE</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserProfiles" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/UserProfiles</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                          </elementProp>
                          <elementProp name="Authorization" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="RandomTimer.range">3000</stringProp>
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="12.Back_to_Contact_page" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="contactMainView" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/contactMainView.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${token}</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Contacts/GetWithPaging" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts/GetWithPaging</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContacts" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts/${contactId}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="contactList" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/contactList.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetFooterCounts" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts/GetFooterCounts/${contactId}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="contactFormDetail" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/contactFormDetail.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="RandomTimer.range">3000</stringProp>
                    <stringProp name="ConstantTimer.delay">1000</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Reminder" enabled="true"/>
              <hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="13.Open_Reminder_Contact" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Reminder_icon_Contact" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/todoView.html</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                      <stringProp name="DurationAssertion.duration">3000</stringProp>
                    </DurationAssertion>
                    <hashTree/>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                      <stringProp name="RandomTimer.range">3000</stringProp>
                      <stringProp name="ConstantTimer.delay">1000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Comms" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="recordId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">recordId</stringProp>
                          <stringProp name="Argument.value">${contactId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="commType" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">commType</stringProp>
                          <stringProp name="Argument.value">1</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/Comms</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="Authorization" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">bearer ${token}</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">3000</stringProp>
                      <stringProp name="ConstantTimer.delay">1000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="14.Click_Add_Reminder_Contact" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Add_Reminder_Contact" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/todoFormAdd.html</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                      <stringProp name="DurationAssertion.duration">3000</stringProp>
                    </DurationAssertion>
                    <hashTree/>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                      <stringProp name="ConstantTimer.delay">3000</stringProp>
                      <stringProp name="RandomTimer.range">10000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                      <elementProp name="Authorization" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">bearer ${token}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserProfiles" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/UserProfiles</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">5000</stringProp>
                      <stringProp name="ConstantTimer.delay">3000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="15.Click_Save_Reminder_Contact" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Save_Reminder_Contact" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
  &quot;todoUserId&quot;: &quot;${userProfileId}&quot;,&#xd;
  &quot;toDoTargetDate&quot;: &quot;${toDate}&quot;,&#xd;
  &quot;toDoTargetTime&quot;: &quot;00:00&quot;,&#xd;
  &quot;toDoCompleted&quot;: false,&#xd;
  &quot;updatedBy&quot;: &quot;${userName}&quot;,&#xd;
  &quot;updatedDate&quot;: &quot;${timeDate}&quot;,&#xd;
  &quot;toDoInstruction&quot;: &quot;reminder for contact&quot;,&#xd;
  &quot;active&quot;: true,&#xd;
  &quot;commsTypeValue&quot;: 1,&#xd;
  &quot;recordId&quot;: &quot;${contactId}&quot;,&#xd;
  &quot;entityType&quot;: 1&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/Comms</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="TestPlan.comments">Add Reminder for a Contact </stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">bearer ${token}</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_remIdContact" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">remIdContact</stringProp>
                      <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_RemcommsTypeId" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">RemcommsTypeId</stringProp>
                      <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                      <stringProp name="DurationAssertion.duration">3000</stringProp>
                    </DurationAssertion>
                    <hashTree/>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                      <stringProp name="RandomTimer.range">5000</stringProp>
                      <stringProp name="ConstantTimer.delay">3000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="todoFormDetail" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/todoFormDetail.html</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="todoList" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/todoList.html</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserProfiles" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/UserProfiles</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">3000</stringProp>
                      <stringProp name="ConstantTimer.delay">1000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="Authorization" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">bearer ${token}</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                  <stringProp name="IfController.condition">&quot;${remIdContact}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${remIdContact}&quot; != &quot;\${remIdContact}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="16.Click_Edit_Reminder_Contact" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Edit_Reminder" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/todoFormEdit.html</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="RandomTimer.range">5000</stringProp>
                        <stringProp name="ConstantTimer.delay">3000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="17.Update_reminder_Contact" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
  &quot;commsType&quot;: null,&#xd;
  &quot;commsTypeValue&quot;: 0,&#xd;
  &quot;commsTypeId&quot;: &quot;${RemcommsTypeId}&quot;,&#xd;
  &quot;entityType&quot;: 1,&#xd;
  &quot;recordId&quot;: &quot;${contactId}&quot;,&#xd;
  &quot;todoUserId&quot;: &quot;${userProfileId}&quot;,&#xd;
  &quot;toDoReadStatus&quot;: null,&#xd;
  &quot;toDoInstruction&quot;: &quot;reminder for contact updated&quot;,&#xd;
  &quot;toDoTargetDate&quot;: &quot;${toDate}&quot;,&#xd;
  &quot;updateNotes&quot;: null,&#xd;
  &quot;toDoTargetTime&quot;: &quot;00:00&quot;,&#xd;
  &quot;toDoCompleted&quot;: false,&#xd;
  &quot;shareExternal&quot;: false,&#xd;
  &quot;communicationTypeStatusId&quot;: null,&#xd;
  &quot;associatedDescription&quot;: null,&#xd;
  &quot;docName&quot;: null,&#xd;
  &quot;documents&quot;: null,&#xd;
  &quot;userDisplayName&quot;: null,&#xd;
  &quot;ucir&quot;: &quot;${tenantId}&quot;,&#xd;
  &quot;createdBy&quot;: &quot;${username}&quot;,&#xd;
  &quot;updatedBy&quot;: &quot;${username}&quot;,&#xd;
  &quot;createdDate&quot;: &quot;${timeDate}&quot;,&#xd;
  &quot;updatedDate&quot;: &quot;${timeDate}&quot;,&#xd;
  &quot;id&quot;: &quot;${remIdContact}&quot;,&#xd;
  &quot;version&quot;: &quot;AAAAAAAAXfw=&quot;&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/Comms</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">bearer ${token}</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">3000</stringProp>
                      <stringProp name="ConstantTimer.delay">1000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="18.DELETE_Reminder_for_a_Contact" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">bearer ${token}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE_Reminder_for_a_Contact" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Comms/${remIdContact}</stringProp>
                      <stringProp name="HTTPSampler.method">DELETE</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                        <stringProp name="RandomTimer.range">5000</stringProp>
                        <stringProp name="ConstantTimer.delay">3000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Comms" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="recordId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">recordId</stringProp>
                            <stringProp name="Argument.value">${contactId}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="commType" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">commType</stringProp>
                            <stringProp name="Argument.value">1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Comms</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="RandomTimer.range">3000</stringProp>
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="19.Back_to_Contact_page" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="contactMainView" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/contactMainView.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${token}</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Contacts/GetWithPaging" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts/GetWithPaging</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContacts" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts/${contactId}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="contactList" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/contactList.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetFooterCounts" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts/GetFooterCounts/${contactId}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="contactFormDetail" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/contactFormDetail.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="RandomTimer.range">3000</stringProp>
                    <stringProp name="ConstantTimer.delay">1000</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Add Invoice for Contact" enabled="true"/>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${token}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="20.Click_Invoice_icon_Contact" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Invoice_icon_Contact" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/invoiceView.html</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">bearer ${token}</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                      <stringProp name="DurationAssertion.duration">3000</stringProp>
                    </DurationAssertion>
                    <hashTree/>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="ConstantTimer.delay">1000</stringProp>
                      <stringProp name="RandomTimer.range">3000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Invoices/GetWithPaging" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">filter</stringProp>
                          <stringProp name="Argument.value">3</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="page" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">page</stringProp>
                          <stringProp name="Argument.value">1</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="type" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">type</stringProp>
                          <stringProp name="Argument.value">1</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="referId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">referId</stringProp>
                          <stringProp name="Argument.value">${contactId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/Invoices/GetWithPaging</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">bearer ${token}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="ConstantTimer.delay">1000</stringProp>
                      <stringProp name="RandomTimer.range">3000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="21.Click_Add_Invoice_Contact" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Add_Invoice_Contact" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/invoiceFormAdd.html</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                        </elementProp>
                        <elementProp name="Authorization" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">bearer ${token}</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify_Add_Form_form_displayed" enabled="false">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="2524">OK</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                      <stringProp name="DurationAssertion.duration">3000</stringProp>
                    </DurationAssertion>
                    <hashTree/>
                  </hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="Authorization" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">bearer ${token}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContacts" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/UIBuilder" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/UIBuilder</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContactSales/UIBuilder" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContactSales/UIBuilder</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="ConstantTimer.delay">5000</stringProp>
                      <stringProp name="RandomTimer.range">50000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="22.Click_Save_Invoice_Contact" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="08.Click_Save_Invoice_Contact" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="companyContactId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">companyContactId</stringProp>
                          <stringProp name="Argument.value">${contactId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="createdByRhino" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">createdByRhino</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="dueDate" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">dueDate</stringProp>
                          <stringProp name="Argument.value">${toDate}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="grossAmt" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">grossAmt</stringProp>
                          <stringProp name="Argument.value">120</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="invoiceDate" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">invoiceDate</stringProp>
                          <stringProp name="Argument.value">${fromDate}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="invoiceDetails" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">invoiceDetails</stringProp>
                          <stringProp name="Argument.value">null</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="invoiceRef" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">invoiceRef</stringProp>
                          <stringProp name="Argument.value">Draft</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="netValue" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">netValue</stringProp>
                          <stringProp name="Argument.value">100</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="notes" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">notes</stringProp>
                          <stringProp name="Argument.value">Note for add invoice for Default Contact</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="source" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">source</stringProp>
                          <stringProp name="Argument.value">1</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="taxAmt1" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">taxAmt1</stringProp>
                          <stringProp name="Argument.value">20</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="taxRate1" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">taxRate1</stringProp>
                          <stringProp name="Argument.value">0.2</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="terms" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">terms</stringProp>
                          <stringProp name="Argument.value">Invoices should be paid within 7 days from the Invoice Date</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="userProfileId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">userProfileId</stringProp>
                          <stringProp name="Argument.value">${userProfileId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/Invoices/AddInvoiceWithAttachment</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:51.0) Gecko/20100101 Firefox/51.0</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">bearer ${token}</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="ConstantTimer.delay">2000</stringProp>
                      <stringProp name="RandomTimer.range">4000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_InvoiceContactId" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">InvoiceConId</stringProp>
                      <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Invoice has been added" enabled="false">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="844265043">${adInvoiceConId}</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="TestPlan.comments">Verify sale has been added</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                      <stringProp name="DurationAssertion.duration">10000</stringProp>
                    </DurationAssertion>
                    <hashTree/>
                  </hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="Authorization" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">bearer ${token}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                    <stringProp name="IfController.condition">&quot;${InvoiceConId}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${InvoiceConId}&quot; != &quot;\${InvoiceConId}&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Invoices/${InvoiceConId}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Invoices/${InvoiceConId}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="invoiceList.html" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/invoiceList.html</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Invoices/GetFooterCounts/${InvoiceConId}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Invoices/GetFooterCounts/${InvoiceConId}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="invoiceFormDetail.html" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/invoiceFormDetail.html</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">2000</stringProp>
                        <stringProp name="RandomTimer.range">4000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                  <stringProp name="IfController.condition">&quot;${InvoiceConId}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${InvoiceConId}&quot; != &quot;\${InvoiceConId}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="23.Click_Edit_Invoice" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="invoiceFormEdit" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/invoiceFormEdit.html</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="RandomTimer.range">3000</stringProp>
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="24.DEL Invoice for Contact" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="09.DEL Invoice for Contact" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Invoices/${InvoiceConId}</stringProp>
                      <stringProp name="HTTPSampler.method">DELETE</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Invoice for Contact has been deleted" enabled="false">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1259833018">Successful</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                        <stringProp name="TestPlan.comments">Verify Invoice for Contact has been deleted</stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                        <stringProp name="RandomTimer.range">3000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="25.Back_to_Contact_page" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="contactMainView" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/contactMainView.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${token}</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Contacts/GetWithPaging" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="filter" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">filter</stringProp>
                      </elementProp>
                      <elementProp name="page" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">page</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts/GetWithPaging</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Contacts/GetWithPaging" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="filter" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">filter</stringProp>
                      </elementProp>
                      <elementProp name="page" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">2</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">page</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts/GetWithPaging</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContacts" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts/${contactId}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="contactList" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/contactList.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetFooterCounts" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts/GetFooterCounts/${contactId}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="contactFormDetail" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/contactFormDetail.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="RandomTimer.range">3000</stringProp>
                    <stringProp name="ConstantTimer.delay">1000</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="26.Click_Edit_Contact" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Edit_Contact" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/contactFormEdit.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                      <elementProp name="Authorization" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">bearer ${token}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="RandomTimer.range">5000</stringProp>
                    <stringProp name="ConstantTimer.delay">3000</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="27.Update_Contact" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${token}</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContacts" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;contactName&quot;: &quot;load contact updated&quot;,&#xd;
  &quot;contactAdr1&quot;: null,&#xd;
  &quot;contactAdr2&quot;: null,&#xd;
  &quot;contactAdr3&quot;: null,&#xd;
  &quot;contactAdr4&quot;: null,&#xd;
  &quot;contactAdrZip&quot;: null,&#xd;
  &quot;contactAdrCountry&quot;: null,&#xd;
  &quot;contactPhoneNum1&quot;: null,&#xd;
  &quot;contactPhoneNum2&quot;: null,&#xd;
  &quot;contactPhoneNum3&quot;: null,&#xd;
  &quot;contactEmailAdr1&quot;: null,&#xd;
  &quot;contactEmailAdr2&quot;: null,&#xd;
  &quot;customer&quot;: true,&#xd;
  &quot;supplier&quot;: false,&#xd;
  &quot;partner&quot;: false,&#xd;
  &quot;private&quot;: false,&#xd;
  &quot;active&quot;: true,&#xd;
  &quot;companyId&quot;: null,&#xd;
  &quot;contactKeyword&quot;: null,&#xd;
  &quot;company&quot;: null,&#xd;
  &quot;ucir&quot;: &quot;${userProfileId}&quot;,&#xd;
  &quot;createdBy&quot;: &quot;${username}&quot;,&#xd;
  &quot;updatedBy&quot;: null,&#xd;
  &quot;createdDate&quot;: &quot;${timeDate}&quot;,&#xd;
  &quot;updatedDate&quot;: null,&#xd;
  &quot;id&quot;: &quot;${contactId}&quot;,&#xd;
  &quot;version&quot;: &quot;AAAAAAAAXfo=&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts</stringProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">https://loadtest.rhinoapps.com</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                      </elementProp>
                      <elementProp name="Authorization" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">bearer qAgmh8Hrt7BmkYGbWR-QLNGcnQm7-TNqgiH5WpJfaK2_yOrwj1x_jc5Spt3Z_MFjqNuSWI-9M6qdAb_iJG1JKAQhgxnrLOfRUjP7RYCKoPwwmCdipFb3USLyFP8YzWcgToQEg752_xz44u-KHajhUmoWmBQ5_Lv8qAh12l_nX9rxBFzjWuPkGFHgZ6MmlXyx8ccO_WJx6mgXINz5uJeFDRwVK9z5wHsKSNs-_DuttWtRwMIB5lpS4rRklu6iNaGcCcEclwUQuG-HdeHyX1TGm5I7tn--bCmgMe2g9fji8ej2m0XJNZRQhJAVhGISpLQdzSGK0GtGtR_sLxqQQYSBvl1q7fbvOkioQnQoElkvvtWTtdPayuOguj5kuOqFLpBPbij1MF1yeyznOFN0v2LGzASmIc0H9ETaYuYSzAsCJsnUdRgqEiFs3xObXPUfuLoJJbjirGsOcj3E28oTfq-lkQpRKbcwkmkJcxbY4jOORD9f6qmqHwHrc5ltmSExLg1-ZdkKA84ESLhJP40cVko_0euEI6KK41C_9vB1AvHFSPdVFEcTZJPdOh1Avao2993v_aQzXz24OaH10nmeHsb1qFtdnuq6d6N9twy3y7dJQgPxkkYOFTLbd3u2V0Pj_GDixlS65qO00lLkSU42zBYaRcq1LiW1cQg5Qn7CMf-cKlk</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://loadtest.rhinoapps.com/Rhino/</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">bearer ${token}</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                    <stringProp name="RandomTimer.range">5000</stringProp>
                    <stringProp name="ConstantTimer.delay">3000</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContacts" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts/${contactId}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="RandomTimer.range">3000</stringProp>
                    <stringProp name="ConstantTimer.delay">1000</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transaction Sale Proposal" enabled="true"/>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="28.Visit_SaleProposal_page" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">bearer ${token}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Visit_SaleProposal_page" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${rhinoPath}/#/sales-proposal</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify_Sale_page_displayed" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                  <stringProp name="DurationAssertion.duration">3000</stringProp>
                </DurationAssertion>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                  <stringProp name="RandomTimer.range">3000</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="saleProposalView" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/saleProposalView.html</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContactSales/GetWithPaging" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="filter" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">2</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">filter</stringProp>
                    </elementProp>
                    <elementProp name="page" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">page</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContactSales/GetWithPaging</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContactSales/GetWithPaging" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="filter" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">2</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">filter</stringProp>
                    </elementProp>
                    <elementProp name="page" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">2</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">page</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContactSales/GetWithPaging</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="proposalList" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/proposalList.html</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="29.Click_Add_Sale" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">bearer ${token}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_companyContactSalesLifeCycle" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/companyContactSalesLifeCycle</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_companyContactSalesLifeCycleId_ID" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">companyContactSalesLifeCycleId</stringProp>
                  <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Add_Sale" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/proposalFormAdd.html</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify_Add_Sale_form_displayed" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                  <stringProp name="DurationAssertion.duration">3000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserProfiles" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/UserProfiles</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContact" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContactSales" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContactSales</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="companyContactSalesLifeCycle" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/companyContactSalesLifeCycle</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">5000</stringProp>
                  <stringProp name="RandomTimer.range">40000</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="30.Click_Save_SaleProposal" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">bearer ${token}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Save_SaleProposal" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;userProfileId&quot;: &quot;${userProfileId}&quot;,&#xd;
  &quot;forecastDate&quot;: &quot;${toDate}&quot;,&#xd;
  &quot;taxAmt1&quot;: null,&#xd;
  &quot;taxAmt2&quot;: null,&#xd;
  &quot;taxAmt3&quot;: null,&#xd;
  &quot;grossAmt&quot;: null,&#xd;
  &quot;companyContactSalesLifeCycleId&quot;: &quot;${companyContactSalesLifeCycleId}&quot;,&#xd;
  &quot;companyContactId&quot;: &quot;${contactId}&quot;,&#xd;
  &quot;taxRate1&quot;: 0.2,&#xd;
  &quot;proposalDefaultTerms&quot;: &quot;proposal Default Terms&quot;,&#xd;
  &quot;proposalDefaultNotes&quot;: &quot;proposal Default Notes&quot;,&#xd;
  &quot;briefDesc&quot;: &quot;note for saving sale&quot;&#xd;
  }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContactSales</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${token}</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_SaleId" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">saleId</stringProp>
                  <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify_sale_has_been_created" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="837013572">${saleId}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="TestPlan.comments">Verify sale has been created</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                  <stringProp name="DurationAssertion.duration">3000</stringProp>
                </DurationAssertion>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                  <stringProp name="RandomTimer.range">3000</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">&quot;${saleId}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${saleId}&quot; != &quot;\${saleId}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContactSales/${saleId}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContactSales/${saleId}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContactSales/GetFooterCounts/${saleId}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContactSales/GetFooterCounts/${saleId}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="proposalFormDetail" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/proposalFormDetail.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">1000</stringProp>
                    <stringProp name="RandomTimer.range">3000</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${saleId}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${saleId}&quot; != &quot;\${saleId}&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Note" enabled="true"/>
              <hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="31.Open_Note_Sale" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                      <elementProp name="Authorization" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">bearer ${token}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Note_icon_Sale" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/noteView.html</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                      <stringProp name="RandomTimer.range">3000</stringProp>
                      <stringProp name="ConstantTimer.delay">1000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                    <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                      <stringProp name="DurationAssertion.duration">3000</stringProp>
                    </DurationAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Comms" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="recordId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">recordId</stringProp>
                          <stringProp name="Argument.value">${saleId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="commType" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">commType</stringProp>
                          <stringProp name="Argument.value">2</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/Comms</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="noteList" enabled="false">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/noteList.html</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserProfiles" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/UserProfiles</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">3000</stringProp>
                      <stringProp name="ConstantTimer.delay">1000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="32.Click_Add_Note_Sale" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/noteFormAdd.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                    <stringProp name="DurationAssertion.duration">3000</stringProp>
                  </DurationAssertion>
                  <hashTree/>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">3000</stringProp>
                    <stringProp name="RandomTimer.range">10000</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="33.Click_Save_Note_Sale" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Save_Note_Sale" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
  &quot;updateNotes&quot;: &quot;note for sale&quot;,&#xd;
  &quot;active&quot;: true,&#xd;
  &quot;commsTypeValue&quot;: 2,&#xd;
  &quot;recordId&quot;: &quot;${saleId}&quot;,&#xd;
  &quot;toDoTargetDate&quot;: &quot;&quot;,&#xd;
  &quot;entityType&quot;: 2&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/Comms</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="TestPlan.comments">Add Note for a Contact</stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">bearer ${token}</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_noteIdSale" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">noteIdSale</stringProp>
                      <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                      <stringProp name="RandomTimer.range">3000</stringProp>
                      <stringProp name="ConstantTimer.delay">1000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_NoteSaleTypeId" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">NoteSaleTypeId</stringProp>
                      <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                      <stringProp name="DurationAssertion.duration">3000</stringProp>
                    </DurationAssertion>
                    <hashTree/>
                  </hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                      <elementProp name="Authorization" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">bearer ${token}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="noteFormDetail" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/noteFormDetail.html</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="noteList" enabled="false">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">Rhino/language/en/views/web/noteList.html</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserProfiles" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/UserProfiles</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">3000</stringProp>
                      <stringProp name="ConstantTimer.delay">1000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                  <stringProp name="IfController.condition">&quot;${noteIdSale}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${noteIdSale}&quot; != &quot;\${noteIdSale}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="34.Click_Edit_Note_Sale" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/noteFormEdit.html</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="Authorization" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">bearer ${token}</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">3000</stringProp>
                      <stringProp name="ConstantTimer.delay">1000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="34b.Update_Note_Sale" enabled="false"/>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="10.Update_Note_Contact" enabled="false">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&#xd;
  &quot;commsType&quot;: null,&#xd;
  &quot;commsTypeValue&quot;: 0,&#xd;
  &quot;commsTypeId&quot;: &quot;${NotecommsTypeId}&quot;,&#xd;
  &quot;entityType&quot;: 1,&#xd;
  &quot;recordId&quot;: &quot;${saleId}&quot;,&#xd;
  &quot;todoUserId&quot;: null,&#xd;
  &quot;toDoReadStatus&quot;: null,&#xd;
  &quot;toDoInstruction&quot;: null,&#xd;
  &quot;toDoTargetDate&quot;: &quot;&quot;,&#xd;
  &quot;updateNotes&quot;: &quot;note for contact updated&quot;,&#xd;
  &quot;toDoTargetTime&quot;: null,&#xd;
  &quot;toDoCompleted&quot;: null,&#xd;
  &quot;shareExternal&quot;: false,&#xd;
  &quot;communicationTypeStatusId&quot;: null,&#xd;
  &quot;associatedDescription&quot;: null,&#xd;
  &quot;docName&quot;: null,&#xd;
  &quot;documents&quot;: null,&#xd;
  &quot;userDisplayName&quot;: null,&#xd;
  &quot;ucir&quot;: &quot;${tenantId}&quot;,&#xd;
  &quot;createdBy&quot;: &quot;${username}&quot;,&#xd;
  &quot;updatedBy&quot;: null,&#xd;
  &quot;createdDate&quot;: &quot;${timeDate}&quot;,&#xd;
  &quot;updatedDate&quot;: null,&#xd;
  &quot;id&quot;: &quot;${noteIdSale}&quot;,&#xd;
  &quot;version&quot;: &quot;AAAAAAAAXfs=&quot;&#xd;
}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Comms</stringProp>
                      <stringProp name="HTTPSampler.method">PUT</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="RandomTimer.range">3000</stringProp>
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="35.DELETE_Note_for_a _Sale" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE_Note_for_a _Sale" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Comms/${noteIdSale}</stringProp>
                      <stringProp name="HTTPSampler.method">DELETE</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserProfiles" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/UserProfiles</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                          </elementProp>
                          <elementProp name="Authorization" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="RandomTimer.range">3000</stringProp>
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="36.Back_to_Sale_page" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="saleProposalView" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/saleProposalView.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${token}</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContactSales/GetWithPaging" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContactSales/GetWithPaging</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContactSales" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContactSales/${saleId}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="proposalList" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/proposalList.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetFooterCounts" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContactSales/GetFooterCounts/${saleId}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="proposalFormDetail" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/proposalFormDetail.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">1000</stringProp>
                    <stringProp name="RandomTimer.range">3000</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Reminder" enabled="true"/>
              <hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="37.Open_Reminder_Sale" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Reminder_icon_Sale" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/todoView.html</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                      <stringProp name="DurationAssertion.duration">3000</stringProp>
                    </DurationAssertion>
                    <hashTree/>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                      <stringProp name="RandomTimer.range">3000</stringProp>
                      <stringProp name="ConstantTimer.delay">1000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Comms" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="recordId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">recordId</stringProp>
                          <stringProp name="Argument.value">${saleId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="commType" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">commType</stringProp>
                          <stringProp name="Argument.value">1</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/Comms</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="Authorization" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">bearer ${token}</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">3000</stringProp>
                      <stringProp name="ConstantTimer.delay">1000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="38.Click_Add_Reminder_Sale" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Add_Reminder_Sale" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/todoFormAdd.html</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                      <stringProp name="DurationAssertion.duration">3000</stringProp>
                    </DurationAssertion>
                    <hashTree/>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                      <stringProp name="ConstantTimer.delay">3000</stringProp>
                      <stringProp name="RandomTimer.range">10000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                      <elementProp name="Authorization" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">bearer ${token}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserProfiles" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/UserProfiles</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">5000</stringProp>
                      <stringProp name="ConstantTimer.delay">3000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="39.Click_Save_Reminder_Sale" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Save_Reminder_Sale" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
  &quot;todoUserId&quot;: &quot;${userProfileId}&quot;,&#xd;
  &quot;toDoTargetDate&quot;: &quot;${toDate}&quot;,&#xd;
  &quot;toDoTargetTime&quot;: &quot;00:00&quot;,&#xd;
  &quot;toDoCompleted&quot;: false,&#xd;
  &quot;updatedBy&quot;: &quot;${userName}&quot;,&#xd;
  &quot;updatedDate&quot;: &quot;${timeDate}&quot;,&#xd;
  &quot;toDoInstruction&quot;: &quot;reminder for sale&quot;,&#xd;
  &quot;active&quot;: true,&#xd;
  &quot;commsTypeValue&quot;: 1,&#xd;
  &quot;recordId&quot;: &quot;${saleId}&quot;,&#xd;
  &quot;entityType&quot;: 2&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/Comms</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="TestPlan.comments">Add Reminder for a Sale</stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">bearer ${token}</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_remIdSale" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">remIdSale</stringProp>
                      <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_RemSaleTypeId" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">RemSaleTypeId</stringProp>
                      <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                      <stringProp name="DurationAssertion.duration">3000</stringProp>
                    </DurationAssertion>
                    <hashTree/>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                      <stringProp name="RandomTimer.range">5000</stringProp>
                      <stringProp name="ConstantTimer.delay">3000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="todoFormDetail" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/todoFormDetail.html</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="todoList" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/todoList.html</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserProfiles" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/UserProfiles</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">3000</stringProp>
                      <stringProp name="ConstantTimer.delay">1000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="Authorization" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">bearer ${token}</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                  <stringProp name="IfController.condition">&quot;${remIdSale}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${remIdSale}&quot; != &quot;\${remIdSale}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="40.Click_Edit_Reminder_Sale" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Edit_Reminder" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/todoFormEdit.html</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="RandomTimer.range">5000</stringProp>
                        <stringProp name="ConstantTimer.delay">3000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="40b.Update_reminder_Sale" enabled="false">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
  &quot;commsType&quot;: null,&#xd;
  &quot;commsTypeValue&quot;: 0,&#xd;
  &quot;commsTypeId&quot;: &quot;${RemSaleTypeId}&quot;,&#xd;
  &quot;entityType&quot;: 1,&#xd;
  &quot;recordId&quot;: &quot;${saleId}&quot;,&#xd;
  &quot;todoUserId&quot;: &quot;${userProfileId}&quot;,&#xd;
  &quot;toDoReadStatus&quot;: null,&#xd;
  &quot;toDoInstruction&quot;: &quot;reminder for contact updated&quot;,&#xd;
  &quot;toDoTargetDate&quot;: &quot;${toDate}&quot;,&#xd;
  &quot;updateNotes&quot;: null,&#xd;
  &quot;toDoTargetTime&quot;: &quot;00:00&quot;,&#xd;
  &quot;toDoCompleted&quot;: false,&#xd;
  &quot;shareExternal&quot;: false,&#xd;
  &quot;communicationTypeStatusId&quot;: null,&#xd;
  &quot;associatedDescription&quot;: null,&#xd;
  &quot;docName&quot;: null,&#xd;
  &quot;documents&quot;: null,&#xd;
  &quot;userDisplayName&quot;: null,&#xd;
  &quot;ucir&quot;: &quot;${tenantId}&quot;,&#xd;
  &quot;createdBy&quot;: &quot;${username}&quot;,&#xd;
  &quot;updatedBy&quot;: &quot;${username}&quot;,&#xd;
  &quot;createdDate&quot;: &quot;${timeDate}&quot;,&#xd;
  &quot;updatedDate&quot;: &quot;${timeDate}&quot;,&#xd;
  &quot;id&quot;: &quot;${remIdSale}&quot;,&#xd;
  &quot;version&quot;: &quot;AAAAAAAAXfw=&quot;&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/Comms</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">bearer ${token}</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">3000</stringProp>
                      <stringProp name="ConstantTimer.delay">1000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="41.DELETE_Reminder_for_a_Sale" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">bearer ${token}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE_Reminder_for_a_Sale" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Comms/${remIdSale}</stringProp>
                      <stringProp name="HTTPSampler.method">DELETE</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                        <stringProp name="RandomTimer.range">5000</stringProp>
                        <stringProp name="ConstantTimer.delay">3000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Comms" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="recordId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">recordId</stringProp>
                            <stringProp name="Argument.value">${saleId}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="commType" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">commType</stringProp>
                            <stringProp name="Argument.value">1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Comms</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="RandomTimer.range">3000</stringProp>
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="42.Back_to_Sale_page" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="saleProposalView" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/saleProposalView.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${token}</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContactSales/GetWithPaging" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContactSales/GetWithPaging</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContactSales" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContactSales/${saleId}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="proposalList" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/proposalList.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetFooterCounts" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContactSales/GetFooterCounts/${saleId}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="proposalFormDetail" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/proposalFormDetail.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">1000</stringProp>
                    <stringProp name="RandomTimer.range">3000</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Add Invoice for Sale Proposal" enabled="true"/>
              <hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="43.Click_Invoice_icon_Sale" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Invoice_icon_Sale" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/invoiceView.html</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                      <stringProp name="DurationAssertion.duration">3000</stringProp>
                    </DurationAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetWithPaging" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">filter</stringProp>
                          <stringProp name="Argument.value">3</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="page" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">page</stringProp>
                          <stringProp name="Argument.value">1</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="type" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">type</stringProp>
                          <stringProp name="Argument.value">2</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="referId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">referId</stringProp>
                          <stringProp name="Argument.value">${saleId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/Invoices/GetWithPaging</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Authorization" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">bearer ${token}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="ConstantTimer.delay">1000</stringProp>
                      <stringProp name="RandomTimer.range">3000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="44.Click_Add_Invoice_Sale" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Authorization" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">bearer ${token}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContactSales/${saleId}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContactSales/${saleId}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Add_Invoice_Sale" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/invoiceFormAdd.html</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                      <stringProp name="DurationAssertion.duration">3000</stringProp>
                    </DurationAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContacts" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/UIBuilder" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/UIBuilder</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContactSales/UIBuilder" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContactSales/UIBuilder</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="ConstantTimer.delay">5000</stringProp>
                      <stringProp name="RandomTimer.range">50000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="45.Click_Save_Invoice_Sale" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="15.Click_Save_Invoice_Sale" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
  &quot;createdByRhino&quot;: true,&#xd;
  &quot;terms&quot;: &quot;Invoices should be paid within 7 days from the Invoice Date&quot;,&#xd;
  &quot;notes&quot;: &quot;Note for add invoice for a Sale&quot;,&#xd;
  &quot;invoiceDate&quot;: &quot;${fromDate}&quot;,&#xd;
  &quot;invoiceRef&quot;: &quot;Draft&quot;,&#xd;
  &quot;dueDate&quot;: &quot;${toDate}&quot;,&#xd;
  &quot;companyContactSalesId&quot;: &quot;${saleId}&quot;,&#xd;
  &quot;grossAmt&quot;: 120,&#xd;
  &quot;netValue&quot;: 100,&#xd;
  &quot;description&quot;: &quot;new sale&quot;,&#xd;
  &quot;companyContactId&quot;: &quot;${contactId}&quot;,&#xd;
  &quot;taxAmt1&quot;: 20,&#xd;
  &quot;taxAmt2&quot;: null,&#xd;
  &quot;taxAmt3&quot;: null,&#xd;
  &quot;taxRate1&quot;: 0.2,&#xd;
  &quot;taxRate2&quot;: null,&#xd;
  &quot;taxRate3&quot;: null,&#xd;
  &quot;invoiceDetails&quot;: [],&#xd;
  &quot;userProfileId&quot;: &quot;${userProfileId}&quot;,&#xd;
  &quot;source&quot;: 2&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/Invoices</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:51.0) Gecko/20100101 Firefox/51.0</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">bearer ${token}</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_InvoiceSaleId" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">InvoiceSaleId</stringProp>
                      <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Invoice has been added" enabled="false">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1315721960">${adInvoiceSaleId}</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="TestPlan.comments">Verify sale has been added</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                      <stringProp name="DurationAssertion.duration">10000</stringProp>
                    </DurationAssertion>
                    <hashTree/>
                  </hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Authorization" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">bearer ${token}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                    <stringProp name="IfController.condition">&quot;${InvoiceSaleId}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${InvoiceSaleId}&quot; != &quot;\${InvoiceSaleId}&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Invoices/${InvoiceSaleId}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Invoices/${InvoiceSaleId}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="invoiceList.html" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/invoiceList.html</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Invoices/GetFooterCounts/${InvoiceSaleId}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Invoices/GetFooterCounts/${InvoiceSaleId}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="invoiceFormDetail" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/invoiceFormDetail.html</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                        <stringProp name="RandomTimer.range">3000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                  <stringProp name="IfController.condition">&quot;${InvoiceSaleId}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${InvoiceSaleId}&quot; != &quot;\${InvoiceSaleId}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="46.Click_Edit_Invoice" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="invoiceFormEdit" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/invoiceFormEdit.html</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                        <stringProp name="RandomTimer.range">3000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="47.DEL Invoice for Sale" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="16.DEL Invoice for Sale" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Invoices/${InvoiceSaleId}</stringProp>
                      <stringProp name="HTTPSampler.method">DELETE</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Invoice for Sale has been deleted" enabled="false">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1259833018">Successful</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                        <stringProp name="TestPlan.comments">Verify Invoice for Sale has been deleted</stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                        <stringProp name="RandomTimer.range">3000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="48.Back_to_Sale_page" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="saleProposalView" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/saleProposalView.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${token}</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContactSales/GetWithPaging" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="filter" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">2</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">filter</stringProp>
                      </elementProp>
                      <elementProp name="page" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">page</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContactSales/GetWithPaging</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContactSales/GetWithPaging" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="filter" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">2</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">filter</stringProp>
                      </elementProp>
                      <elementProp name="page" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">2</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">page</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContactSales/GetWithPaging</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContactSales/${saleId}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContactSales/${saleId}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="proposalList" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/proposalList.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetFooterCounts" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContactSales/GetFooterCounts/${saleId}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="proposalFormDetail" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/proposalFormDetail.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">1000</stringProp>
                    <stringProp name="RandomTimer.range">3000</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="49.Click_Edit_Sale" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Edit_Sale" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/proposalFormEdit.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                      <elementProp name="Authorization" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">bearer ${token}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${token}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserProfiles" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/UserProfiles</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContacts" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="companyContactSalesLifeCycle" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/companyContactSalesLifeCycle</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="RandomTimer.range">5000</stringProp>
                    <stringProp name="ConstantTimer.delay">3000</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="49b.Update_Sale" enabled="false">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${token}</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContacts" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;contactName&quot;: &quot;load contact updated&quot;,&#xd;
  &quot;contactAdr1&quot;: null,&#xd;
  &quot;contactAdr2&quot;: null,&#xd;
  &quot;contactAdr3&quot;: null,&#xd;
  &quot;contactAdr4&quot;: null,&#xd;
  &quot;contactAdrZip&quot;: null,&#xd;
  &quot;contactAdrCountry&quot;: null,&#xd;
  &quot;contactPhoneNum1&quot;: null,&#xd;
  &quot;contactPhoneNum2&quot;: null,&#xd;
  &quot;contactPhoneNum3&quot;: null,&#xd;
  &quot;contactEmailAdr1&quot;: null,&#xd;
  &quot;contactEmailAdr2&quot;: null,&#xd;
  &quot;customer&quot;: true,&#xd;
  &quot;supplier&quot;: false,&#xd;
  &quot;partner&quot;: false,&#xd;
  &quot;private&quot;: false,&#xd;
  &quot;active&quot;: true,&#xd;
  &quot;companyId&quot;: null,&#xd;
  &quot;contactKeyword&quot;: null,&#xd;
  &quot;company&quot;: null,&#xd;
  &quot;ucir&quot;: &quot;${userProfileId}&quot;,&#xd;
  &quot;createdBy&quot;: &quot;${username}&quot;,&#xd;
  &quot;updatedBy&quot;: null,&#xd;
  &quot;createdDate&quot;: &quot;${timeDate}&quot;,&#xd;
  &quot;updatedDate&quot;: null,&#xd;
  &quot;id&quot;: &quot;${contactId}&quot;,&#xd;
  &quot;version&quot;: &quot;AAAAAAAAXfo=&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts</stringProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">https://loadtest.rhinoapps.com</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                      </elementProp>
                      <elementProp name="Authorization" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">bearer qAgmh8Hrt7BmkYGbWR-QLNGcnQm7-TNqgiH5WpJfaK2_yOrwj1x_jc5Spt3Z_MFjqNuSWI-9M6qdAb_iJG1JKAQhgxnrLOfRUjP7RYCKoPwwmCdipFb3USLyFP8YzWcgToQEg752_xz44u-KHajhUmoWmBQ5_Lv8qAh12l_nX9rxBFzjWuPkGFHgZ6MmlXyx8ccO_WJx6mgXINz5uJeFDRwVK9z5wHsKSNs-_DuttWtRwMIB5lpS4rRklu6iNaGcCcEclwUQuG-HdeHyX1TGm5I7tn--bCmgMe2g9fji8ej2m0XJNZRQhJAVhGISpLQdzSGK0GtGtR_sLxqQQYSBvl1q7fbvOkioQnQoElkvvtWTtdPayuOguj5kuOqFLpBPbij1MF1yeyznOFN0v2LGzASmIc0H9ETaYuYSzAsCJsnUdRgqEiFs3xObXPUfuLoJJbjirGsOcj3E28oTfq-lkQpRKbcwkmkJcxbY4jOORD9f6qmqHwHrc5ltmSExLg1-ZdkKA84ESLhJP40cVko_0euEI6KK41C_9vB1AvHFSPdVFEcTZJPdOh1Avao2993v_aQzXz24OaH10nmeHsb1qFtdnuq6d6N9twy3y7dJQgPxkkYOFTLbd3u2V0Pj_GDixlS65qO00lLkSU42zBYaRcq1LiW1cQg5Qn7CMf-cKlk</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://loadtest.rhinoapps.com/Rhino/</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">bearer ${token}</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                    <stringProp name="RandomTimer.range">5000</stringProp>
                    <stringProp name="ConstantTimer.delay">3000</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContacts" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts/${contactId}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="RandomTimer.range">3000</stringProp>
                    <stringProp name="ConstantTimer.delay">1000</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="50.Click_DELETE_Sale" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${token}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE SaleProposal" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContactSales/${saleId}</stringProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify sale proposal has been deleted" enabled="false">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="1259833018">Successful</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="TestPlan.comments">Verify sale proposal  has been deleted</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContactSales/GetWithPaging" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="filter" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">2</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">filter</stringProp>
                      </elementProp>
                      <elementProp name="page" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">3</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">page</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContactSales/GetWithPaging</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="RandomTimer.range">4000</stringProp>
                    <stringProp name="ConstantTimer.delay">2000</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Add Invoice for Empty project (Invoice 01)" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">bearer ${token}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="51.Visit_Project_page" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Visit_Project_page" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${rhinoPath}/#/project</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                  <stringProp name="DurationAssertion.duration">3000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="projectView" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/projectView.html</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectStatuses/GetDefaultStatus" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectStatuses/GetDefaultStatus</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTypes/GetDefaultType" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTypes/GetDefaultType</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectActivities" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="filter" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">{&quot;active&quot;:true}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">filter</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectActivities</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/GetWithPaging" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">type</stringProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="filter" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">filter</stringProp>
                    </elementProp>
                    <elementProp name="page" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">page</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetWithPaging</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/GetWithPaging" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">type</stringProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="filter" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">filter</stringProp>
                    </elementProp>
                    <elementProp name="page" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">2</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">page</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetWithPaging</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_projectManagerId" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">projectManagerId</stringProp>
                  <stringProp name="RegexExtractor.regex">.*&quot;projectManagerId&quot;:&quot;([^&quot;]+)&quot;.* </stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_projectStatusId" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">projectStatusId</stringProp>
                  <stringProp name="RegexExtractor.regex">.*&quot;projectStatusId&quot;:&quot;([^&quot;]+)&quot;.* </stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_projectTypeId" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">projectTypeId</stringProp>
                  <stringProp name="RegexExtractor.regex">.*&quot;projectTypeId&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="projectList" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/projectList.html</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectStatuses" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectStatuses</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContacts" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTypes" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTypes</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                  <stringProp name="RandomTimer.range">3000</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="52.Click_Add_Project" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Add_Project01" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/projectFormAdd.html</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                  <stringProp name="DurationAssertion.duration">3000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContacts" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTypes" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTypes</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserProfiles" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/UserProfiles</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectStatuses" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectStatuses</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">2000</stringProp>
                  <stringProp name="RandomTimer.range">4000</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="53.Select_Contact" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContactSales/GetByContact/${contactId}" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContactSales/GetByContact/${contactId}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">7000</stringProp>
                  <stringProp name="RandomTimer.range">35000</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="54.Click_Save_Project" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Save_Project01" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;projectManagerId&quot;: &quot;${projectManagerId}&quot;,&#xd;
  &quot;projectStatusId&quot;: &quot;${projectStatusId}&quot;,&#xd;
  &quot;companyContactId&quot;: &quot;${contactId}&quot;,&#xd;
  &quot;projectName&quot;: &quot;P001 Load project&quot;,&#xd;
  &quot;projectTypeId&quot;: &quot;${projectTypeId}&quot;,&#xd;
  &quot;chargeType&quot;: &quot;1&quot;,&#xd;
  &quot;chargeNote&quot;: &quot;Note - project to add invoices&quot;,&#xd;
  &quot;fromSaleProposal&quot;: false,&#xd;
  &quot;isWonStatusSaleProposal&quot;: false&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/Projects</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">Add project01 - Empty project</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${token}</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_ProjectId" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">projectId</stringProp>
                  <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get_json_projectTaskId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">defProjectTaskId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.projectTasks[0].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                  <stringProp name="DurationAssertion.duration">3000</stringProp>
                </DurationAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save_Projects" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;projectManagerId&quot;: &quot;${projectManagerId}&quot;,&#xd;
  &quot;projectStatusId&quot;: &quot;${projectStatusId}&quot;,&#xd;
  &quot;projectName&quot;: &quot;P001&quot;,&#xd;
  &quot;projectTypeId&quot;: &quot;${projectTypeId}&quot;,&#xd;
  &quot;chargeType&quot;: &quot;3&quot;,&#xd;
  &quot;fixedPriceAmt&quot;: null,&#xd;
  &quot;companyContactId&quot;: &quot;${contactId}&quot;,&#xd;
  &quot;fromSaleProposal&quot;: false,&#xd;
  &quot;isWonStatusSaleProposal&quot;: false&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/Projects</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="Origin" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">https://loadtest.rhinoapps.com</stringProp>
                    </elementProp>
                    <elementProp name="X-DevTools-Emulate-Network-Conditions-Client-Id" elementType="Header">
                      <stringProp name="Header.name">X-DevTools-Emulate-Network-Conditions-Client-Id</stringProp>
                      <stringProp name="Header.value">b8dd5b5a-3cec-4f37-9370-c2292513434e</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer I_nySF66IDQrVeP5tQflB2uC21SWO09e1xAeam9F9kFPb7O6I4uMHywRYf4hbhV1ar0xWALVuxhiitDCuML2r6X_HFw2ZXtDaRF-IhsCYdAL-x9OP7YjcPWD5Z7VydSUAK3JcwfLoMco3Qf4l9V-32lxdke3sKl0mbVfpEAGXAcFDaWw-PKjbSUKxhWNVeBhrEYmTrrls6Z3xRiAm2u2WA2U90yzvks198SOPkNdKnmw9IPGIq-Xw8HWY9CrzG2d8ix2iM9XhPAoHAuBvIwQCpzvaS5aQNbIbBm4O3fDTfkLQC1PeA82lGK1KfJkyCxadff2DT48RPsFXFh3F0tl1AkQH-DsaqIejWzgZZN5ajsTZa54xY9E_28zgyQHgyhK99LgYvrhxdMOjzENTL1QGRy80zLLE0pgyQyu6DrMnIQ8QLvCWxPK6712vxJlkm_OEe5nc2F8VvIqAouXRW4wO2eTDY0AaoBH7VBIT4Erw5_oDjX0wW2C0AGYLL4qx_B3RJqT000oOiJMekVGvozx1zdrbEWrCTP9HQQdrs_AXTPahDlPKluI_piXrhJRvdXJcf15vZHpzoUasd3V6FndTk6XLTzVY_VMeF3K5V_T1CcdlKcOIt2YHW0AxrwXSpVzLm3iEtkdShVSY_1DFsLQmQ</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://loadtest.rhinoapps.com/Rhino/</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">1548.8000000000002</stringProp>
                  <stringProp name="ConstantTimer.delay">3097.6000000000004</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">&quot;${projectId}&quot; != &quot;NOT FOUND&quot;  &amp;&amp; &quot;${projectId}&quot; != &quot;\${projectId}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/${projectId}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/${projectId}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/GetFooterCounts/${projectId}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetFooterCounts/${projectId}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">1000</stringProp>
                    <stringProp name="RandomTimer.range">3000</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${projectId}&quot; != &quot;NOT FOUND&quot;  &amp;&amp; &quot;${projectId}&quot; != &quot;\${projectId}&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">&quot;${defProjectTaskId}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${defProjectTaskId}&quot; != &quot;\${defProjectTaskId}&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="55.Click_Tasks_project" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Tasks_project" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/projectTaskView.html</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                      <stringProp name="DurationAssertion.duration">3000</stringProp>
                    </DurationAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectActivities" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">{&quot;active&quot;:true}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">filter</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectActivities</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/Projects</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/GetProjectsWithLive" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetProjectsWithLive</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTasks/GetWithPaging?filter=0&amp;page=1&amp;plannedDeadLine=2017-03-26T17:00:00.000Z&amp;projectId=973fe143-58cc-4334-b73f-6ad931cd1c08&amp;t=1490614318839&amp;type=2" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">filter</stringProp>
                        </elementProp>
                        <elementProp name="plannedDeadLine" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">plannedDeadLine</stringProp>
                          <stringProp name="Argument.value">${timeDate}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="page" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">1</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">page</stringProp>
                        </elementProp>
                        <elementProp name="type" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">type</stringProp>
                          <stringProp name="Argument.value">2</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="projectId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">projectId</stringProp>
                          <stringProp name="Argument.value">${projectId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTasks/GetWithPaging</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="projectTaskList" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/projectTaskList.html</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/UIBuilder" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/UIBuilder</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="ConstantTimer.delay">1000</stringProp>
                      <stringProp name="RandomTimer.range">3000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="56.Select_Default_Task" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Select_Default_Task" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTasks/${defProjectTaskId}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                      <stringProp name="DurationAssertion.duration">3000</stringProp>
                    </DurationAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Default_Task***" enabled="false">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTasks/52bd7807-964d-4232-b338-517be44fbe60</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="TestPlan.comments">DEL_Default_Project_Task</stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">bearer ${token}</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                      <stringProp name="DurationAssertion.duration">3000</stringProp>
                    </DurationAssertion>
                    <hashTree/>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="ConstantTimer.delay">1000</stringProp>
                      <stringProp name="RandomTimer.range">3000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Open_Default_Task_Detail" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/projectTaskFormDetail.html</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTasks/GetFooterCounts/${defProjectTaskId}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTasks/GetFooterCounts/${defProjectTaskId}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/${projectId}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/${projectId}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectActivities/GetByProject/${projectId}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectActivities/GetByProject/${projectId}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="ConstantTimer.delay">1000</stringProp>
                      <stringProp name="RandomTimer.range">3000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="57.Click_Edit_Default_Task" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Edit_Task" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/projectTaskFormEdit.html</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                      <stringProp name="DurationAssertion.duration">3000</stringProp>
                    </DurationAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/UIBuilder" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/UIBuilder</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserProfiles" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/UserProfiles</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="ConstantTimer.delay">1000</stringProp>
                      <stringProp name="RandomTimer.range">3000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="58.Click_Delete_Default_Task" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Delete_Task" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTasks/${defProjectTaskId}</stringProp>
                    <stringProp name="HTTPSampler.method">DELETE</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="TestPlan.comments">DEL_Default_Project_Task</stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">bearer ${token}</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                      <stringProp name="DurationAssertion.duration">3000</stringProp>
                    </DurationAssertion>
                    <hashTree/>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="ConstantTimer.delay">1000</stringProp>
                      <stringProp name="RandomTimer.range">3000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="59.Back_to_Project" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Back_to_Project" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/projectView.html</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                      <stringProp name="DurationAssertion.duration">3000</stringProp>
                    </DurationAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectStatuses/GetDefaultStatus" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectStatuses/GetDefaultStatus</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTypes/GetDefaultType" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTypes/GetDefaultType</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectActivities" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">{&quot;active&quot;:true}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">filter</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectActivities</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/GetWithPaging" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">1</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">filter</stringProp>
                        </elementProp>
                        <elementProp name="page" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">1</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">page</stringProp>
                        </elementProp>
                        <elementProp name="type" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">type</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetWithPaging</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/GetWithPaging" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="filter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">1</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">filter</stringProp>
                        </elementProp>
                        <elementProp name="page" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">2</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">page</stringProp>
                        </elementProp>
                        <elementProp name="type" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">type</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetWithPaging</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/${projectId}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/${projectId}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="projectList" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/projectList.html</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectStatuses" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectStatuses</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContacts" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTypes" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTypes</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/GetFooterCounts/${projectId}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetFooterCounts/${projectId}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="projectFormDetail" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/projectFormDetail.html</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="ConstantTimer.delay">1000</stringProp>
                      <stringProp name="RandomTimer.range">3000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Add Invoice 01" enabled="true"/>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="60.Click_Invoice_icon01" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Invoice_icon01" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/invoiceView.html</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                        <stringProp name="DurationAssertion.duration">3000</stringProp>
                      </DurationAssertion>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Invoices/GetWithPaging?filter=3&amp;page=1&amp;referId=${projectId}&amp;type=3" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="filter" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">3</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">filter</stringProp>
                          </elementProp>
                          <elementProp name="page" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">page</stringProp>
                          </elementProp>
                          <elementProp name="type" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">type</stringProp>
                            <stringProp name="Argument.value">3</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="referId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">referId</stringProp>
                            <stringProp name="Argument.value">${projectId}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Invoices/GetWithPaging</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                        <stringProp name="RandomTimer.range">3000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="61.Click_Add_Invoice01" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/${projectId}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/${projectId}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="28.Click_Add_Invoice01" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/invoiceFormAdd.html</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                        <stringProp name="DurationAssertion.duration">3000</stringProp>
                      </DurationAssertion>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContacts" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/UIBuilder" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/UIBuilder</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContactSales/UIBuilder" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContactSales/UIBuilder</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">5000</stringProp>
                        <stringProp name="RandomTimer.range">30000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="62.Click_Save_Invoice01" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="29.Click_Save_Invoice01" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&#xd;
  &quot;createdByRhino&quot;: true,&#xd;
  &quot;terms&quot;: &quot;Invoices should be paid within 7 days from the Invoice Date&quot;,&#xd;
  &quot;notes&quot;: &quot;Note - Invoice for Empty project&quot;,&#xd;
  &quot;invoiceDate&quot;: &quot;${fromDate}&quot;,&#xd;
  &quot;invoiceRef&quot;: &quot;Draft&quot;,&#xd;
  &quot;dueDate&quot;: &quot;${toDate}&quot;,&#xd;
  &quot;projectId&quot;: &quot;${projectId}&quot;,&#xd;
  &quot;description&quot;: &quot;Invoice for Empty project&quot;,&#xd;
  &quot;companyContactId&quot;: &quot;${contactId}&quot;,&#xd;
  &quot;invoiceDetails&quot;: [],&#xd;
  &quot;totalExpenseAmt&quot;: 0,&#xd;
  &quot;taxRate1&quot;: 0.2,&#xd;
  &quot;netValue&quot;: 100,&#xd;
  &quot;taxAmt1&quot;: 20,&#xd;
  &quot;grossAmt&quot;: 120,&#xd;
  &quot;userProfileId&quot;: &quot;${userProfileId}&quot;,&#xd;
  &quot;source&quot;: 3&#xd;
}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Invoices</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="TestPlan.comments">Save_Invoice_for_Empty_project</stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                          </elementProp>
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_InvoiceId for Empty project" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">invoiceId01</stringProp>
                        <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="Sample.scope">all</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                        <stringProp name="DurationAssertion.duration">10000</stringProp>
                      </DurationAssertion>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***Invoices" enabled="false">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&#xd;
  &quot;createdByRhino&quot;: true,&#xd;
  &quot;terms&quot;: &quot;Invoices should be paid within 7 days from the Invoice Date&quot;,&#xd;
  &quot;notes&quot;: &quot;Registered Company No: 111222333    Bank Sort Code 00-11-00     Bank Account No: 1010101010&quot;,&#xd;
  &quot;invoiceDate&quot;: &quot;2017-03-26T17:00:00.000Z&quot;,&#xd;
  &quot;invoiceRef&quot;: &quot;Draft&quot;,&#xd;
  &quot;dueDate&quot;: &quot;2017-04-02T17:00:00.000Z&quot;,&#xd;
  &quot;projectId&quot;: &quot;973fe143-58cc-4334-b73f-6ad931cd1c08&quot;,&#xd;
  &quot;description&quot;: &quot;P001&quot;,&#xd;
  &quot;companyContactId&quot;: &quot;df151d99-00c8-4212-b7d4-95bf35f6c616&quot;,&#xd;
  &quot;invoiceDetails&quot;: [],&#xd;
  &quot;totalExpenseAmt&quot;: 0,&#xd;
  &quot;taxRate1&quot;: 0.2,&#xd;
  &quot;netValue&quot;: 100,&#xd;
  &quot;taxAmt1&quot;: 20,&#xd;
  &quot;grossAmt&quot;: 120,&#xd;
  &quot;userProfileId&quot;: &quot;55103616-81e8-4611-a977-38073b013850&quot;,&#xd;
  &quot;source&quot;: 3&#xd;
}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">loadtest.rhinoapps.com</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">rhinoApi/api/Invoices</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                      <stringProp name="IfController.condition">&quot;${invoiceId01}&quot; != &quot;NOT FOUND&quot;  &amp;&amp; &quot;${invoiceId01}&quot; != &quot;\${invoiceId01}&quot;</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Invoices/${invoiceId01}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Invoices/${invoiceId01}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="invoiceList" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/invoiceList.html</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Invoices/GetFooterCounts/${invoiceId01}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Invoices/GetFooterCounts/${invoiceId01}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="invoiceFormDetail.html" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/invoiceFormDetail.html</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                        <stringProp name="RandomTimer.range">3000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                    <stringProp name="IfController.condition">&quot;${invoiceId01}&quot; != &quot;NOT FOUND&quot;  &amp;&amp; &quot;${invoiceId01}&quot; != &quot;\${invoiceId01}&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="63.Edit Invoice 01" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="invoiceFormEdit.html" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/invoiceFormEdit.html</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="ConstantTimer.delay">1000</stringProp>
                          <stringProp name="RandomTimer.range">3000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="64.DEL Invoice 01" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="30.DEL Invoice for Empty project" enabled="true">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/Invoices/${invoiceId01}</stringProp>
                        <stringProp name="HTTPSampler.method">DELETE</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">bearer ${token}</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Invoice for Empty project has been deleted" enabled="false">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="1259833018">Successful</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">2</intProp>
                          <stringProp name="TestPlan.comments">Verify Invoice for Empty project has been deleted</stringProp>
                        </ResponseAssertion>
                        <hashTree/>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="ConstantTimer.delay">1000</stringProp>
                          <stringProp name="RandomTimer.range">3000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Add invoice for Project with task (Invoice 02)" enabled="true"/>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${token}</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Add new Task" enabled="true"/>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="65.Back_to_Project" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Back_to_Project" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/projectView.html</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                        <stringProp name="DurationAssertion.duration">3000</stringProp>
                      </DurationAssertion>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectStatuses/GetDefaultStatus" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectStatuses/GetDefaultStatus</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTypes/GetDefaultType" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTypes/GetDefaultType</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectActivities" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="filter" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">{&quot;active&quot;:true}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">filter</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectActivities</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/GetWithPaging" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="filter" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">filter</stringProp>
                          </elementProp>
                          <elementProp name="page" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">page</stringProp>
                          </elementProp>
                          <elementProp name="type" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">type</stringProp>
                            <stringProp name="Argument.value">0</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetWithPaging</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/GetWithPaging" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="filter" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">filter</stringProp>
                          </elementProp>
                          <elementProp name="page" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">2</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">page</stringProp>
                          </elementProp>
                          <elementProp name="type" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">type</stringProp>
                            <stringProp name="Argument.value">0</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetWithPaging</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/${projectId}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/${projectId}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="projectList" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/projectList.html</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectStatuses" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectStatuses</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContacts" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTypes" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTypes</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/GetFooterCounts/${projectId}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetFooterCounts/${projectId}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="projectFormDetail" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/projectFormDetail.html</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                        <stringProp name="RandomTimer.range">3000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="66.Click_Task" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Tasks_project02" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/projectTaskView.html</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                        <stringProp name="DurationAssertion.duration">3000</stringProp>
                      </DurationAssertion>
                      <hashTree/>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                        <stringProp name="RandomTimer.range">3000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectActivities" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="filter" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">{&quot;active&quot;:true}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">filter</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectActivities</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Projects</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/GetProjectsWithLive" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetProjectsWithLive</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTasks/GetWithPaging" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="filter" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">filter</stringProp>
                            <stringProp name="Argument.value">0</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="plannedDeadLine" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">plannedDeadLine</stringProp>
                            <stringProp name="Argument.value">${timeDate}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="page" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">page</stringProp>
                            <stringProp name="Argument.value">1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="type" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">type</stringProp>
                            <stringProp name="Argument.value">2</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="projectId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">projectId</stringProp>
                            <stringProp name="Argument.value">${projectId}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTasks/GetWithPaging</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                        <stringProp name="RandomTimer.range">3000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="67.Click_Add_Task" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="t" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">1490614573889</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">t</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Projects</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="t" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">1490614573890</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">t</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Projects</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectActivities/GetByProject/${projectId}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectActivities/GetByProject/${projectId}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_projectActivityId" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">projectActivityId</stringProp>
                        <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="Sample.scope">all</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Add_Task02" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/projectTaskFormAdd.html</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify_Add_Task_form_displayed" enabled="false">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="2524">OK</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                        <stringProp name="DurationAssertion.duration">3000</stringProp>
                      </DurationAssertion>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/UIBuilder" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/UIBuilder</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserProfiles" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/UserProfiles</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">5000</stringProp>
                        <stringProp name="RandomTimer.range">30000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="68.Click_Save_Task" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Save_Task02" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&#xd;
  &quot;projectId&quot;: &quot;${projectId}&quot;,&#xd;
  &quot;contactName&quot;: &quot;${contactName}&quot;,&#xd;
  &quot;projectActivityId&quot;: &quot;${projectActivityId}&quot;,&#xd;
  &quot;taskName&quot;: &quot;LoadT001 - New Task for project&quot;,&#xd;
  &quot;projectTaskType&quot;: &quot;1&quot;,&#xd;
  &quot;billingRate&quot;: 100,&#xd;
  &quot;planneEffort&quot;: 1,&#xd;
  &quot;userProfileId&quot;: &quot;${userProfileId}&quot;&#xd;
}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTasks</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="TestPlan.comments">projectTask02</stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, br</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                          </elementProp>
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                        <stringProp name="RandomTimer.range">3000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_projectTaskId" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">projectTaskId</stringProp>
                        <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="Sample.scope">all</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                        <stringProp name="DurationAssertion.duration">3000</stringProp>
                      </DurationAssertion>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="save ProjectTasks***" enabled="false">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&#xd;
  &quot;projectId&quot;: &quot;973fe143-58cc-4334-b73f-6ad931cd1c08&quot;,&#xd;
  &quot;contactName&quot;: &quot;C001&quot;,&#xd;
  &quot;projectActivityId&quot;: &quot;2b44c982-5c8b-4159-ab99-24788f87a94b&quot;,&#xd;
  &quot;taskName&quot;: &quot;T001&quot;,&#xd;
  &quot;projectTaskType&quot;: &quot;1&quot;,&#xd;
  &quot;billingRate&quot;: 100,&#xd;
  &quot;planneEffort&quot;: 1,&#xd;
  &quot;userProfileId&quot;: &quot;55103616-81e8-4611-a977-38073b013850&quot;&#xd;
}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">loadtest.rhinoapps.com</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">rhinoApi/api/ProjectTasks</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                      <stringProp name="IfController.condition">&quot;${projectTaskId}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${projectTaskId}&quot; != &quot;\${projectTaskId}&quot;</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTasks/${projectTaskId}" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTasks/${projectTaskId}</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="projectTaskList" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/projectTaskList.html</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/UIBuilder" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/UIBuilder</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTasks/GetFooterCounts/${projectTaskId}" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTasks/GetFooterCounts/${projectTaskId}</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="projectTaskFormDetail" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/projectTaskFormDetail.html</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="ConstantTimer.delay">1000</stringProp>
                          <stringProp name="RandomTimer.range">3000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                  <stringProp name="IfController.condition">&quot;${projectTaskId}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${projectTaskId}&quot; != &quot;\${projectTaskId}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="69.Back to project task" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/UIBuilder" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/UIBuilder</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                        <stringProp name="RandomTimer.range">3000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="70.Back_to_Project" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Back_to_Project" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/projectView.html</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                        <stringProp name="DurationAssertion.duration">3000</stringProp>
                      </DurationAssertion>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectStatuses/GetDefaultStatus" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectStatuses/GetDefaultStatus</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTypes/GetDefaultType" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTypes/GetDefaultType</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectActivities" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="filter" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">{&quot;active&quot;:true}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">filter</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectActivities</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/GetWithPaging" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="filter" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">filter</stringProp>
                          </elementProp>
                          <elementProp name="page" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">page</stringProp>
                          </elementProp>
                          <elementProp name="type" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">type</stringProp>
                            <stringProp name="Argument.value">0</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetWithPaging</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/GetWithPaging" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="filter" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">filter</stringProp>
                          </elementProp>
                          <elementProp name="page" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">2</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">page</stringProp>
                          </elementProp>
                          <elementProp name="type" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">type</stringProp>
                            <stringProp name="Argument.value">0</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetWithPaging</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/${projectId}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/${projectId}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="projectList" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/projectList.html</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectStatuses" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectStatuses</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContacts" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTypes" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTypes</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/GetFooterCounts/${projectId}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetFooterCounts/${projectId}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="projectFormDetail" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/projectFormDetail.html</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                        <stringProp name="RandomTimer.range">3000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Add Invoice 02" enabled="true"/>
                  <hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="71.Click_Invoice_icon" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="43.Click_Invoice_icon02" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/invoiceView.html</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                          <stringProp name="DurationAssertion.duration">3000</stringProp>
                        </DurationAssertion>
                        <hashTree/>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="ConstantTimer.delay">1000</stringProp>
                          <stringProp name="RandomTimer.range">3000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Invoices/GetWithPaging?filter=3&amp;page=1&amp;referId=${projectId}&amp;type=3" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="filter" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">3</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">filter</stringProp>
                            </elementProp>
                            <elementProp name="page" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">1</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">page</stringProp>
                            </elementProp>
                            <elementProp name="type" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">3</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">type</stringProp>
                            </elementProp>
                            <elementProp name="referId" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">referId</stringProp>
                              <stringProp name="Argument.value">${projectId}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/Invoices/GetWithPaging</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="ConstantTimer.delay">1000</stringProp>
                          <stringProp name="RandomTimer.range">3000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="72.Click_Add_Invoice02" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/${projectId}" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/${projectId}</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Add_Invoice02" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/invoiceFormAdd.html</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                          <stringProp name="DurationAssertion.duration">3000</stringProp>
                        </DurationAssertion>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContacts" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/UIBuilder" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/UIBuilder</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContactSales/UIBuilder" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContactSales/UIBuilder</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="ConstantTimer.delay">5000</stringProp>
                          <stringProp name="RandomTimer.range">30000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="73.Click_Save Invoice02" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Save_Invoice02" enabled="true">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">{&#xd;
  &quot;createdByRhino&quot;: true,&#xd;
  &quot;terms&quot;: &quot;Terms for Invoice 02&quot;,&#xd;
  &quot;notes&quot;: &quot;Note for Add invoice for Project with task&quot;,&#xd;
  &quot;invoiceDate&quot;: &quot;${timeDate}&quot;,&#xd;
  &quot;invoiceRef&quot;: &quot;Draft&quot;,&#xd;
  &quot;dueDate&quot;: &quot;${toDate}&quot;,&#xd;
  &quot;projectId&quot;: &quot;${projectId}&quot;,&#xd;
  &quot;description&quot;: &quot;Add invoice for Project with task&quot;,&#xd;
  &quot;companyContactId&quot;: &quot;${contactId}&quot;,&#xd;
  &quot;invoiceDetails&quot;: [],&#xd;
  &quot;totalExpenseAmt&quot;: null,&#xd;
  &quot;netValue&quot;: 100,&#xd;
  &quot;taxAmt1&quot;: 20,&#xd;
  &quot;taxAmt2&quot;: null,&#xd;
  &quot;taxAmt3&quot;: null,&#xd;
  &quot;grossAmt&quot;: 120,&#xd;
  &quot;userProfileId&quot;: &quot;${userProfileId}&quot;,&#xd;
  &quot;source&quot;: 3,&#xd;
  &quot;taxRate1&quot;: null,&#xd;
  &quot;taxRate2&quot;: null,&#xd;
  &quot;taxRate3&quot;: null&#xd;
}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/Invoices</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="TestPlan.comments">Add_invoice_for_Project_with_task</stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate, br</stringProp>
                            </elementProp>
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">bearer ${token}</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                            </elementProp>
                            <elementProp name="Content-Type" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/json</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="ConstantTimer.delay">2000</stringProp>
                          <stringProp name="RandomTimer.range">4000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_InvoiceId for PWT" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">invoiceId02</stringProp>
                          <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                          <stringProp name="Sample.scope">all</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                          <stringProp name="DurationAssertion.duration">10000</stringProp>
                        </DurationAssertion>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Invoice 02 ***" enabled="false">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">{&quot;createdByRhino&quot;:true,&quot;terms&quot;:&quot;Invoices should be paid within 7 days from the Invoice Date&quot;,&quot;notes&quot;:&quot;Registered Company No: 111222333    Bank Sort Code 00-11-00     Bank Account No: 1010101010&quot;,&quot;invoiceDate&quot;:&quot;2017-03-26T17:00:00.000Z&quot;,&quot;invoiceRef&quot;:&quot;Draft&quot;,&quot;dueDate&quot;:&quot;2017-04-02T17:00:00.000Z&quot;,&quot;projectId&quot;:&quot;973fe143-58cc-4334-b73f-6ad931cd1c08&quot;,&quot;description&quot;:&quot;P001&quot;,&quot;companyContactId&quot;:&quot;df151d99-00c8-4212-b7d4-95bf35f6c616&quot;,&quot;invoiceDetails&quot;:[{&quot;timestamp&quot;:&quot;d17665d0-6c1a-43ed-81e4-d151cd5d3022-0&quot;,&quot;createdDate&quot;:&quot;2017-03-27T11:37:07.466Z&quot;,&quot;invoiceDetailType&quot;:&quot;1&quot;,&quot;invoiceDetailDesc&quot;:&quot;T001&quot;,&quot;projectTaskId&quot;:&quot;d17665d0-6c1a-43ed-81e4-d151cd5d3022&quot;,&quot;invoiceDetailNetUnitPrice&quot;:100,&quot;invoiceDetailQty&quot;:1,&quot;expenses&quot;:[],&quot;timesheets&quot;:[],&quot;invoiceDetailTotalNet&quot;:100,&quot;taxRate1&quot;:0.2,&quot;taxAmt1&quot;:20,&quot;grossAmt&quot;:120}],&quot;totalExpenseAmt&quot;:null,&quot;netValue&quot;:100,&quot;taxAmt1&quot;:20,&quot;taxAmt2&quot;:null,&quot;taxAmt3&quot;:null,&quot;grossAmt&quot;:120,&quot;userProfileId&quot;:&quot;55103616-81e8-4611-a977-38073b013850&quot;,&quot;source&quot;:3,&quot;taxRate1&quot;:null,&quot;taxRate2&quot;:null,&quot;taxRate3&quot;:null}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">loadtest.rhinoapps.com</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">rhinoApi/api/Invoices</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.image_parser">true</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                            </elementProp>
                            <elementProp name="Origin" elementType="Header">
                              <stringProp name="Header.name">Origin</stringProp>
                              <stringProp name="Header.value">https://loadtest.rhinoapps.com</stringProp>
                            </elementProp>
                            <elementProp name="X-DevTools-Emulate-Network-Conditions-Client-Id" elementType="Header">
                              <stringProp name="Header.name">X-DevTools-Emulate-Network-Conditions-Client-Id</stringProp>
                              <stringProp name="Header.value">b8dd5b5a-3cec-4f37-9370-c2292513434e</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                            </elementProp>
                            <elementProp name="Authorization" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">bearer I_nySF66IDQrVeP5tQflB2uC21SWO09e1xAeam9F9kFPb7O6I4uMHywRYf4hbhV1ar0xWALVuxhiitDCuML2r6X_HFw2ZXtDaRF-IhsCYdAL-x9OP7YjcPWD5Z7VydSUAK3JcwfLoMco3Qf4l9V-32lxdke3sKl0mbVfpEAGXAcFDaWw-PKjbSUKxhWNVeBhrEYmTrrls6Z3xRiAm2u2WA2U90yzvks198SOPkNdKnmw9IPGIq-Xw8HWY9CrzG2d8ix2iM9XhPAoHAuBvIwQCpzvaS5aQNbIbBm4O3fDTfkLQC1PeA82lGK1KfJkyCxadff2DT48RPsFXFh3F0tl1AkQH-DsaqIejWzgZZN5ajsTZa54xY9E_28zgyQHgyhK99LgYvrhxdMOjzENTL1QGRy80zLLE0pgyQyu6DrMnIQ8QLvCWxPK6712vxJlkm_OEe5nc2F8VvIqAouXRW4wO2eTDY0AaoBH7VBIT4Erw5_oDjX0wW2C0AGYLL4qx_B3RJqT000oOiJMekVGvozx1zdrbEWrCTP9HQQdrs_AXTPahDlPKluI_piXrhJRvdXJcf15vZHpzoUasd3V6FndTk6XLTzVY_VMeF3K5V_T1CcdlKcOIt2YHW0AxrwXSpVzLm3iEtkdShVSY_1DFsLQmQ</stringProp>
                            </elementProp>
                            <elementProp name="Content-Type" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/json</stringProp>
                            </elementProp>
                            <elementProp name="Referer" elementType="Header">
                              <stringProp name="Header.name">Referer</stringProp>
                              <stringProp name="Header.value">https://loadtest.rhinoapps.com/Rhino/</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate, br</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="RandomTimer.range">5472.0</stringProp>
                          <stringProp name="ConstantTimer.delay">10944.0</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                        <stringProp name="IfController.condition">&quot;${invoiceId02}&quot; != &quot;NOT FOUND&quot;  &amp;&amp; &quot;${invoiceId02}&quot; != &quot;\${invoiceId02}&quot;</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Invoices/${invoiceId02}" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/Invoices/${invoiceId02}</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree/>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="invoiceList" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/invoiceList.html</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree/>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Invoices/GetFooterCounts/${invoiceId02}" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/Invoices/GetFooterCounts/${invoiceId02}</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree/>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="invoiceFormDetail.html" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/invoiceFormDetail.html</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                            <stringProp name="ConstantTimer.delay">1000</stringProp>
                            <stringProp name="RandomTimer.range">3000</stringProp>
                          </UniformRandomTimer>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                      <stringProp name="IfController.condition">&quot;${invoiceId02}&quot; != &quot;NOT FOUND&quot;  &amp;&amp; &quot;${invoiceId02}&quot; != &quot;\${invoiceId02}&quot;</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="74.Click_Edit_Invoice 02" enabled="true">
                        <boolProp name="TransactionController.includeTimers">false</boolProp>
                        <boolProp name="TransactionController.parent">true</boolProp>
                      </TransactionController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="invoiceFormEdit.html" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/invoiceFormEdit.html</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                            <stringProp name="ConstantTimer.delay">1000</stringProp>
                            <stringProp name="RandomTimer.range">3000</stringProp>
                          </UniformRandomTimer>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                      <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="75.DELETE Invoice 02" enabled="true">
                        <boolProp name="TransactionController.includeTimers">false</boolProp>
                        <boolProp name="TransactionController.parent">true</boolProp>
                      </TransactionController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="30.DEL Invoice for project with Task" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value"></stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/Invoices/${invoiceId02}</stringProp>
                          <stringProp name="HTTPSampler.method">DELETE</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Invoice for Empty project has been deleted" enabled="false">
                            <collectionProp name="Asserion.test_strings">
                              <stringProp name="1259833018">Successful</stringProp>
                            </collectionProp>
                            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                            <boolProp name="Assertion.assume_success">false</boolProp>
                            <intProp name="Assertion.test_type">2</intProp>
                            <stringProp name="TestPlan.comments">Verify Invoice for Empty project has been deleted</stringProp>
                          </ResponseAssertion>
                          <hashTree/>
                          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                            <stringProp name="ConstantTimer.delay">1000</stringProp>
                            <stringProp name="RandomTimer.range">3000</stringProp>
                          </UniformRandomTimer>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Add invoice for project has Timesheet and Expense (Invoice 03)" enabled="true"/>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${token}</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                  <stringProp name="IfController.condition">&quot;${projectTaskId}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${projectTaskId}&quot; != &quot;\${projectTaskId}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transaction Timesheet" enabled="true"/>
                  <hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                      <stringProp name="IfController.condition">&quot;${projectActivityId}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${projectActivityId}&quot; != &quot;\${projectActivityId}&quot;</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="76.Visit_Timesheet_page" enabled="true">
                        <boolProp name="TransactionController.includeTimers">false</boolProp>
                        <boolProp name="TransactionController.parent">true</boolProp>
                      </TransactionController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Visit_Timesheet page" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${rhinoPath}/#/timesheet</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                            <stringProp name="DurationAssertion.duration">3000</stringProp>
                          </DurationAssertion>
                          <hashTree/>
                          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                            <stringProp name="ConstantTimer.delay">1000</stringProp>
                            <stringProp name="RandomTimer.range">3000</stringProp>
                          </UniformRandomTimer>
                          <hashTree/>
                        </hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                            </elementProp>
                            <elementProp name="Authorization" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">bearer ${token}</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="timesheetMemberView" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/timesheetMemberView.html</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree/>
                        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Load_Timesheet_information" enabled="true">
                          <boolProp name="TransactionController.includeTimers">false</boolProp>
                          <boolProp name="TransactionController.parent">true</boolProp>
                        </TransactionController>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="Accept" elementType="Header">
                                <stringProp name="Header.name">Accept</stringProp>
                                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                              </elementProp>
                              <elementProp name="Authorization" elementType="Header">
                                <stringProp name="Header.name">Authorization</stringProp>
                                <stringProp name="Header.value">bearer ${token}</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Encoding" elementType="Header">
                                <stringProp name="Header.name">Accept-Encoding</stringProp>
                                <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Language" elementType="Header">
                                <stringProp name="Header.name">Accept-Language</stringProp>
                                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                              </elementProp>
                              <elementProp name="User-Agent" elementType="Header">
                                <stringProp name="Header.name">User-Agent</stringProp>
                                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_Project" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                              <collectionProp name="Arguments.arguments"/>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain"></stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol"></stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">${apiPath}/api/Projects</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                            <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            <stringProp name="TestPlan.comments">get id &amp; projectManagerId</stringProp>
                          </HTTPSamplerProxy>
                          <hashTree>
                            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                              <collectionProp name="HeaderManager.headers">
                                <elementProp name="Accept" elementType="Header">
                                  <stringProp name="Header.name">Accept</stringProp>
                                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                                </elementProp>
                                <elementProp name="User-Agent" elementType="Header">
                                  <stringProp name="Header.name">User-Agent</stringProp>
                                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                                </elementProp>
                                <elementProp name="Authorization" elementType="Header">
                                  <stringProp name="Header.name">Authorization</stringProp>
                                  <stringProp name="Header.value">bearer ${token}</stringProp>
                                </elementProp>
                                <elementProp name="Accept-Encoding" elementType="Header">
                                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                                  <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                                </elementProp>
                                <elementProp name="Accept-Language" elementType="Header">
                                  <stringProp name="Header.name">Accept-Language</stringProp>
                                  <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                                </elementProp>
                              </collectionProp>
                            </HeaderManager>
                            <hashTree/>
                            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_projectId" enabled="false">
                              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                              <stringProp name="RegexExtractor.refname">projectId</stringProp>
                              <stringProp name="RegexExtractor.regex">.*&quot;projectId&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                              <stringProp name="RegexExtractor.template">$1$</stringProp>
                              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                              <stringProp name="RegexExtractor.match_number">1</stringProp>
                              <stringProp name="Sample.scope">all</stringProp>
                            </RegexExtractor>
                            <hashTree/>
                          </hashTree>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_GetProjectsWithLive" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                              <collectionProp name="Arguments.arguments"/>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain"></stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol"></stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetProjectsWithLive</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                            <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            <stringProp name="TestPlan.comments">data[14].Projects/GetProjectsWithLive &amp; id</stringProp>
                          </HTTPSamplerProxy>
                          <hashTree>
                            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                              <collectionProp name="HeaderManager.headers">
                                <elementProp name="Accept" elementType="Header">
                                  <stringProp name="Header.name">Accept</stringProp>
                                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                                </elementProp>
                                <elementProp name="User-Agent" elementType="Header">
                                  <stringProp name="Header.name">User-Agent</stringProp>
                                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                                </elementProp>
                                <elementProp name="Authorization" elementType="Header">
                                  <stringProp name="Header.name">Authorization</stringProp>
                                  <stringProp name="Header.value">bearer ${token}</stringProp>
                                </elementProp>
                                <elementProp name="Accept-Encoding" elementType="Header">
                                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                                  <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                                </elementProp>
                                <elementProp name="Accept-Language" elementType="Header">
                                  <stringProp name="Header.name">Accept-Language</stringProp>
                                  <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                                </elementProp>
                              </collectionProp>
                            </HeaderManager>
                            <hashTree/>
                          </hashTree>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_userCostCodeId Default " enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                              <collectionProp name="Arguments.arguments"/>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain"></stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol"></stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">${apiPath}/api/UserCostCodes</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                            <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          </HTTPSamplerProxy>
                          <hashTree>
                            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                              <collectionProp name="HeaderManager.headers">
                                <elementProp name="Accept" elementType="Header">
                                  <stringProp name="Header.name">Accept</stringProp>
                                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                                </elementProp>
                                <elementProp name="User-Agent" elementType="Header">
                                  <stringProp name="Header.name">User-Agent</stringProp>
                                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                                </elementProp>
                                <elementProp name="Authorization" elementType="Header">
                                  <stringProp name="Header.name">Authorization</stringProp>
                                  <stringProp name="Header.value">bearer ${token}</stringProp>
                                </elementProp>
                                <elementProp name="Accept-Encoding" elementType="Header">
                                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                                  <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                                </elementProp>
                                <elementProp name="Accept-Language" elementType="Header">
                                  <stringProp name="Header.name">Accept-Language</stringProp>
                                  <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                                </elementProp>
                              </collectionProp>
                            </HeaderManager>
                            <hashTree/>
                            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_userCostCodeId" enabled="true">
                              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                              <stringProp name="RegexExtractor.refname">userCostCodeId</stringProp>
                              <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                              <stringProp name="RegexExtractor.template">$1$</stringProp>
                              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                              <stringProp name="RegexExtractor.match_number">1</stringProp>
                              <stringProp name="Sample.scope">all</stringProp>
                            </RegexExtractor>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="get_UserCostCodesId" enabled="false">
                              <collectionProp name="Asserion.test_strings">
                                <stringProp name="-209463674">${userCostCodeId}</stringProp>
                              </collectionProp>
                              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                              <boolProp name="Assertion.assume_success">false</boolProp>
                              <intProp name="Assertion.test_type">2</intProp>
                            </ResponseAssertion>
                            <hashTree/>
                          </hashTree>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetWithTypeAndCodeActiveByCostCode" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                              <collectionProp name="Arguments.arguments"/>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain"></stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol"></stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">${apiPath}/api/UserCostAmts/GetWithTypeAndCodeActiveByCostCode/${userCostCodeId}</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                            <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          </HTTPSamplerProxy>
                          <hashTree>
                            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                              <collectionProp name="HeaderManager.headers">
                                <elementProp name="Accept" elementType="Header">
                                  <stringProp name="Header.name">Accept</stringProp>
                                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                                </elementProp>
                                <elementProp name="User-Agent" elementType="Header">
                                  <stringProp name="Header.name">User-Agent</stringProp>
                                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                                </elementProp>
                                <elementProp name="Authorization" elementType="Header">
                                  <stringProp name="Header.name">Authorization</stringProp>
                                  <stringProp name="Header.value">bearer ${token}</stringProp>
                                </elementProp>
                                <elementProp name="Accept-Encoding" elementType="Header">
                                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                                  <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                                </elementProp>
                                <elementProp name="Accept-Language" elementType="Header">
                                  <stringProp name="Header.name">Accept-Language</stringProp>
                                  <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                                </elementProp>
                              </collectionProp>
                            </HeaderManager>
                            <hashTree/>
                            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_projectActivityId" enabled="false">
                              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                              <stringProp name="RegexExtractor.refname">projectActivityId</stringProp>
                              <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                              <stringProp name="RegexExtractor.template">$1$</stringProp>
                              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                              <stringProp name="RegexExtractor.match_number">1</stringProp>
                              <stringProp name="Sample.scope">all</stringProp>
                            </RegexExtractor>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify_projectActivityId" enabled="false">
                              <collectionProp name="Asserion.test_strings">
                                <stringProp name="1419238769">${projectActivityId}</stringProp>
                              </collectionProp>
                              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                              <boolProp name="Assertion.assume_success">false</boolProp>
                              <intProp name="Assertion.test_type">2</intProp>
                            </ResponseAssertion>
                            <hashTree/>
                          </hashTree>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_userCostAmtId Default" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                              <collectionProp name="Arguments.arguments"/>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain"></stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol"></stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">${apiPath}/api/UserCostAmts/GetWithTypeActiveByCostCode/${userCostCodeId}</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                            <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          </HTTPSamplerProxy>
                          <hashTree>
                            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                              <collectionProp name="HeaderManager.headers">
                                <elementProp name="Accept" elementType="Header">
                                  <stringProp name="Header.name">Accept</stringProp>
                                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                                </elementProp>
                                <elementProp name="User-Agent" elementType="Header">
                                  <stringProp name="Header.name">User-Agent</stringProp>
                                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                                </elementProp>
                                <elementProp name="Authorization" elementType="Header">
                                  <stringProp name="Header.name">Authorization</stringProp>
                                  <stringProp name="Header.value">bearer ${token}</stringProp>
                                </elementProp>
                                <elementProp name="Accept-Encoding" elementType="Header">
                                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                                  <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                                </elementProp>
                                <elementProp name="Accept-Language" elementType="Header">
                                  <stringProp name="Header.name">Accept-Language</stringProp>
                                  <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                                </elementProp>
                              </collectionProp>
                            </HeaderManager>
                            <hashTree/>
                            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_userCostAmtId" enabled="true">
                              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                              <stringProp name="RegexExtractor.refname">userCostAmtId</stringProp>
                              <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                              <stringProp name="RegexExtractor.template">$1$</stringProp>
                              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                              <stringProp name="RegexExtractor.match_number">1</stringProp>
                              <stringProp name="Sample.scope">all</stringProp>
                            </RegexExtractor>
                            <hashTree/>
                            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                              <stringProp name="ConstantTimer.delay">10000</stringProp>
                              <stringProp name="RandomTimer.range">30000</stringProp>
                            </UniformRandomTimer>
                            <hashTree/>
                          </hashTree>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="timesheetMemberListWeekView" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                              <collectionProp name="Arguments.arguments"/>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain"></stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol"></stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/timesheetMemberListWeekView.html</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                            <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          </HTTPSamplerProxy>
                          <hashTree/>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetTimesheetsWithPeriod" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                              <collectionProp name="Arguments.arguments">
                                <elementProp name="isGetAdminOnly" elementType="HTTPArgument">
                                  <stringProp name="Argument.name">isGetAdminOnly</stringProp>
                                  <stringProp name="Argument.value">true</stringProp>
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                </elementProp>
                                <elementProp name="from" elementType="HTTPArgument">
                                  <stringProp name="Argument.name">from</stringProp>
                                  <stringProp name="Argument.value">${fromDate}</stringProp>
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                </elementProp>
                                <elementProp name="userId" elementType="HTTPArgument">
                                  <stringProp name="Argument.name">userId</stringProp>
                                  <stringProp name="Argument.value">${userProfileId}</stringProp>
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                </elementProp>
                                <elementProp name="to" elementType="HTTPArgument">
                                  <stringProp name="Argument.name">to</stringProp>
                                  <stringProp name="Argument.value">${toDate}</stringProp>
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                </elementProp>
                              </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain"></stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol"></stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">${apiPath}/api/Timesheets/GetTimesheetsWithPeriod</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          </HTTPSamplerProxy>
                          <hashTree>
                            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                              <stringProp name="ConstantTimer.delay">2000</stringProp>
                              <stringProp name="RandomTimer.range">4000</stringProp>
                            </UniformRandomTimer>
                            <hashTree/>
                          </hashTree>
                        </hashTree>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                        <stringProp name="IfController.condition">&quot;${userCostAmtId}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${userCostAmtId}&quot; != &quot;\${userCostAmtId}&quot; </stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="77.Click_Add_Timesheet" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/timesheetFormAdd.html</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                            <stringProp name="DurationAssertion.duration">3000</stringProp>
                          </DurationAssertion>
                          <hashTree/>
                          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                            <stringProp name="ConstantTimer.delay">10000</stringProp>
                            <stringProp name="RandomTimer.range">30000</stringProp>
                          </UniformRandomTimer>
                          <hashTree/>
                          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                            <stringProp name="ConstantTimer.delay">1000</stringProp>
                            <stringProp name="RandomTimer.range">3000</stringProp>
                          </UniformRandomTimer>
                          <hashTree/>
                        </hashTree>
                        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="78.Select Project task" enabled="true">
                          <boolProp name="TransactionController.includeTimers">false</boolProp>
                          <boolProp name="TransactionController.parent">true</boolProp>
                        </TransactionController>
                        <hashTree>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTasks" enabled="false">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                              <collectionProp name="Arguments.arguments">
                                <elementProp name="filter" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.value">{&quot;ProjectId&quot;:&quot;${projectId}&quot;,&quot;ProjectTaskType&quot;:&quot;1&quot;}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                  <stringProp name="Argument.name">filter</stringProp>
                                </elementProp>
                              </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain"></stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol"></stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTasks/${projectTaskId}</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          </HTTPSamplerProxy>
                          <hashTree/>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTasks" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                              <collectionProp name="Arguments.arguments">
                                <elementProp name="filter" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.value">{&quot;ProjectId&quot;:&quot;${projectId}&quot;,&quot;ProjectTaskType&quot;:&quot;1&quot;}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                  <stringProp name="Argument.name">filter</stringProp>
                                </elementProp>
                              </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain"></stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol"></stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTasks/</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          </HTTPSamplerProxy>
                          <hashTree/>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectActivities/GetByProject/${projectId}" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                              <collectionProp name="Arguments.arguments"/>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain"></stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol"></stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectActivities/GetByProject/${projectId}</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          </HTTPSamplerProxy>
                          <hashTree>
                            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                              <stringProp name="ConstantTimer.delay">1000</stringProp>
                              <stringProp name="RandomTimer.range">3000</stringProp>
                            </UniformRandomTimer>
                            <hashTree/>
                            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                              <stringProp name="ConstantTimer.delay">10000</stringProp>
                              <stringProp name="RandomTimer.range">30000</stringProp>
                            </UniformRandomTimer>
                            <hashTree/>
                          </hashTree>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTasks***" enabled="false">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                              <collectionProp name="Arguments.arguments">
                                <elementProp name="filter" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">filter</stringProp>
                                  <stringProp name="Argument.value">%7B%22ProjectId%22:%22973fe143-58cc-4334-b73f-6ad931cd1c08%22,%22ProjectTaskType%22:%221%22%7D</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="t" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">t</stringProp>
                                  <stringProp name="Argument.value">1490615380070</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                              </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">loadtest.rhinoapps.com</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol">https</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">rhinoApi/api/ProjectTasks</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.image_parser">true</boolProp>
                            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                            <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          </HTTPSamplerProxy>
                          <hashTree>
                            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                              <collectionProp name="HeaderManager.headers">
                                <elementProp name="Accept" elementType="Header">
                                  <stringProp name="Header.name">Accept</stringProp>
                                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                                </elementProp>
                                <elementProp name="X-DevTools-Emulate-Network-Conditions-Client-Id" elementType="Header">
                                  <stringProp name="Header.name">X-DevTools-Emulate-Network-Conditions-Client-Id</stringProp>
                                  <stringProp name="Header.value">b8dd5b5a-3cec-4f37-9370-c2292513434e</stringProp>
                                </elementProp>
                                <elementProp name="User-Agent" elementType="Header">
                                  <stringProp name="Header.name">User-Agent</stringProp>
                                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                                </elementProp>
                                <elementProp name="Authorization" elementType="Header">
                                  <stringProp name="Header.name">Authorization</stringProp>
                                  <stringProp name="Header.value">bearer I_nySF66IDQrVeP5tQflB2uC21SWO09e1xAeam9F9kFPb7O6I4uMHywRYf4hbhV1ar0xWALVuxhiitDCuML2r6X_HFw2ZXtDaRF-IhsCYdAL-x9OP7YjcPWD5Z7VydSUAK3JcwfLoMco3Qf4l9V-32lxdke3sKl0mbVfpEAGXAcFDaWw-PKjbSUKxhWNVeBhrEYmTrrls6Z3xRiAm2u2WA2U90yzvks198SOPkNdKnmw9IPGIq-Xw8HWY9CrzG2d8ix2iM9XhPAoHAuBvIwQCpzvaS5aQNbIbBm4O3fDTfkLQC1PeA82lGK1KfJkyCxadff2DT48RPsFXFh3F0tl1AkQH-DsaqIejWzgZZN5ajsTZa54xY9E_28zgyQHgyhK99LgYvrhxdMOjzENTL1QGRy80zLLE0pgyQyu6DrMnIQ8QLvCWxPK6712vxJlkm_OEe5nc2F8VvIqAouXRW4wO2eTDY0AaoBH7VBIT4Erw5_oDjX0wW2C0AGYLL4qx_B3RJqT000oOiJMekVGvozx1zdrbEWrCTP9HQQdrs_AXTPahDlPKluI_piXrhJRvdXJcf15vZHpzoUasd3V6FndTk6XLTzVY_VMeF3K5V_T1CcdlKcOIt2YHW0AxrwXSpVzLm3iEtkdShVSY_1DFsLQmQ</stringProp>
                                </elementProp>
                                <elementProp name="Referer" elementType="Header">
                                  <stringProp name="Header.name">Referer</stringProp>
                                  <stringProp name="Header.value">https://loadtest.rhinoapps.com/Rhino/</stringProp>
                                </elementProp>
                                <elementProp name="Accept-Encoding" elementType="Header">
                                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                                  <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                                </elementProp>
                                <elementProp name="Accept-Language" elementType="Header">
                                  <stringProp name="Header.name">Accept-Language</stringProp>
                                  <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                                </elementProp>
                              </collectionProp>
                            </HeaderManager>
                            <hashTree/>
                            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                              <stringProp name="RandomTimer.range">1055.2</stringProp>
                              <stringProp name="ConstantTimer.delay">2110.4</stringProp>
                            </UniformRandomTimer>
                            <hashTree/>
                          </hashTree>
                        </hashTree>
                        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="79.Click_Save_TimeSheet" enabled="true">
                          <boolProp name="TransactionController.includeTimers">false</boolProp>
                          <boolProp name="TransactionController.parent">true</boolProp>
                        </TransactionController>
                        <hashTree>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Save_Timesheet" enabled="true">
                            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                              <collectionProp name="Arguments.arguments">
                                <elementProp name="" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                  <stringProp name="Argument.value">{&#xd;
  &quot;timeDate&quot;: &quot;${timeDate}&quot;,&#xd;
  &quot;userProfileId&quot;: &quot;${userProfileId}&quot;,&#xd;
  &quot;projectId&quot;: &quot;${projectId}&quot;,&#xd;
  &quot;userCostCodeId&quot;: &quot;${userCostCodeId}&quot;,&#xd;
  &quot;projectActivityId&quot;: &quot;${projectActivityId}&quot;,&#xd;
  &quot;userCostAmtId&quot;: &quot;${userCostAmtId}&quot;,&#xd;
  &quot;projectTaskId&quot;: &quot;${projectTaskId}&quot;,&#xd;
  &quot;effortUnits&quot;: 0.1,&#xd;
  &quot;timeNotes&quot;: &quot;Load-note for saving a timesheet&quot;,&#xd;
  &quot;fromDate&quot;: &quot;${fromDate}&quot;,&#xd;
  &quot;toDate&quot;: &quot;${toDate}&quot;&#xd;
}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                </elementProp>
                              </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain"></stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol"></stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">${apiPath}/api/TimeSheets</stringProp>
                            <stringProp name="HTTPSampler.method">POST</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            <stringProp name="TestPlan.comments">Save_TS_for_project_03</stringProp>
                          </HTTPSamplerProxy>
                          <hashTree>
                            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                              <collectionProp name="HeaderManager.headers">
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">Authorization</stringProp>
                                  <stringProp name="Header.value">bearer ${token}</stringProp>
                                </elementProp>
                                <elementProp name="Accept" elementType="Header">
                                  <stringProp name="Header.name">Accept</stringProp>
                                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                                </elementProp>
                                <elementProp name="User-Agent" elementType="Header">
                                  <stringProp name="Header.name">User-Agent</stringProp>
                                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                                </elementProp>
                                <elementProp name="Accept-Encoding" elementType="Header">
                                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                                </elementProp>
                                <elementProp name="Accept-Language" elementType="Header">
                                  <stringProp name="Header.name">Accept-Language</stringProp>
                                  <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                                </elementProp>
                                <elementProp name="Content-Type" elementType="Header">
                                  <stringProp name="Header.name">Content-Type</stringProp>
                                  <stringProp name="Header.value">application/json</stringProp>
                                </elementProp>
                              </collectionProp>
                            </HeaderManager>
                            <hashTree/>
                            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_timesheetId03" enabled="true">
                              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                              <stringProp name="RegexExtractor.refname">timesheetId</stringProp>
                              <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                              <stringProp name="RegexExtractor.template">$1$</stringProp>
                              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                              <stringProp name="RegexExtractor.match_number">1</stringProp>
                              <stringProp name="Sample.scope">all</stringProp>
                            </RegexExtractor>
                            <hashTree/>
                            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_message03" enabled="true">
                              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                              <stringProp name="RegexExtractor.refname">message03</stringProp>
                              <stringProp name="RegexExtractor.regex">.*&quot;message&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                              <stringProp name="RegexExtractor.template">$1$</stringProp>
                              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                              <stringProp name="RegexExtractor.match_number">1</stringProp>
                              <stringProp name="Sample.scope">all</stringProp>
                            </RegexExtractor>
                            <hashTree/>
                            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                              <stringProp name="DurationAssertion.duration">3000</stringProp>
                            </DurationAssertion>
                            <hashTree/>
                          </hashTree>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Save_TimeSheet***" enabled="false">
                            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                              <collectionProp name="Arguments.arguments">
                                <elementProp name="" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                  <stringProp name="Argument.value">{&#xd;
  &quot;timeDate&quot;: &quot;${timeDate}&quot;,&#xd;
  &quot;userProfileId&quot;: &quot;${userProfileId}&quot;,&#xd;
  &quot;projectId&quot;: &quot;${projectId}&quot;,&#xd;
  &quot;userCostCodeId&quot;: &quot;${userCostCodeId}&quot;,&#xd;
  &quot;projectActivityId&quot;: &quot;${projectActivityId}&quot;,&#xd;
  &quot;userCostAmtId&quot;: &quot;${userCostAmtId}&quot;,&#xd;
  &quot;projectTaskId&quot;: &quot;${projectTaskId}&quot;,&#xd;
  &quot;effortUnits&quot;: 0.1,&#xd;
  &quot;timeNotes&quot;: &quot;Load-note for saving a timesheet&quot;,&#xd;
  &quot;fromDate&quot;: &quot;${fromDate}&quot;,&#xd;
  &quot;toDate&quot;: &quot;${toDate}&quot;&#xd;
}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                </elementProp>
                              </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain"></stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol"></stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">${apiPath}/api/TimeSheets</stringProp>
                            <stringProp name="HTTPSampler.method">POST</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                            <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            <stringProp name="TestPlan.comments">Add TimeSheets</stringProp>
                          </HTTPSamplerProxy>
                          <hashTree>
                            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                              <collectionProp name="HeaderManager.headers">
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">Authorization</stringProp>
                                  <stringProp name="Header.value">bearer ${token}</stringProp>
                                </elementProp>
                                <elementProp name="Accept" elementType="Header">
                                  <stringProp name="Header.name">Accept</stringProp>
                                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                                </elementProp>
                                <elementProp name="User-Agent" elementType="Header">
                                  <stringProp name="Header.name">User-Agent</stringProp>
                                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                                </elementProp>
                                <elementProp name="Accept-Encoding" elementType="Header">
                                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                                </elementProp>
                                <elementProp name="Accept-Language" elementType="Header">
                                  <stringProp name="Header.name">Accept-Language</stringProp>
                                  <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                                </elementProp>
                                <elementProp name="Content-Type" elementType="Header">
                                  <stringProp name="Header.name">Content-Type</stringProp>
                                  <stringProp name="Header.value">application/json</stringProp>
                                </elementProp>
                              </collectionProp>
                            </HeaderManager>
                            <hashTree/>
                            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_TimesheetId" enabled="true">
                              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                              <stringProp name="RegexExtractor.refname">TimesheetId</stringProp>
                              <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                              <stringProp name="RegexExtractor.template">$1$</stringProp>
                              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                              <stringProp name="RegexExtractor.match_number">1</stringProp>
                              <stringProp name="Sample.scope">all</stringProp>
                            </RegexExtractor>
                            <hashTree/>
                            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_message" enabled="true">
                              <stringProp name="RegexExtractor.useHeaders">message</stringProp>
                              <stringProp name="RegexExtractor.refname">message</stringProp>
                              <stringProp name="RegexExtractor.regex">.*&quot;message&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                              <stringProp name="RegexExtractor.template">$1$</stringProp>
                              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                              <stringProp name="RegexExtractor.match_number">1</stringProp>
                              <stringProp name="Sample.scope">all</stringProp>
                            </RegexExtractor>
                            <hashTree/>
                            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                              <stringProp name="DurationAssertion.duration">3000</stringProp>
                            </DurationAssertion>
                            <hashTree/>
                          </hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Authorization</stringProp>
                                <stringProp name="Header.value">bearer ${token}</stringProp>
                              </elementProp>
                              <elementProp name="User-Agent" elementType="Header">
                                <stringProp name="Header.name">User-Agent</stringProp>
                                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                              </elementProp>
                              <elementProp name="Accept" elementType="Header">
                                <stringProp name="Header.name">Accept</stringProp>
                                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Encoding" elementType="Header">
                                <stringProp name="Header.name">Accept-Encoding</stringProp>
                                <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Language" elementType="Header">
                                <stringProp name="Header.name">Accept-Language</stringProp>
                                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                            <stringProp name="IfController.condition">&quot;${timesheetId}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${timesheetId}&quot; != &quot;\${timesheetId}&quot;</stringProp>
                            <boolProp name="IfController.evaluateAll">false</boolProp>
                          </IfController>
                          <hashTree>
                            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TimeSheets/${timesheetId}" enabled="true">
                              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                <collectionProp name="Arguments.arguments"/>
                              </elementProp>
                              <stringProp name="HTTPSampler.domain"></stringProp>
                              <stringProp name="HTTPSampler.port"></stringProp>
                              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                              <stringProp name="HTTPSampler.response_timeout"></stringProp>
                              <stringProp name="HTTPSampler.protocol"></stringProp>
                              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                              <stringProp name="HTTPSampler.path">${apiPath}/api/TimeSheets/${timesheetId}</stringProp>
                              <stringProp name="HTTPSampler.method">GET</stringProp>
                              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                              <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                              <boolProp name="HTTPSampler.monitor">false</boolProp>
                              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            </HTTPSamplerProxy>
                            <hashTree/>
                            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="timesheetList" enabled="true">
                              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                <collectionProp name="Arguments.arguments"/>
                              </elementProp>
                              <stringProp name="HTTPSampler.domain"></stringProp>
                              <stringProp name="HTTPSampler.port"></stringProp>
                              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                              <stringProp name="HTTPSampler.response_timeout"></stringProp>
                              <stringProp name="HTTPSampler.protocol"></stringProp>
                              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                              <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/timesheetList.html</stringProp>
                              <stringProp name="HTTPSampler.method">GET</stringProp>
                              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                              <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                              <boolProp name="HTTPSampler.monitor">false</boolProp>
                              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            </HTTPSamplerProxy>
                            <hashTree/>
                            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="timesheetFormDetail" enabled="true">
                              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                <collectionProp name="Arguments.arguments"/>
                              </elementProp>
                              <stringProp name="HTTPSampler.domain"></stringProp>
                              <stringProp name="HTTPSampler.port"></stringProp>
                              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                              <stringProp name="HTTPSampler.response_timeout"></stringProp>
                              <stringProp name="HTTPSampler.protocol"></stringProp>
                              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                              <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/timesheetFormDetail.html</stringProp>
                              <stringProp name="HTTPSampler.method">GET</stringProp>
                              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                              <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                              <boolProp name="HTTPSampler.monitor">false</boolProp>
                              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            </HTTPSamplerProxy>
                            <hashTree/>
                            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetByProject/${projectId}" enabled="true">
                              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                <collectionProp name="Arguments.arguments"/>
                              </elementProp>
                              <stringProp name="HTTPSampler.domain"></stringProp>
                              <stringProp name="HTTPSampler.port"></stringProp>
                              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                              <stringProp name="HTTPSampler.response_timeout"></stringProp>
                              <stringProp name="HTTPSampler.protocol"></stringProp>
                              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                              <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectActivities/GetByProject/${projectId}</stringProp>
                              <stringProp name="HTTPSampler.method">GET</stringProp>
                              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                              <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                              <boolProp name="HTTPSampler.monitor">false</boolProp>
                              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            </HTTPSamplerProxy>
                            <hashTree>
                              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_projectActivityId" enabled="false">
                                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                                <stringProp name="RegexExtractor.refname">projectActivityId</stringProp>
                                <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                                <stringProp name="RegexExtractor.template">$1$</stringProp>
                                <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                                <stringProp name="RegexExtractor.match_number">1</stringProp>
                                <stringProp name="Sample.scope">all</stringProp>
                              </RegexExtractor>
                              <hashTree/>
                              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                                <stringProp name="RandomTimer.range">5000</stringProp>
                                <stringProp name="ConstantTimer.delay">3000</stringProp>
                              </UniformRandomTimer>
                              <hashTree/>
                            </hashTree>
                          </hashTree>
                        </hashTree>
                        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller***" enabled="false">
                          <stringProp name="IfController.condition">&quot;${timesheetId}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${timesheetId}&quot; != &quot;\${timesheetId}&quot;</stringProp>
                          <boolProp name="IfController.evaluateAll">false</boolProp>
                        </IfController>
                        <hashTree>
                          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Approve Timesheet" enabled="true"/>
                          <hashTree>
                            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="83.Submit_Timesheet " enabled="true">
                              <boolProp name="TransactionController.includeTimers">false</boolProp>
                              <boolProp name="TransactionController.parent">true</boolProp>
                            </TransactionController>
                            <hashTree>
                              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit_Timesheet " enabled="true">
                                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                                  <collectionProp name="Arguments.arguments">
                                    <elementProp name="" elementType="HTTPArgument">
                                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                      <stringProp name="Argument.value">{&#xd;
  &quot;userProfileId&quot;: &quot;${userProfileId}&quot;,&#xd;
  &quot;firstDayOfWeekDate&quot;: &quot;${firstDayOfWeekDate}&quot;,&#xd;
  &quot;timesheets&quot;: [{&quot;id&quot;:&quot;${timesheetId}&quot;}]&#xd;
}</stringProp>
                                      <stringProp name="Argument.metadata">=</stringProp>
                                    </elementProp>
                                  </collectionProp>
                                </elementProp>
                                <stringProp name="HTTPSampler.domain"></stringProp>
                                <stringProp name="HTTPSampler.port"></stringProp>
                                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                <stringProp name="HTTPSampler.protocol"></stringProp>
                                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                <stringProp name="HTTPSampler.path">${apiPath}/api/TimesheetSubmissions</stringProp>
                                <stringProp name="HTTPSampler.method">POST</stringProp>
                                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                                <boolProp name="HTTPSampler.monitor">false</boolProp>
                                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                              </HTTPSamplerProxy>
                              <hashTree>
                                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                                  <collectionProp name="HeaderManager.headers">
                                    <elementProp name="" elementType="Header">
                                      <stringProp name="Header.name">Authorization</stringProp>
                                      <stringProp name="Header.value">bearer ${token}</stringProp>
                                    </elementProp>
                                    <elementProp name="Accept" elementType="Header">
                                      <stringProp name="Header.name">Accept</stringProp>
                                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                                    </elementProp>
                                    <elementProp name="User-Agent" elementType="Header">
                                      <stringProp name="Header.name">User-Agent</stringProp>
                                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                                    </elementProp>
                                    <elementProp name="Accept-Encoding" elementType="Header">
                                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                                    </elementProp>
                                    <elementProp name="Accept-Language" elementType="Header">
                                      <stringProp name="Header.name">Accept-Language</stringProp>
                                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                                    </elementProp>
                                    <elementProp name="Content-Type" elementType="Header">
                                      <stringProp name="Header.name">Content-Type</stringProp>
                                      <stringProp name="Header.value">application/json</stringProp>
                                    </elementProp>
                                  </collectionProp>
                                </HeaderManager>
                                <hashTree/>
                                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                                  <stringProp name="ConstantTimer.delay">5000</stringProp>
                                  <stringProp name="RandomTimer.range">3000</stringProp>
                                </UniformRandomTimer>
                                <hashTree/>
                                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_TimesheetIdS" enabled="true">
                                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                                  <stringProp name="RegexExtractor.refname">TimesheetIdS</stringProp>
                                  <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                                  <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                                  <stringProp name="Sample.scope">all</stringProp>
                                </RegexExtractor>
                                <hashTree/>
                                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_submitmessage" enabled="true">
                                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                                  <stringProp name="RegexExtractor.refname">submitTS_msg</stringProp>
                                  <stringProp name="RegexExtractor.regex">.*&quot;message&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                                  <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                                  <stringProp name="Sample.scope">all</stringProp>
                                </RegexExtractor>
                                <hashTree/>
                                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                                  <stringProp name="DurationAssertion.duration">3000</stringProp>
                                </DurationAssertion>
                                <hashTree/>
                              </hashTree>
                              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***TimesheetSubmissions" enabled="false">
                                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                                  <collectionProp name="Arguments.arguments">
                                    <elementProp name="" elementType="HTTPArgument">
                                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                      <stringProp name="Argument.value">{&#xd;
  &quot;userProfileId&quot;: &quot;558b18d4-0629-464a-8b49-0c08258584d9&quot;,&#xd;
  &quot;firstDayOfWeekDate&quot;: &quot;2017-03-19T17:00:00.000Z&quot;,&#xd;
  &quot;timesheets&quot;: [&#xd;
    {&#xd;
      &quot;timeDate&quot;: &quot;2017-03-19T17:00:00Z&quot;,&#xd;
      &quot;fromDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;toDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;userProfileId&quot;: &quot;558b18d4-0629-464a-8b49-0c08258584d9&quot;,&#xd;
      &quot;projectId&quot;: &quot;30b40a6c-0c39-4269-a99f-1b09ea04759d&quot;,&#xd;
      &quot;projectTaskId&quot;: &quot;e6966b37-15e9-40f2-bea3-1a2fca6339ef&quot;,&#xd;
      &quot;invoiceDetailId&quot;: null,&#xd;
      &quot;projectActivityId&quot;: &quot;2b44c982-5c8b-4159-ab99-24788f87a94b&quot;,&#xd;
      &quot;userCostAmtId&quot;: &quot;175b2f8a-bf2d-47a3-b9c3-a3cc409eb45d&quot;,&#xd;
      &quot;effortUnits&quot;: 1,&#xd;
      &quot;costTotal&quot;: 0,&#xd;
      &quot;costRateAmt&quot;: 0,&#xd;
      &quot;chargeable&quot;: false,&#xd;
      &quot;chargeRateAmt&quot;: 0,&#xd;
      &quot;chargeTotal&quot;: 0,&#xd;
      &quot;timeNotes&quot;: null,&#xd;
      &quot;invoiceId&quot;: null,&#xd;
      &quot;locked&quot;: false,&#xd;
      &quot;timesheetSubmissionId&quot;: null,&#xd;
      &quot;previousActivityName&quot;: &quot;Default Role&quot;,&#xd;
      &quot;timeTypeName&quot;: &quot;Standard Hour&quot;,&#xd;
      &quot;userCostCodeId&quot;: &quot;4e6dde3a-47e6-484e-ae4c-93bb647f05a1&quot;,&#xd;
      &quot;fnTimesheetCostCode&quot;: 1,&#xd;
      &quot;dataUsersCharge&quot;: 1,&#xd;
      &quot;fnTimesheetChargeableFlag&quot;: 1,&#xd;
      &quot;chargeableAmount&quot;: null,&#xd;
      &quot;projectName&quot;: &quot;Load-Empty project&quot;,&#xd;
      &quot;projectTaskName&quot;: &quot;Default Task&quot;,&#xd;
      &quot;userCostTypeName&quot;: &quot;Standard Hour&quot;,&#xd;
      &quot;invoiced&quot;: false,&#xd;
      &quot;ucir&quot;: &quot;9577a59a-5e36-4c61-aa55-dd032fa358ed&quot;,&#xd;
      &quot;createdBy&quot;: &quot;tenant1user19@mailinator.com&quot;,&#xd;
      &quot;updatedBy&quot;: null,&#xd;
      &quot;createdDate&quot;: &quot;2017-03-30T00:00:00&quot;,&#xd;
      &quot;updatedDate&quot;: null,&#xd;
      &quot;id&quot;: &quot;8181be7b-17a5-4647-b95d-0ac6e92fb00b&quot;,&#xd;
      &quot;version&quot;: &quot;AAAAAAAAs7w=&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;timeDate&quot;: &quot;2017-03-23T17:00:00Z&quot;,&#xd;
      &quot;fromDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;toDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;userProfileId&quot;: &quot;558b18d4-0629-464a-8b49-0c08258584d9&quot;,&#xd;
      &quot;projectId&quot;: &quot;57a0239c-81a0-4c5f-84c5-843b86a18c88&quot;,&#xd;
      &quot;projectTaskId&quot;: &quot;1ddd2f8b-053e-490a-ac69-9db4f0935a8d&quot;,&#xd;
      &quot;invoiceDetailId&quot;: null,&#xd;
      &quot;projectActivityId&quot;: &quot;2b44c982-5c8b-4159-ab99-24788f87a94b&quot;,&#xd;
      &quot;userCostAmtId&quot;: &quot;175b2f8a-bf2d-47a3-b9c3-a3cc409eb45d&quot;,&#xd;
      &quot;effortUnits&quot;: 0.1,&#xd;
      &quot;costTotal&quot;: 0,&#xd;
      &quot;costRateAmt&quot;: 0,&#xd;
      &quot;chargeable&quot;: false,&#xd;
      &quot;chargeRateAmt&quot;: 0,&#xd;
      &quot;chargeTotal&quot;: 0,&#xd;
      &quot;timeNotes&quot;: &quot;Load-note for saving a timesheet&quot;,&#xd;
      &quot;invoiceId&quot;: null,&#xd;
      &quot;locked&quot;: false,&#xd;
      &quot;timesheetSubmissionId&quot;: null,&#xd;
      &quot;previousActivityName&quot;: &quot;Default Role&quot;,&#xd;
      &quot;timeTypeName&quot;: &quot;Standard Hour&quot;,&#xd;
      &quot;userCostCodeId&quot;: null,&#xd;
      &quot;fnTimesheetCostCode&quot;: 0,&#xd;
      &quot;dataUsersCharge&quot;: 0,&#xd;
      &quot;fnTimesheetChargeableFlag&quot;: 0,&#xd;
      &quot;chargeableAmount&quot;: null,&#xd;
      &quot;projectName&quot;: &quot;Project 99&quot;,&#xd;
      &quot;projectTaskName&quot;: &quot;PROJECT TASK 2_99&quot;,&#xd;
      &quot;userCostTypeName&quot;: null,&#xd;
      &quot;invoiced&quot;: false,&#xd;
      &quot;ucir&quot;: &quot;9577a59a-5e36-4c61-aa55-dd032fa358ed&quot;,&#xd;
      &quot;createdBy&quot;: &quot;tenant1user19@mailinator.com&quot;,&#xd;
      &quot;updatedBy&quot;: null,&#xd;
      &quot;createdDate&quot;: &quot;2017-03-27T00:00:00&quot;,&#xd;
      &quot;updatedDate&quot;: null,&#xd;
      &quot;id&quot;: &quot;fb7491ce-e589-4d29-9c1b-0f3e41c4796c&quot;,&#xd;
      &quot;version&quot;: &quot;AAAAAAAAhoY=&quot;,&#xd;
      &quot;groupDate&quot;: &quot;2017-03-23T17:00:00.000Z&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;timeDate&quot;: &quot;2017-03-23T17:00:00Z&quot;,&#xd;
      &quot;fromDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;toDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;userProfileId&quot;: &quot;558b18d4-0629-464a-8b49-0c08258584d9&quot;,&#xd;
      &quot;projectId&quot;: &quot;57a0239c-81a0-4c5f-84c5-843b86a18c88&quot;,&#xd;
      &quot;projectTaskId&quot;: &quot;1ddd2f8b-053e-490a-ac69-9db4f0935a8d&quot;,&#xd;
      &quot;invoiceDetailId&quot;: null,&#xd;
      &quot;projectActivityId&quot;: &quot;2b44c982-5c8b-4159-ab99-24788f87a94b&quot;,&#xd;
      &quot;userCostAmtId&quot;: &quot;175b2f8a-bf2d-47a3-b9c3-a3cc409eb45d&quot;,&#xd;
      &quot;effortUnits&quot;: 0.1,&#xd;
      &quot;costTotal&quot;: 0,&#xd;
      &quot;costRateAmt&quot;: 0,&#xd;
      &quot;chargeable&quot;: false,&#xd;
      &quot;chargeRateAmt&quot;: 0,&#xd;
      &quot;chargeTotal&quot;: 0,&#xd;
      &quot;timeNotes&quot;: &quot;Load-note for saving a timesheet&quot;,&#xd;
      &quot;invoiceId&quot;: null,&#xd;
      &quot;locked&quot;: false,&#xd;
      &quot;timesheetSubmissionId&quot;: null,&#xd;
      &quot;previousActivityName&quot;: &quot;Default Role&quot;,&#xd;
      &quot;timeTypeName&quot;: &quot;Standard Hour&quot;,&#xd;
      &quot;userCostCodeId&quot;: null,&#xd;
      &quot;fnTimesheetCostCode&quot;: 0,&#xd;
      &quot;dataUsersCharge&quot;: 0,&#xd;
      &quot;fnTimesheetChargeableFlag&quot;: 0,&#xd;
      &quot;chargeableAmount&quot;: null,&#xd;
      &quot;projectName&quot;: &quot;Project 99&quot;,&#xd;
      &quot;projectTaskName&quot;: &quot;PROJECT TASK 2_99&quot;,&#xd;
      &quot;userCostTypeName&quot;: null,&#xd;
      &quot;invoiced&quot;: false,&#xd;
      &quot;ucir&quot;: &quot;9577a59a-5e36-4c61-aa55-dd032fa358ed&quot;,&#xd;
      &quot;createdBy&quot;: &quot;tenant1user19@mailinator.com&quot;,&#xd;
      &quot;updatedBy&quot;: null,&#xd;
      &quot;createdDate&quot;: &quot;2017-03-27T00:00:00&quot;,&#xd;
      &quot;updatedDate&quot;: null,&#xd;
      &quot;id&quot;: &quot;6c61b9d8-b1e6-4e9a-a18c-29d4c7e58f8f&quot;,&#xd;
      &quot;version&quot;: &quot;AAAAAAAAi7M=&quot;,&#xd;
      &quot;groupDate&quot;: &quot;2017-03-23T17:00:00.000Z&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;timeDate&quot;: &quot;2017-03-23T17:00:00Z&quot;,&#xd;
      &quot;fromDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;toDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;userProfileId&quot;: &quot;558b18d4-0629-464a-8b49-0c08258584d9&quot;,&#xd;
      &quot;projectId&quot;: &quot;57a0239c-81a0-4c5f-84c5-843b86a18c88&quot;,&#xd;
      &quot;projectTaskId&quot;: &quot;1ddd2f8b-053e-490a-ac69-9db4f0935a8d&quot;,&#xd;
      &quot;invoiceDetailId&quot;: null,&#xd;
      &quot;projectActivityId&quot;: &quot;2b44c982-5c8b-4159-ab99-24788f87a94b&quot;,&#xd;
      &quot;userCostAmtId&quot;: &quot;175b2f8a-bf2d-47a3-b9c3-a3cc409eb45d&quot;,&#xd;
      &quot;effortUnits&quot;: 0.1,&#xd;
      &quot;costTotal&quot;: 0,&#xd;
      &quot;costRateAmt&quot;: 0,&#xd;
      &quot;chargeable&quot;: false,&#xd;
      &quot;chargeRateAmt&quot;: 0,&#xd;
      &quot;chargeTotal&quot;: 0,&#xd;
      &quot;timeNotes&quot;: &quot;Load-note for saving a timesheet&quot;,&#xd;
      &quot;invoiceId&quot;: null,&#xd;
      &quot;locked&quot;: false,&#xd;
      &quot;timesheetSubmissionId&quot;: null,&#xd;
      &quot;previousActivityName&quot;: &quot;Default Role&quot;,&#xd;
      &quot;timeTypeName&quot;: &quot;Standard Hour&quot;,&#xd;
      &quot;userCostCodeId&quot;: null,&#xd;
      &quot;fnTimesheetCostCode&quot;: 0,&#xd;
      &quot;dataUsersCharge&quot;: 0,&#xd;
      &quot;fnTimesheetChargeableFlag&quot;: 0,&#xd;
      &quot;chargeableAmount&quot;: null,&#xd;
      &quot;projectName&quot;: &quot;Project 99&quot;,&#xd;
      &quot;projectTaskName&quot;: &quot;PROJECT TASK 2_99&quot;,&#xd;
      &quot;userCostTypeName&quot;: null,&#xd;
      &quot;invoiced&quot;: false,&#xd;
      &quot;ucir&quot;: &quot;9577a59a-5e36-4c61-aa55-dd032fa358ed&quot;,&#xd;
      &quot;createdBy&quot;: &quot;tenant1user19@mailinator.com&quot;,&#xd;
      &quot;updatedBy&quot;: null,&#xd;
      &quot;createdDate&quot;: &quot;2017-03-27T00:00:00&quot;,&#xd;
      &quot;updatedDate&quot;: null,&#xd;
      &quot;id&quot;: &quot;d17392cd-0ab9-4c38-bba2-33cdae85e130&quot;,&#xd;
      &quot;version&quot;: &quot;AAAAAAAAfUE=&quot;,&#xd;
      &quot;groupDate&quot;: &quot;2017-03-23T17:00:00.000Z&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;timeDate&quot;: &quot;2017-03-23T17:00:00Z&quot;,&#xd;
      &quot;fromDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;toDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;userProfileId&quot;: &quot;558b18d4-0629-464a-8b49-0c08258584d9&quot;,&#xd;
      &quot;projectId&quot;: &quot;57a0239c-81a0-4c5f-84c5-843b86a18c88&quot;,&#xd;
      &quot;projectTaskId&quot;: &quot;1ddd2f8b-053e-490a-ac69-9db4f0935a8d&quot;,&#xd;
      &quot;invoiceDetailId&quot;: null,&#xd;
      &quot;projectActivityId&quot;: &quot;2b44c982-5c8b-4159-ab99-24788f87a94b&quot;,&#xd;
      &quot;userCostAmtId&quot;: &quot;175b2f8a-bf2d-47a3-b9c3-a3cc409eb45d&quot;,&#xd;
      &quot;effortUnits&quot;: 0.1,&#xd;
      &quot;costTotal&quot;: 0,&#xd;
      &quot;costRateAmt&quot;: 0,&#xd;
      &quot;chargeable&quot;: false,&#xd;
      &quot;chargeRateAmt&quot;: 0,&#xd;
      &quot;chargeTotal&quot;: 0,&#xd;
      &quot;timeNotes&quot;: &quot;Load-note for saving a timesheet&quot;,&#xd;
      &quot;invoiceId&quot;: null,&#xd;
      &quot;locked&quot;: false,&#xd;
      &quot;timesheetSubmissionId&quot;: null,&#xd;
      &quot;previousActivityName&quot;: &quot;Default Role&quot;,&#xd;
      &quot;timeTypeName&quot;: &quot;Standard Hour&quot;,&#xd;
      &quot;userCostCodeId&quot;: null,&#xd;
      &quot;fnTimesheetCostCode&quot;: 0,&#xd;
      &quot;dataUsersCharge&quot;: 0,&#xd;
      &quot;fnTimesheetChargeableFlag&quot;: 0,&#xd;
      &quot;chargeableAmount&quot;: null,&#xd;
      &quot;projectName&quot;: &quot;Project 99&quot;,&#xd;
      &quot;projectTaskName&quot;: &quot;PROJECT TASK 2_99&quot;,&#xd;
      &quot;userCostTypeName&quot;: null,&#xd;
      &quot;invoiced&quot;: false,&#xd;
      &quot;ucir&quot;: &quot;9577a59a-5e36-4c61-aa55-dd032fa358ed&quot;,&#xd;
      &quot;createdBy&quot;: &quot;tenant1user19@mailinator.com&quot;,&#xd;
      &quot;updatedBy&quot;: null,&#xd;
      &quot;createdDate&quot;: &quot;2017-03-27T00:00:00&quot;,&#xd;
      &quot;updatedDate&quot;: null,&#xd;
      &quot;id&quot;: &quot;6d6e3e18-48ae-4615-b9be-529f28dfae81&quot;,&#xd;
      &quot;version&quot;: &quot;AAAAAAAAgi4=&quot;,&#xd;
      &quot;groupDate&quot;: &quot;2017-03-23T17:00:00.000Z&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;timeDate&quot;: &quot;2017-03-23T17:00:00Z&quot;,&#xd;
      &quot;fromDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;toDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;userProfileId&quot;: &quot;558b18d4-0629-464a-8b49-0c08258584d9&quot;,&#xd;
      &quot;projectId&quot;: &quot;57a0239c-81a0-4c5f-84c5-843b86a18c88&quot;,&#xd;
      &quot;projectTaskId&quot;: &quot;1ddd2f8b-053e-490a-ac69-9db4f0935a8d&quot;,&#xd;
      &quot;invoiceDetailId&quot;: null,&#xd;
      &quot;projectActivityId&quot;: &quot;2b44c982-5c8b-4159-ab99-24788f87a94b&quot;,&#xd;
      &quot;userCostAmtId&quot;: &quot;175b2f8a-bf2d-47a3-b9c3-a3cc409eb45d&quot;,&#xd;
      &quot;effortUnits&quot;: 0.1,&#xd;
      &quot;costTotal&quot;: 0,&#xd;
      &quot;costRateAmt&quot;: 0,&#xd;
      &quot;chargeable&quot;: false,&#xd;
      &quot;chargeRateAmt&quot;: 0,&#xd;
      &quot;chargeTotal&quot;: 0,&#xd;
      &quot;timeNotes&quot;: &quot;Load-note for saving a timesheet&quot;,&#xd;
      &quot;invoiceId&quot;: null,&#xd;
      &quot;locked&quot;: false,&#xd;
      &quot;timesheetSubmissionId&quot;: null,&#xd;
      &quot;previousActivityName&quot;: &quot;Default Role&quot;,&#xd;
      &quot;timeTypeName&quot;: &quot;Standard Hour&quot;,&#xd;
      &quot;userCostCodeId&quot;: null,&#xd;
      &quot;fnTimesheetCostCode&quot;: 0,&#xd;
      &quot;dataUsersCharge&quot;: 0,&#xd;
      &quot;fnTimesheetChargeableFlag&quot;: 0,&#xd;
      &quot;chargeableAmount&quot;: null,&#xd;
      &quot;projectName&quot;: &quot;Project 99&quot;,&#xd;
      &quot;projectTaskName&quot;: &quot;PROJECT TASK 2_99&quot;,&#xd;
      &quot;userCostTypeName&quot;: null,&#xd;
      &quot;invoiced&quot;: false,&#xd;
      &quot;ucir&quot;: &quot;9577a59a-5e36-4c61-aa55-dd032fa358ed&quot;,&#xd;
      &quot;createdBy&quot;: &quot;tenant1user19@mailinator.com&quot;,&#xd;
      &quot;updatedBy&quot;: null,&#xd;
      &quot;createdDate&quot;: &quot;2017-03-27T00:00:00&quot;,&#xd;
      &quot;updatedDate&quot;: null,&#xd;
      &quot;id&quot;: &quot;91b2dec0-5b2d-461d-a856-7e83bcf63eb5&quot;,&#xd;
      &quot;version&quot;: &quot;AAAAAAAAbuI=&quot;,&#xd;
      &quot;groupDate&quot;: &quot;2017-03-23T17:00:00.000Z&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;timeDate&quot;: &quot;2017-03-23T17:00:00Z&quot;,&#xd;
      &quot;fromDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;toDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;userProfileId&quot;: &quot;558b18d4-0629-464a-8b49-0c08258584d9&quot;,&#xd;
      &quot;projectId&quot;: &quot;57a0239c-81a0-4c5f-84c5-843b86a18c88&quot;,&#xd;
      &quot;projectTaskId&quot;: &quot;1ddd2f8b-053e-490a-ac69-9db4f0935a8d&quot;,&#xd;
      &quot;invoiceDetailId&quot;: null,&#xd;
      &quot;projectActivityId&quot;: &quot;2b44c982-5c8b-4159-ab99-24788f87a94b&quot;,&#xd;
      &quot;userCostAmtId&quot;: &quot;175b2f8a-bf2d-47a3-b9c3-a3cc409eb45d&quot;,&#xd;
      &quot;effortUnits&quot;: 0.1,&#xd;
      &quot;costTotal&quot;: 0,&#xd;
      &quot;costRateAmt&quot;: 0,&#xd;
      &quot;chargeable&quot;: false,&#xd;
      &quot;chargeRateAmt&quot;: 0,&#xd;
      &quot;chargeTotal&quot;: 0,&#xd;
      &quot;timeNotes&quot;: &quot;Load-note for saving a timesheet&quot;,&#xd;
      &quot;invoiceId&quot;: null,&#xd;
      &quot;locked&quot;: false,&#xd;
      &quot;timesheetSubmissionId&quot;: null,&#xd;
      &quot;previousActivityName&quot;: &quot;Default Role&quot;,&#xd;
      &quot;timeTypeName&quot;: &quot;Standard Hour&quot;,&#xd;
      &quot;userCostCodeId&quot;: null,&#xd;
      &quot;fnTimesheetCostCode&quot;: 0,&#xd;
      &quot;dataUsersCharge&quot;: 0,&#xd;
      &quot;fnTimesheetChargeableFlag&quot;: 0,&#xd;
      &quot;chargeableAmount&quot;: null,&#xd;
      &quot;projectName&quot;: &quot;Project 99&quot;,&#xd;
      &quot;projectTaskName&quot;: &quot;PROJECT TASK 2_99&quot;,&#xd;
      &quot;userCostTypeName&quot;: null,&#xd;
      &quot;invoiced&quot;: false,&#xd;
      &quot;ucir&quot;: &quot;9577a59a-5e36-4c61-aa55-dd032fa358ed&quot;,&#xd;
      &quot;createdBy&quot;: &quot;tenant1user19@mailinator.com&quot;,&#xd;
      &quot;updatedBy&quot;: null,&#xd;
      &quot;createdDate&quot;: &quot;2017-03-27T00:00:00&quot;,&#xd;
      &quot;updatedDate&quot;: null,&#xd;
      &quot;id&quot;: &quot;dce3d6ff-adae-4f01-8b07-93700f952671&quot;,&#xd;
      &quot;version&quot;: &quot;AAAAAAAAc3g=&quot;,&#xd;
      &quot;groupDate&quot;: &quot;2017-03-23T17:00:00.000Z&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;timeDate&quot;: &quot;2017-03-23T17:00:00Z&quot;,&#xd;
      &quot;fromDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;toDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;userProfileId&quot;: &quot;558b18d4-0629-464a-8b49-0c08258584d9&quot;,&#xd;
      &quot;projectId&quot;: &quot;57a0239c-81a0-4c5f-84c5-843b86a18c88&quot;,&#xd;
      &quot;projectTaskId&quot;: &quot;1ddd2f8b-053e-490a-ac69-9db4f0935a8d&quot;,&#xd;
      &quot;invoiceDetailId&quot;: null,&#xd;
      &quot;projectActivityId&quot;: &quot;2b44c982-5c8b-4159-ab99-24788f87a94b&quot;,&#xd;
      &quot;userCostAmtId&quot;: &quot;175b2f8a-bf2d-47a3-b9c3-a3cc409eb45d&quot;,&#xd;
      &quot;effortUnits&quot;: 0.1,&#xd;
      &quot;costTotal&quot;: 0,&#xd;
      &quot;costRateAmt&quot;: 0,&#xd;
      &quot;chargeable&quot;: false,&#xd;
      &quot;chargeRateAmt&quot;: 0,&#xd;
      &quot;chargeTotal&quot;: 0,&#xd;
      &quot;timeNotes&quot;: &quot;Load-note for saving a timesheet&quot;,&#xd;
      &quot;invoiceId&quot;: null,&#xd;
      &quot;locked&quot;: false,&#xd;
      &quot;timesheetSubmissionId&quot;: null,&#xd;
      &quot;previousActivityName&quot;: &quot;Default Role&quot;,&#xd;
      &quot;timeTypeName&quot;: &quot;Standard Hour&quot;,&#xd;
      &quot;userCostCodeId&quot;: null,&#xd;
      &quot;fnTimesheetCostCode&quot;: 0,&#xd;
      &quot;dataUsersCharge&quot;: 0,&#xd;
      &quot;fnTimesheetChargeableFlag&quot;: 0,&#xd;
      &quot;chargeableAmount&quot;: null,&#xd;
      &quot;projectName&quot;: &quot;Project 99&quot;,&#xd;
      &quot;projectTaskName&quot;: &quot;PROJECT TASK 2_99&quot;,&#xd;
      &quot;userCostTypeName&quot;: null,&#xd;
      &quot;invoiced&quot;: false,&#xd;
      &quot;ucir&quot;: &quot;9577a59a-5e36-4c61-aa55-dd032fa358ed&quot;,&#xd;
      &quot;createdBy&quot;: &quot;tenant1user19@mailinator.com&quot;,&#xd;
      &quot;updatedBy&quot;: null,&#xd;
      &quot;createdDate&quot;: &quot;2017-03-27T00:00:00&quot;,&#xd;
      &quot;updatedDate&quot;: null,&#xd;
      &quot;id&quot;: &quot;70842bf5-f5a0-4b07-b9ba-b598db288886&quot;,&#xd;
      &quot;version&quot;: &quot;AAAAAAAAYVI=&quot;,&#xd;
      &quot;groupDate&quot;: &quot;2017-03-23T17:00:00.000Z&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;timeDate&quot;: &quot;2017-03-23T17:00:00Z&quot;,&#xd;
      &quot;fromDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;toDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;userProfileId&quot;: &quot;558b18d4-0629-464a-8b49-0c08258584d9&quot;,&#xd;
      &quot;projectId&quot;: &quot;57a0239c-81a0-4c5f-84c5-843b86a18c88&quot;,&#xd;
      &quot;projectTaskId&quot;: &quot;1ddd2f8b-053e-490a-ac69-9db4f0935a8d&quot;,&#xd;
      &quot;invoiceDetailId&quot;: null,&#xd;
      &quot;projectActivityId&quot;: &quot;2b44c982-5c8b-4159-ab99-24788f87a94b&quot;,&#xd;
      &quot;userCostAmtId&quot;: &quot;175b2f8a-bf2d-47a3-b9c3-a3cc409eb45d&quot;,&#xd;
      &quot;effortUnits&quot;: 0.1,&#xd;
      &quot;costTotal&quot;: 0,&#xd;
      &quot;costRateAmt&quot;: 0,&#xd;
      &quot;chargeable&quot;: false,&#xd;
      &quot;chargeRateAmt&quot;: 0,&#xd;
      &quot;chargeTotal&quot;: 0,&#xd;
      &quot;timeNotes&quot;: &quot;Load-note for saving a timesheet&quot;,&#xd;
      &quot;invoiceId&quot;: null,&#xd;
      &quot;locked&quot;: false,&#xd;
      &quot;timesheetSubmissionId&quot;: null,&#xd;
      &quot;previousActivityName&quot;: &quot;Default Role&quot;,&#xd;
      &quot;timeTypeName&quot;: &quot;Standard Hour&quot;,&#xd;
      &quot;userCostCodeId&quot;: null,&#xd;
      &quot;fnTimesheetCostCode&quot;: 0,&#xd;
      &quot;dataUsersCharge&quot;: 0,&#xd;
      &quot;fnTimesheetChargeableFlag&quot;: 0,&#xd;
      &quot;chargeableAmount&quot;: null,&#xd;
      &quot;projectName&quot;: &quot;Project 99&quot;,&#xd;
      &quot;projectTaskName&quot;: &quot;PROJECT TASK 2_99&quot;,&#xd;
      &quot;userCostTypeName&quot;: null,&#xd;
      &quot;invoiced&quot;: false,&#xd;
      &quot;ucir&quot;: &quot;9577a59a-5e36-4c61-aa55-dd032fa358ed&quot;,&#xd;
      &quot;createdBy&quot;: &quot;tenant1user19@mailinator.com&quot;,&#xd;
      &quot;updatedBy&quot;: null,&#xd;
      &quot;createdDate&quot;: &quot;2017-03-27T00:00:00&quot;,&#xd;
      &quot;updatedDate&quot;: null,&#xd;
      &quot;id&quot;: &quot;d2c9dd6e-b037-4d8a-be9d-b6b50ddc56a9&quot;,&#xd;
      &quot;version&quot;: &quot;AAAAAAAAkJU=&quot;,&#xd;
      &quot;groupDate&quot;: &quot;2017-03-23T17:00:00.000Z&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;timeDate&quot;: &quot;2017-03-23T17:00:00Z&quot;,&#xd;
      &quot;fromDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;toDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;userProfileId&quot;: &quot;558b18d4-0629-464a-8b49-0c08258584d9&quot;,&#xd;
      &quot;projectId&quot;: &quot;57a0239c-81a0-4c5f-84c5-843b86a18c88&quot;,&#xd;
      &quot;projectTaskId&quot;: &quot;1ddd2f8b-053e-490a-ac69-9db4f0935a8d&quot;,&#xd;
      &quot;invoiceDetailId&quot;: null,&#xd;
      &quot;projectActivityId&quot;: &quot;2b44c982-5c8b-4159-ab99-24788f87a94b&quot;,&#xd;
      &quot;userCostAmtId&quot;: &quot;175b2f8a-bf2d-47a3-b9c3-a3cc409eb45d&quot;,&#xd;
      &quot;effortUnits&quot;: 0.1,&#xd;
      &quot;costTotal&quot;: 0,&#xd;
      &quot;costRateAmt&quot;: 0,&#xd;
      &quot;chargeable&quot;: false,&#xd;
      &quot;chargeRateAmt&quot;: 0,&#xd;
      &quot;chargeTotal&quot;: 0,&#xd;
      &quot;timeNotes&quot;: &quot;Load-note for saving a timesheet&quot;,&#xd;
      &quot;invoiceId&quot;: null,&#xd;
      &quot;locked&quot;: false,&#xd;
      &quot;timesheetSubmissionId&quot;: null,&#xd;
      &quot;previousActivityName&quot;: &quot;Default Role&quot;,&#xd;
      &quot;timeTypeName&quot;: &quot;Standard Hour&quot;,&#xd;
      &quot;userCostCodeId&quot;: null,&#xd;
      &quot;fnTimesheetCostCode&quot;: 0,&#xd;
      &quot;dataUsersCharge&quot;: 0,&#xd;
      &quot;fnTimesheetChargeableFlag&quot;: 0,&#xd;
      &quot;chargeableAmount&quot;: null,&#xd;
      &quot;projectName&quot;: &quot;Project 99&quot;,&#xd;
      &quot;projectTaskName&quot;: &quot;PROJECT TASK 2_99&quot;,&#xd;
      &quot;userCostTypeName&quot;: null,&#xd;
      &quot;invoiced&quot;: false,&#xd;
      &quot;ucir&quot;: &quot;9577a59a-5e36-4c61-aa55-dd032fa358ed&quot;,&#xd;
      &quot;createdBy&quot;: &quot;tenant1user19@mailinator.com&quot;,&#xd;
      &quot;updatedBy&quot;: null,&#xd;
      &quot;createdDate&quot;: &quot;2017-03-27T00:00:00&quot;,&#xd;
      &quot;updatedDate&quot;: null,&#xd;
      &quot;id&quot;: &quot;d18a02c7-8aa2-4df3-9160-b9e74b2ba363&quot;,&#xd;
      &quot;version&quot;: &quot;AAAAAAAAah4=&quot;,&#xd;
      &quot;groupDate&quot;: &quot;2017-03-23T17:00:00.000Z&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;timeDate&quot;: &quot;2017-03-23T17:00:00Z&quot;,&#xd;
      &quot;fromDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;toDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;userProfileId&quot;: &quot;558b18d4-0629-464a-8b49-0c08258584d9&quot;,&#xd;
      &quot;projectId&quot;: &quot;57a0239c-81a0-4c5f-84c5-843b86a18c88&quot;,&#xd;
      &quot;projectTaskId&quot;: &quot;1ddd2f8b-053e-490a-ac69-9db4f0935a8d&quot;,&#xd;
      &quot;invoiceDetailId&quot;: null,&#xd;
      &quot;projectActivityId&quot;: &quot;2b44c982-5c8b-4159-ab99-24788f87a94b&quot;,&#xd;
      &quot;userCostAmtId&quot;: &quot;175b2f8a-bf2d-47a3-b9c3-a3cc409eb45d&quot;,&#xd;
      &quot;effortUnits&quot;: 0.1,&#xd;
      &quot;costTotal&quot;: 0,&#xd;
      &quot;costRateAmt&quot;: 0,&#xd;
      &quot;chargeable&quot;: false,&#xd;
      &quot;chargeRateAmt&quot;: 0,&#xd;
      &quot;chargeTotal&quot;: 0,&#xd;
      &quot;timeNotes&quot;: &quot;Load-note for saving a timesheet&quot;,&#xd;
      &quot;invoiceId&quot;: null,&#xd;
      &quot;locked&quot;: false,&#xd;
      &quot;timesheetSubmissionId&quot;: null,&#xd;
      &quot;previousActivityName&quot;: &quot;Default Role&quot;,&#xd;
      &quot;timeTypeName&quot;: &quot;Standard Hour&quot;,&#xd;
      &quot;userCostCodeId&quot;: null,&#xd;
      &quot;fnTimesheetCostCode&quot;: 0,&#xd;
      &quot;dataUsersCharge&quot;: 0,&#xd;
      &quot;fnTimesheetChargeableFlag&quot;: 0,&#xd;
      &quot;chargeableAmount&quot;: null,&#xd;
      &quot;projectName&quot;: &quot;Project 99&quot;,&#xd;
      &quot;projectTaskName&quot;: &quot;PROJECT TASK 2_99&quot;,&#xd;
      &quot;userCostTypeName&quot;: null,&#xd;
      &quot;invoiced&quot;: false,&#xd;
      &quot;ucir&quot;: &quot;9577a59a-5e36-4c61-aa55-dd032fa358ed&quot;,&#xd;
      &quot;createdBy&quot;: &quot;tenant1user19@mailinator.com&quot;,&#xd;
      &quot;updatedBy&quot;: null,&#xd;
      &quot;createdDate&quot;: &quot;2017-03-27T00:00:00&quot;,&#xd;
      &quot;updatedDate&quot;: null,&#xd;
      &quot;id&quot;: &quot;fb33c055-8f80-4f35-9435-bc4d518a7ed0&quot;,&#xd;
      &quot;version&quot;: &quot;AAAAAAAAeDI=&quot;,&#xd;
      &quot;groupDate&quot;: &quot;2017-03-23T17:00:00.000Z&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;timeDate&quot;: &quot;2017-03-23T17:00:00Z&quot;,&#xd;
      &quot;fromDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;toDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;userProfileId&quot;: &quot;558b18d4-0629-464a-8b49-0c08258584d9&quot;,&#xd;
      &quot;projectId&quot;: &quot;57a0239c-81a0-4c5f-84c5-843b86a18c88&quot;,&#xd;
      &quot;projectTaskId&quot;: &quot;1ddd2f8b-053e-490a-ac69-9db4f0935a8d&quot;,&#xd;
      &quot;invoiceDetailId&quot;: null,&#xd;
      &quot;projectActivityId&quot;: &quot;2b44c982-5c8b-4159-ab99-24788f87a94b&quot;,&#xd;
      &quot;userCostAmtId&quot;: &quot;175b2f8a-bf2d-47a3-b9c3-a3cc409eb45d&quot;,&#xd;
      &quot;effortUnits&quot;: 0.1,&#xd;
      &quot;costTotal&quot;: 0,&#xd;
      &quot;costRateAmt&quot;: 0,&#xd;
      &quot;chargeable&quot;: false,&#xd;
      &quot;chargeRateAmt&quot;: 0,&#xd;
      &quot;chargeTotal&quot;: 0,&#xd;
      &quot;timeNotes&quot;: &quot;Load-note for saving a timesheet&quot;,&#xd;
      &quot;invoiceId&quot;: null,&#xd;
      &quot;locked&quot;: false,&#xd;
      &quot;timesheetSubmissionId&quot;: null,&#xd;
      &quot;previousActivityName&quot;: &quot;Default Role&quot;,&#xd;
      &quot;timeTypeName&quot;: &quot;Standard Hour&quot;,&#xd;
      &quot;userCostCodeId&quot;: null,&#xd;
      &quot;fnTimesheetCostCode&quot;: 0,&#xd;
      &quot;dataUsersCharge&quot;: 0,&#xd;
      &quot;fnTimesheetChargeableFlag&quot;: 0,&#xd;
      &quot;chargeableAmount&quot;: null,&#xd;
      &quot;projectName&quot;: &quot;Project 99&quot;,&#xd;
      &quot;projectTaskName&quot;: &quot;PROJECT TASK 2_99&quot;,&#xd;
      &quot;userCostTypeName&quot;: null,&#xd;
      &quot;invoiced&quot;: false,&#xd;
      &quot;ucir&quot;: &quot;9577a59a-5e36-4c61-aa55-dd032fa358ed&quot;,&#xd;
      &quot;createdBy&quot;: &quot;tenant1user19@mailinator.com&quot;,&#xd;
      &quot;updatedBy&quot;: null,&#xd;
      &quot;createdDate&quot;: &quot;2017-03-27T00:00:00&quot;,&#xd;
      &quot;updatedDate&quot;: null,&#xd;
      &quot;id&quot;: &quot;bc9b426c-6a50-4241-b4d7-ec0797bcfc77&quot;,&#xd;
      &quot;version&quot;: &quot;AAAAAAAAZZI=&quot;,&#xd;
      &quot;groupDate&quot;: &quot;2017-03-23T17:00:00.000Z&quot;&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                                      <stringProp name="Argument.metadata">=</stringProp>
                                    </elementProp>
                                  </collectionProp>
                                </elementProp>
                                <stringProp name="HTTPSampler.domain">loadtest.rhinoapps.com</stringProp>
                                <stringProp name="HTTPSampler.port"></stringProp>
                                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                <stringProp name="HTTPSampler.protocol">https</stringProp>
                                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                <stringProp name="HTTPSampler.path">rhinoApi/api/TimesheetSubmissions</stringProp>
                                <stringProp name="HTTPSampler.method">POST</stringProp>
                                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                                <boolProp name="HTTPSampler.monitor">false</boolProp>
                                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                              </HTTPSamplerProxy>
                              <hashTree>
                                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                                  <collectionProp name="HeaderManager.headers">
                                    <elementProp name="Accept" elementType="Header">
                                      <stringProp name="Header.name">Accept</stringProp>
                                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                                    </elementProp>
                                    <elementProp name="Origin" elementType="Header">
                                      <stringProp name="Header.name">Origin</stringProp>
                                      <stringProp name="Header.value">https://loadtest.rhinoapps.com</stringProp>
                                    </elementProp>
                                    <elementProp name="X-DevTools-Emulate-Network-Conditions-Client-Id" elementType="Header">
                                      <stringProp name="Header.name">X-DevTools-Emulate-Network-Conditions-Client-Id</stringProp>
                                      <stringProp name="Header.value">a88c0755-8e77-412e-bac1-0e7fd44e999b</stringProp>
                                    </elementProp>
                                    <elementProp name="User-Agent" elementType="Header">
                                      <stringProp name="Header.name">User-Agent</stringProp>
                                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                                    </elementProp>
                                    <elementProp name="Authorization" elementType="Header">
                                      <stringProp name="Header.name">Authorization</stringProp>
                                      <stringProp name="Header.value">bearer V_UbgBWUpDdaMEmDcPeWYJAx41khyUMk66xpzTmsnc4jyDMs91zbRuRJUynaWMF-bgLQ8Vo884eA00i5Q8sTl-ZMCL7bQH1f975pfg3NRSeHHgS-qdOWZ2ld1MOpdF-7YHxF7pNLR9KAern85LbIjaxMcxBg3H5Pa9mKvOLjzVbnz7u5eQRvWhczu3G5H6NMmuzjUhULyqUz2HA6uNgracUepIe7OyIAOYBe_dGQWLEsX2HERC_6Vu3sSwTNgBmq9Kghs-mX5Alfh_xnb3grVM1agcFiVna_9-TYCXOTAc9FcGpUy4QLdYjv42cieeVb0ZO0BdIvWORK7HNXbGJjShmtgmmyxaNZGH8zBdo0P21Po17NSDnIeMQJRP2NL1ey3z1sd9Syk6_5Ky1TLebknq-rqyUnbZdN9QdgWjo0cIFhyY-nACFIDZR7Dx3PJbQB8PnXYrcpDaEVXKqM_mO18wTdY8oPcD2hdRI0cHF2JiEeZSQLxnqR2Y-s3cLho7w3TC2uNDorU6ULpLWalWTO1vIMu79yNDhUjGQxGU-sLwxv2sZ5m7Gx5WWkTvjsgUOBE4w3AaPGnYmvuRNd0bB9FRjfewLzV9dC-GUK5ga9E3opYNhyDTLYuG0K2DXf72BraVs7Ns1aT8ZePgTz7rkWNCH0r-er10vcbwWiYDBfQjE</stringProp>
                                    </elementProp>
                                    <elementProp name="Content-Type" elementType="Header">
                                      <stringProp name="Header.name">Content-Type</stringProp>
                                      <stringProp name="Header.value">application/json</stringProp>
                                    </elementProp>
                                    <elementProp name="Referer" elementType="Header">
                                      <stringProp name="Header.name">Referer</stringProp>
                                      <stringProp name="Header.value">https://loadtest.rhinoapps.com/Rhino/</stringProp>
                                    </elementProp>
                                    <elementProp name="Accept-Encoding" elementType="Header">
                                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                                    </elementProp>
                                    <elementProp name="Accept-Language" elementType="Header">
                                      <stringProp name="Header.name">Accept-Language</stringProp>
                                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                                    </elementProp>
                                  </collectionProp>
                                </HeaderManager>
                                <hashTree/>
                                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                                  <stringProp name="RandomTimer.range">2729.6000000000004</stringProp>
                                  <stringProp name="ConstantTimer.delay">5459.200000000001</stringProp>
                                </UniformRandomTimer>
                                <hashTree/>
                              </hashTree>
                              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserProfiles" enabled="true">
                                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                  <collectionProp name="Arguments.arguments"/>
                                </elementProp>
                                <stringProp name="HTTPSampler.domain"></stringProp>
                                <stringProp name="HTTPSampler.port"></stringProp>
                                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                <stringProp name="HTTPSampler.protocol"></stringProp>
                                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                <stringProp name="HTTPSampler.path">${apiPath}/api/UserProfiles</stringProp>
                                <stringProp name="HTTPSampler.method">GET</stringProp>
                                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                                <boolProp name="HTTPSampler.monitor">false</boolProp>
                                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                              </HTTPSamplerProxy>
                              <hashTree>
                                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                                  <stringProp name="ConstantTimer.delay">2000</stringProp>
                                  <stringProp name="RandomTimer.range">4000</stringProp>
                                </UniformRandomTimer>
                                <hashTree/>
                              </hashTree>
                            </hashTree>
                            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                              <stringProp name="IfController.condition">&quot;${TimesheetIdS}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${TimesheetIdS}&quot; != &quot;\${TimesheetIdS}&quot;</stringProp>
                              <boolProp name="IfController.evaluateAll">false</boolProp>
                            </IfController>
                            <hashTree>
                              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="84.Visit_Timesheet_Approval_page" enabled="true">
                                <boolProp name="TransactionController.includeTimers">false</boolProp>
                                <boolProp name="TransactionController.parent">true</boolProp>
                              </TransactionController>
                              <hashTree>
                                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Visit_Timesheet_Approval_page" enabled="true">
                                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                    <collectionProp name="Arguments.arguments"/>
                                  </elementProp>
                                  <stringProp name="HTTPSampler.domain"></stringProp>
                                  <stringProp name="HTTPSampler.port"></stringProp>
                                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.protocol"></stringProp>
                                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                  <stringProp name="HTTPSampler.path">${rhinoPath}/#/timesheet-submission</stringProp>
                                  <stringProp name="HTTPSampler.method">GET</stringProp>
                                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                </HTTPSamplerProxy>
                                <hashTree>
                                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                                    <stringProp name="DurationAssertion.duration">3000</stringProp>
                                  </DurationAssertion>
                                  <hashTree/>
                                </hashTree>
                                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="timesheetAdminView" enabled="true">
                                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                    <collectionProp name="Arguments.arguments"/>
                                  </elementProp>
                                  <stringProp name="HTTPSampler.domain"></stringProp>
                                  <stringProp name="HTTPSampler.port"></stringProp>
                                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.protocol"></stringProp>
                                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                  <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/timesheetAdminView.html</stringProp>
                                  <stringProp name="HTTPSampler.method">GET</stringProp>
                                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                </HTTPSamplerProxy>
                                <hashTree/>
                                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetTimesheetsWithPeriod" enabled="true">
                                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                    <collectionProp name="Arguments.arguments">
                                      <elementProp name="isGetAdminOnly" elementType="HTTPArgument">
                                        <stringProp name="Argument.name">isGetAdminOnly</stringProp>
                                        <stringProp name="Argument.value">true</stringProp>
                                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                      </elementProp>
                                      <elementProp name="from" elementType="HTTPArgument">
                                        <stringProp name="Argument.name">from</stringProp>
                                        <stringProp name="Argument.value">${fromDate}</stringProp>
                                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                      </elementProp>
                                      <elementProp name="to" elementType="HTTPArgument">
                                        <stringProp name="Argument.name">to</stringProp>
                                        <stringProp name="Argument.value">${toDate}</stringProp>
                                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                      </elementProp>
                                      <elementProp name="userId" elementType="HTTPArgument">
                                        <stringProp name="Argument.name">userId</stringProp>
                                        <stringProp name="Argument.value">${userProfileId}</stringProp>
                                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                      </elementProp>
                                    </collectionProp>
                                  </elementProp>
                                  <stringProp name="HTTPSampler.domain"></stringProp>
                                  <stringProp name="HTTPSampler.port"></stringProp>
                                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.protocol"></stringProp>
                                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                  <stringProp name="HTTPSampler.path">${apiPath}/api/Timesheets/GetTimesheetsWithPeriod</stringProp>
                                  <stringProp name="HTTPSampler.method">GET</stringProp>
                                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                </HTTPSamplerProxy>
                                <hashTree/>
                                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***" enabled="false">
                                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                    <collectionProp name="Arguments.arguments">
                                      <elementProp name="isGetAdminOnly" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                        <stringProp name="Argument.name">isGetAdminOnly</stringProp>
                                        <stringProp name="Argument.value">false</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                      </elementProp>
                                      <elementProp name="from" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                        <stringProp name="Argument.name">from</stringProp>
                                        <stringProp name="Argument.value">2017-03-26T17:00:00.000Z</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                      </elementProp>
                                      <elementProp name="to" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                        <stringProp name="Argument.name">to</stringProp>
                                        <stringProp name="Argument.value">2017-04-02T16:59:59.000Z</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                      </elementProp>
                                      <elementProp name="t" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                        <stringProp name="Argument.name">t</stringProp>
                                        <stringProp name="Argument.value">1490856863358</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                      </elementProp>
                                      <elementProp name="userId" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                        <stringProp name="Argument.name">userId</stringProp>
                                        <stringProp name="Argument.value">558b18d4-0629-464a-8b49-0c08258584d9</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                      </elementProp>
                                    </collectionProp>
                                  </elementProp>
                                  <stringProp name="HTTPSampler.domain">loadtest.rhinoapps.com</stringProp>
                                  <stringProp name="HTTPSampler.port"></stringProp>
                                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                  <stringProp name="HTTPSampler.path">rhinoApi/api/Timesheets/GetTimesheetsWithPeriod</stringProp>
                                  <stringProp name="HTTPSampler.method">GET</stringProp>
                                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                </HTTPSamplerProxy>
                                <hashTree>
                                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                                    <collectionProp name="HeaderManager.headers">
                                      <elementProp name="Accept" elementType="Header">
                                        <stringProp name="Header.name">Accept</stringProp>
                                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                                      </elementProp>
                                      <elementProp name="X-DevTools-Emulate-Network-Conditions-Client-Id" elementType="Header">
                                        <stringProp name="Header.name">X-DevTools-Emulate-Network-Conditions-Client-Id</stringProp>
                                        <stringProp name="Header.value">a88c0755-8e77-412e-bac1-0e7fd44e999b</stringProp>
                                      </elementProp>
                                      <elementProp name="User-Agent" elementType="Header">
                                        <stringProp name="Header.name">User-Agent</stringProp>
                                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                                      </elementProp>
                                      <elementProp name="Authorization" elementType="Header">
                                        <stringProp name="Header.name">Authorization</stringProp>
                                        <stringProp name="Header.value">bearer V_UbgBWUpDdaMEmDcPeWYJAx41khyUMk66xpzTmsnc4jyDMs91zbRuRJUynaWMF-bgLQ8Vo884eA00i5Q8sTl-ZMCL7bQH1f975pfg3NRSeHHgS-qdOWZ2ld1MOpdF-7YHxF7pNLR9KAern85LbIjaxMcxBg3H5Pa9mKvOLjzVbnz7u5eQRvWhczu3G5H6NMmuzjUhULyqUz2HA6uNgracUepIe7OyIAOYBe_dGQWLEsX2HERC_6Vu3sSwTNgBmq9Kghs-mX5Alfh_xnb3grVM1agcFiVna_9-TYCXOTAc9FcGpUy4QLdYjv42cieeVb0ZO0BdIvWORK7HNXbGJjShmtgmmyxaNZGH8zBdo0P21Po17NSDnIeMQJRP2NL1ey3z1sd9Syk6_5Ky1TLebknq-rqyUnbZdN9QdgWjo0cIFhyY-nACFIDZR7Dx3PJbQB8PnXYrcpDaEVXKqM_mO18wTdY8oPcD2hdRI0cHF2JiEeZSQLxnqR2Y-s3cLho7w3TC2uNDorU6ULpLWalWTO1vIMu79yNDhUjGQxGU-sLwxv2sZ5m7Gx5WWkTvjsgUOBE4w3AaPGnYmvuRNd0bB9FRjfewLzV9dC-GUK5ga9E3opYNhyDTLYuG0K2DXf72BraVs7Ns1aT8ZePgTz7rkWNCH0r-er10vcbwWiYDBfQjE</stringProp>
                                      </elementProp>
                                      <elementProp name="Referer" elementType="Header">
                                        <stringProp name="Header.name">Referer</stringProp>
                                        <stringProp name="Header.value">https://loadtest.rhinoapps.com/Rhino/</stringProp>
                                      </elementProp>
                                      <elementProp name="Accept-Encoding" elementType="Header">
                                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                                        <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                                      </elementProp>
                                      <elementProp name="Accept-Language" elementType="Header">
                                        <stringProp name="Header.name">Accept-Language</stringProp>
                                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                                      </elementProp>
                                    </collectionProp>
                                  </HeaderManager>
                                  <hashTree/>
                                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                                    <stringProp name="RandomTimer.range">132.4</stringProp>
                                    <stringProp name="ConstantTimer.delay">264.8</stringProp>
                                  </UniformRandomTimer>
                                  <hashTree/>
                                </hashTree>
                                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="timesheetSubmissionList" enabled="true">
                                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                    <collectionProp name="Arguments.arguments"/>
                                  </elementProp>
                                  <stringProp name="HTTPSampler.domain"></stringProp>
                                  <stringProp name="HTTPSampler.port"></stringProp>
                                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.protocol"></stringProp>
                                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                  <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/timesheetSubmissionList.html</stringProp>
                                  <stringProp name="HTTPSampler.method">GET</stringProp>
                                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                </HTTPSamplerProxy>
                                <hashTree>
                                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                                    <stringProp name="ConstantTimer.delay">2000</stringProp>
                                    <stringProp name="RandomTimer.range">5000</stringProp>
                                  </UniformRandomTimer>
                                  <hashTree/>
                                </hashTree>
                              </hashTree>
                              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="85.Select_week_to_approve" enabled="true">
                                <boolProp name="TransactionController.includeTimers">false</boolProp>
                                <boolProp name="TransactionController.parent">true</boolProp>
                              </TransactionController>
                              <hashTree>
                                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="85.Select_a_week_to_approve" enabled="false">
                                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                    <collectionProp name="Arguments.arguments"/>
                                  </elementProp>
                                  <stringProp name="HTTPSampler.domain"></stringProp>
                                  <stringProp name="HTTPSampler.port"></stringProp>
                                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.protocol"></stringProp>
                                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                  <stringProp name="HTTPSampler.path">${apiPath}/api/Timesheets/GetTimesheetsWithPeriod?from=${appfromDate}&amp;isGetAdminOnly=true&amp;to=${apptoDate}&amp;userId=${userProfileId}</stringProp>
                                  <stringProp name="HTTPSampler.method">GET</stringProp>
                                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                </HTTPSamplerProxy>
                                <hashTree>
                                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                                    <collectionProp name="HeaderManager.headers">
                                      <elementProp name="" elementType="Header">
                                        <stringProp name="Header.name">Authorization</stringProp>
                                        <stringProp name="Header.value">bearer ${token}</stringProp>
                                      </elementProp>
                                      <elementProp name="Accept" elementType="Header">
                                        <stringProp name="Header.name">Accept</stringProp>
                                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                                      </elementProp>
                                      <elementProp name="User-Agent" elementType="Header">
                                        <stringProp name="Header.name">User-Agent</stringProp>
                                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                                      </elementProp>
                                      <elementProp name="Accept-Encoding" elementType="Header">
                                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                                      </elementProp>
                                      <elementProp name="Accept-Language" elementType="Header">
                                        <stringProp name="Header.name">Accept-Language</stringProp>
                                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                                      </elementProp>
                                    </collectionProp>
                                  </HeaderManager>
                                  <hashTree/>
                                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                                    <stringProp name="DurationAssertion.duration">3000</stringProp>
                                  </DurationAssertion>
                                  <hashTree/>
                                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                                    <stringProp name="ConstantTimer.delay">5000</stringProp>
                                    <stringProp name="RandomTimer.range">35000</stringProp>
                                  </UniformRandomTimer>
                                  <hashTree/>
                                </hashTree>
                                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetTimesheetsWithPeriod" enabled="true">
                                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                    <collectionProp name="Arguments.arguments">
                                      <elementProp name="isGetAdminOnly" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                        <stringProp name="Argument.name">isGetAdminOnly</stringProp>
                                        <stringProp name="Argument.value">true</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                      </elementProp>
                                      <elementProp name="from" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                        <stringProp name="Argument.name">from</stringProp>
                                        <stringProp name="Argument.value">${fromDate}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                      </elementProp>
                                      <elementProp name="to" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                        <stringProp name="Argument.name">to</stringProp>
                                        <stringProp name="Argument.value">${toDate}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                      </elementProp>
                                      <elementProp name="userId" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                        <stringProp name="Argument.name">userId</stringProp>
                                        <stringProp name="Argument.value">${userProfileId}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                      </elementProp>
                                    </collectionProp>
                                  </elementProp>
                                  <stringProp name="HTTPSampler.domain"></stringProp>
                                  <stringProp name="HTTPSampler.port"></stringProp>
                                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.protocol"></stringProp>
                                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                  <stringProp name="HTTPSampler.path">${apiPath}/api/Timesheets/GetTimesheetsWithPeriod</stringProp>
                                  <stringProp name="HTTPSampler.method">GET</stringProp>
                                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                </HTTPSamplerProxy>
                                <hashTree>
                                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                                    <stringProp name="ConstantTimer.delay">5000</stringProp>
                                    <stringProp name="RandomTimer.range">35000</stringProp>
                                  </UniformRandomTimer>
                                  <hashTree/>
                                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                                    <stringProp name="ConstantTimer.delay">2000</stringProp>
                                    <stringProp name="RandomTimer.range">4000</stringProp>
                                  </UniformRandomTimer>
                                  <hashTree/>
                                </hashTree>
                              </hashTree>
                              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="86.Select TS to approve" enabled="true">
                                <boolProp name="TransactionController.includeTimers">false</boolProp>
                                <boolProp name="TransactionController.parent">true</boolProp>
                              </TransactionController>
                              <hashTree>
                                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_Project" enabled="true">
                                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                    <collectionProp name="Arguments.arguments"/>
                                  </elementProp>
                                  <stringProp name="HTTPSampler.domain"></stringProp>
                                  <stringProp name="HTTPSampler.port"></stringProp>
                                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.protocol"></stringProp>
                                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                  <stringProp name="HTTPSampler.path">${apiPath}/api/Projects</stringProp>
                                  <stringProp name="HTTPSampler.method">GET</stringProp>
                                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                  <stringProp name="TestPlan.comments">get id &amp; projectManagerId</stringProp>
                                </HTTPSamplerProxy>
                                <hashTree>
                                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                                    <collectionProp name="HeaderManager.headers">
                                      <elementProp name="Accept" elementType="Header">
                                        <stringProp name="Header.name">Accept</stringProp>
                                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                                      </elementProp>
                                      <elementProp name="User-Agent" elementType="Header">
                                        <stringProp name="Header.name">User-Agent</stringProp>
                                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                                      </elementProp>
                                      <elementProp name="Authorization" elementType="Header">
                                        <stringProp name="Header.name">Authorization</stringProp>
                                        <stringProp name="Header.value">bearer ${token}</stringProp>
                                      </elementProp>
                                      <elementProp name="Accept-Encoding" elementType="Header">
                                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                                        <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                                      </elementProp>
                                      <elementProp name="Accept-Language" elementType="Header">
                                        <stringProp name="Header.name">Accept-Language</stringProp>
                                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                                      </elementProp>
                                    </collectionProp>
                                  </HeaderManager>
                                  <hashTree/>
                                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_projectId" enabled="false">
                                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                                    <stringProp name="RegexExtractor.refname">projectId</stringProp>
                                    <stringProp name="RegexExtractor.regex">.*&quot;projectId&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                                    <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                                    <stringProp name="Sample.scope">all</stringProp>
                                  </RegexExtractor>
                                  <hashTree/>
                                </hashTree>
                                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_GetProjectsWithLive" enabled="true">
                                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                    <collectionProp name="Arguments.arguments"/>
                                  </elementProp>
                                  <stringProp name="HTTPSampler.domain"></stringProp>
                                  <stringProp name="HTTPSampler.port"></stringProp>
                                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.protocol"></stringProp>
                                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                  <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetProjectsWithLive</stringProp>
                                  <stringProp name="HTTPSampler.method">GET</stringProp>
                                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                  <stringProp name="TestPlan.comments">data[14].Projects/GetProjectsWithLive &amp; id</stringProp>
                                </HTTPSamplerProxy>
                                <hashTree>
                                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                                    <collectionProp name="HeaderManager.headers">
                                      <elementProp name="Accept" elementType="Header">
                                        <stringProp name="Header.name">Accept</stringProp>
                                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                                      </elementProp>
                                      <elementProp name="User-Agent" elementType="Header">
                                        <stringProp name="Header.name">User-Agent</stringProp>
                                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                                      </elementProp>
                                      <elementProp name="Authorization" elementType="Header">
                                        <stringProp name="Header.name">Authorization</stringProp>
                                        <stringProp name="Header.value">bearer ${token}</stringProp>
                                      </elementProp>
                                      <elementProp name="Accept-Encoding" elementType="Header">
                                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                                        <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                                      </elementProp>
                                      <elementProp name="Accept-Language" elementType="Header">
                                        <stringProp name="Header.name">Accept-Language</stringProp>
                                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                                      </elementProp>
                                    </collectionProp>
                                  </HeaderManager>
                                  <hashTree/>
                                </hashTree>
                                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_userCostCodeId Default " enabled="false">
                                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                    <collectionProp name="Arguments.arguments"/>
                                  </elementProp>
                                  <stringProp name="HTTPSampler.domain"></stringProp>
                                  <stringProp name="HTTPSampler.port"></stringProp>
                                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.protocol"></stringProp>
                                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                  <stringProp name="HTTPSampler.path">${apiPath}/api/UserCostCodes</stringProp>
                                  <stringProp name="HTTPSampler.method">GET</stringProp>
                                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                </HTTPSamplerProxy>
                                <hashTree>
                                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                                    <collectionProp name="HeaderManager.headers">
                                      <elementProp name="Accept" elementType="Header">
                                        <stringProp name="Header.name">Accept</stringProp>
                                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                                      </elementProp>
                                      <elementProp name="User-Agent" elementType="Header">
                                        <stringProp name="Header.name">User-Agent</stringProp>
                                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                                      </elementProp>
                                      <elementProp name="Authorization" elementType="Header">
                                        <stringProp name="Header.name">Authorization</stringProp>
                                        <stringProp name="Header.value">bearer ${token}</stringProp>
                                      </elementProp>
                                      <elementProp name="Accept-Encoding" elementType="Header">
                                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                                        <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                                      </elementProp>
                                      <elementProp name="Accept-Language" elementType="Header">
                                        <stringProp name="Header.name">Accept-Language</stringProp>
                                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                                      </elementProp>
                                    </collectionProp>
                                  </HeaderManager>
                                  <hashTree/>
                                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_userCostCodeId" enabled="true">
                                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                                    <stringProp name="RegexExtractor.refname">userCostCodeId</stringProp>
                                    <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                                    <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                                    <stringProp name="Sample.scope">all</stringProp>
                                  </RegexExtractor>
                                  <hashTree/>
                                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="get_UserCostCodesId" enabled="false">
                                    <collectionProp name="Asserion.test_strings">
                                      <stringProp name="-209463674">${userCostCodeId}</stringProp>
                                    </collectionProp>
                                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                    <boolProp name="Assertion.assume_success">false</boolProp>
                                    <intProp name="Assertion.test_type">2</intProp>
                                  </ResponseAssertion>
                                  <hashTree/>
                                </hashTree>
                                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetWithTypeAndCodeActiveByCostCode" enabled="true">
                                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                    <collectionProp name="Arguments.arguments"/>
                                  </elementProp>
                                  <stringProp name="HTTPSampler.domain"></stringProp>
                                  <stringProp name="HTTPSampler.port"></stringProp>
                                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.protocol"></stringProp>
                                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                  <stringProp name="HTTPSampler.path">${apiPath}/api/UserCostAmts/GetWithTypeAndCodeActiveByCostCode/${userCostCodeId}</stringProp>
                                  <stringProp name="HTTPSampler.method">GET</stringProp>
                                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                </HTTPSamplerProxy>
                                <hashTree>
                                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                                    <collectionProp name="HeaderManager.headers">
                                      <elementProp name="Accept" elementType="Header">
                                        <stringProp name="Header.name">Accept</stringProp>
                                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                                      </elementProp>
                                      <elementProp name="User-Agent" elementType="Header">
                                        <stringProp name="Header.name">User-Agent</stringProp>
                                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                                      </elementProp>
                                      <elementProp name="Authorization" elementType="Header">
                                        <stringProp name="Header.name">Authorization</stringProp>
                                        <stringProp name="Header.value">bearer ${token}</stringProp>
                                      </elementProp>
                                      <elementProp name="Accept-Encoding" elementType="Header">
                                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                                        <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                                      </elementProp>
                                      <elementProp name="Accept-Language" elementType="Header">
                                        <stringProp name="Header.name">Accept-Language</stringProp>
                                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                                      </elementProp>
                                    </collectionProp>
                                  </HeaderManager>
                                  <hashTree/>
                                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_projectActivityId" enabled="false">
                                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                                    <stringProp name="RegexExtractor.refname">projectActivityId</stringProp>
                                    <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                                    <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                                    <stringProp name="Sample.scope">all</stringProp>
                                  </RegexExtractor>
                                  <hashTree/>
                                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify_projectActivityId" enabled="false">
                                    <collectionProp name="Asserion.test_strings">
                                      <stringProp name="1419238769">${projectActivityId}</stringProp>
                                    </collectionProp>
                                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                    <boolProp name="Assertion.assume_success">false</boolProp>
                                    <intProp name="Assertion.test_type">2</intProp>
                                  </ResponseAssertion>
                                  <hashTree/>
                                </hashTree>
                                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_userCostAmtId Default" enabled="false">
                                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                    <collectionProp name="Arguments.arguments"/>
                                  </elementProp>
                                  <stringProp name="HTTPSampler.domain"></stringProp>
                                  <stringProp name="HTTPSampler.port"></stringProp>
                                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.protocol"></stringProp>
                                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                  <stringProp name="HTTPSampler.path">${apiPath}/api/UserCostAmts/GetWithTypeActiveByCostCode/${userCostCodeId}</stringProp>
                                  <stringProp name="HTTPSampler.method">GET</stringProp>
                                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                </HTTPSamplerProxy>
                                <hashTree>
                                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                                    <collectionProp name="HeaderManager.headers">
                                      <elementProp name="Accept" elementType="Header">
                                        <stringProp name="Header.name">Accept</stringProp>
                                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                                      </elementProp>
                                      <elementProp name="User-Agent" elementType="Header">
                                        <stringProp name="Header.name">User-Agent</stringProp>
                                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                                      </elementProp>
                                      <elementProp name="Authorization" elementType="Header">
                                        <stringProp name="Header.name">Authorization</stringProp>
                                        <stringProp name="Header.value">bearer ${token}</stringProp>
                                      </elementProp>
                                      <elementProp name="Accept-Encoding" elementType="Header">
                                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                                        <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                                      </elementProp>
                                      <elementProp name="Accept-Language" elementType="Header">
                                        <stringProp name="Header.name">Accept-Language</stringProp>
                                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                                      </elementProp>
                                    </collectionProp>
                                  </HeaderManager>
                                  <hashTree/>
                                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_userCostAmtId" enabled="true">
                                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                                    <stringProp name="RegexExtractor.refname">userCostAmtId</stringProp>
                                    <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                                    <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                                    <stringProp name="Sample.scope">all</stringProp>
                                  </RegexExtractor>
                                  <hashTree/>
                                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                                    <stringProp name="RandomTimer.range">30000</stringProp>
                                  </UniformRandomTimer>
                                  <hashTree/>
                                </hashTree>
                                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="timesheetMemberView" enabled="true">
                                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                    <collectionProp name="Arguments.arguments"/>
                                  </elementProp>
                                  <stringProp name="HTTPSampler.domain"></stringProp>
                                  <stringProp name="HTTPSampler.port"></stringProp>
                                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.protocol"></stringProp>
                                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                  <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/timesheetMemberView.html</stringProp>
                                  <stringProp name="HTTPSampler.method">GET</stringProp>
                                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                </HTTPSamplerProxy>
                                <hashTree/>
                                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="timesheetMemberListWeekView" enabled="true">
                                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                    <collectionProp name="Arguments.arguments"/>
                                  </elementProp>
                                  <stringProp name="HTTPSampler.domain"></stringProp>
                                  <stringProp name="HTTPSampler.port"></stringProp>
                                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.protocol"></stringProp>
                                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                  <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/timesheetMemberListWeekView.html</stringProp>
                                  <stringProp name="HTTPSampler.method">GET</stringProp>
                                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                </HTTPSamplerProxy>
                                <hashTree/>
                                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetTimesheetsWithPeriod" enabled="true">
                                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                    <collectionProp name="Arguments.arguments">
                                      <elementProp name="isGetAdminOnly" elementType="HTTPArgument">
                                        <stringProp name="Argument.name">isGetAdminOnly</stringProp>
                                        <stringProp name="Argument.value">true</stringProp>
                                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                      </elementProp>
                                      <elementProp name="from" elementType="HTTPArgument">
                                        <stringProp name="Argument.name">from</stringProp>
                                        <stringProp name="Argument.value">${fromDate}</stringProp>
                                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                      </elementProp>
                                      <elementProp name="to" elementType="HTTPArgument">
                                        <stringProp name="Argument.name">to</stringProp>
                                        <stringProp name="Argument.value">${toDate}</stringProp>
                                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                      </elementProp>
                                      <elementProp name="userId" elementType="HTTPArgument">
                                        <stringProp name="Argument.name">userId</stringProp>
                                        <stringProp name="Argument.value">${userProfileId}</stringProp>
                                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                      </elementProp>
                                    </collectionProp>
                                  </elementProp>
                                  <stringProp name="HTTPSampler.domain"></stringProp>
                                  <stringProp name="HTTPSampler.port"></stringProp>
                                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.protocol"></stringProp>
                                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                  <stringProp name="HTTPSampler.path">${apiPath}/api/Timesheets/GetTimesheetsWithPeriod</stringProp>
                                  <stringProp name="HTTPSampler.method">GET</stringProp>
                                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                </HTTPSamplerProxy>
                                <hashTree/>
                                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="timesheetList" enabled="true">
                                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                    <collectionProp name="Arguments.arguments"/>
                                  </elementProp>
                                  <stringProp name="HTTPSampler.domain"></stringProp>
                                  <stringProp name="HTTPSampler.port"></stringProp>
                                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.protocol"></stringProp>
                                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                  <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/timesheetList.html</stringProp>
                                  <stringProp name="HTTPSampler.method">GET</stringProp>
                                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                </HTTPSamplerProxy>
                                <hashTree>
                                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                                    <stringProp name="ConstantTimer.delay">5000</stringProp>
                                    <stringProp name="RandomTimer.range">35000</stringProp>
                                  </UniformRandomTimer>
                                  <hashTree/>
                                </hashTree>
                                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="***" enabled="false">
                                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                                  <boolProp name="TransactionController.parent">true</boolProp>
                                </TransactionController>
                                <hashTree>
                                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://loadtest.rhinoapps.com/rhinoApi/api/Projects?t=1490856884730" enabled="false">
                                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                      <collectionProp name="Arguments.arguments">
                                        <elementProp name="t" elementType="HTTPArgument">
                                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                          <stringProp name="Argument.name">t</stringProp>
                                          <stringProp name="Argument.value">1490856884730</stringProp>
                                          <stringProp name="Argument.metadata">=</stringProp>
                                        </elementProp>
                                      </collectionProp>
                                    </elementProp>
                                    <stringProp name="HTTPSampler.domain">loadtest.rhinoapps.com</stringProp>
                                    <stringProp name="HTTPSampler.port"></stringProp>
                                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                    <stringProp name="HTTPSampler.path">rhinoApi/api/Projects</stringProp>
                                    <stringProp name="HTTPSampler.method">GET</stringProp>
                                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                  </HTTPSamplerProxy>
                                  <hashTree>
                                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                                      <collectionProp name="HeaderManager.headers">
                                        <elementProp name="Accept" elementType="Header">
                                          <stringProp name="Header.name">Accept</stringProp>
                                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                                        </elementProp>
                                        <elementProp name="X-DevTools-Emulate-Network-Conditions-Client-Id" elementType="Header">
                                          <stringProp name="Header.name">X-DevTools-Emulate-Network-Conditions-Client-Id</stringProp>
                                          <stringProp name="Header.value">a88c0755-8e77-412e-bac1-0e7fd44e999b</stringProp>
                                        </elementProp>
                                        <elementProp name="User-Agent" elementType="Header">
                                          <stringProp name="Header.name">User-Agent</stringProp>
                                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                                        </elementProp>
                                        <elementProp name="Authorization" elementType="Header">
                                          <stringProp name="Header.name">Authorization</stringProp>
                                          <stringProp name="Header.value">bearer V_UbgBWUpDdaMEmDcPeWYJAx41khyUMk66xpzTmsnc4jyDMs91zbRuRJUynaWMF-bgLQ8Vo884eA00i5Q8sTl-ZMCL7bQH1f975pfg3NRSeHHgS-qdOWZ2ld1MOpdF-7YHxF7pNLR9KAern85LbIjaxMcxBg3H5Pa9mKvOLjzVbnz7u5eQRvWhczu3G5H6NMmuzjUhULyqUz2HA6uNgracUepIe7OyIAOYBe_dGQWLEsX2HERC_6Vu3sSwTNgBmq9Kghs-mX5Alfh_xnb3grVM1agcFiVna_9-TYCXOTAc9FcGpUy4QLdYjv42cieeVb0ZO0BdIvWORK7HNXbGJjShmtgmmyxaNZGH8zBdo0P21Po17NSDnIeMQJRP2NL1ey3z1sd9Syk6_5Ky1TLebknq-rqyUnbZdN9QdgWjo0cIFhyY-nACFIDZR7Dx3PJbQB8PnXYrcpDaEVXKqM_mO18wTdY8oPcD2hdRI0cHF2JiEeZSQLxnqR2Y-s3cLho7w3TC2uNDorU6ULpLWalWTO1vIMu79yNDhUjGQxGU-sLwxv2sZ5m7Gx5WWkTvjsgUOBE4w3AaPGnYmvuRNd0bB9FRjfewLzV9dC-GUK5ga9E3opYNhyDTLYuG0K2DXf72BraVs7Ns1aT8ZePgTz7rkWNCH0r-er10vcbwWiYDBfQjE</stringProp>
                                        </elementProp>
                                        <elementProp name="Referer" elementType="Header">
                                          <stringProp name="Header.name">Referer</stringProp>
                                          <stringProp name="Header.value">https://loadtest.rhinoapps.com/Rhino/</stringProp>
                                        </elementProp>
                                        <elementProp name="Accept-Encoding" elementType="Header">
                                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                                          <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                                        </elementProp>
                                        <elementProp name="Accept-Language" elementType="Header">
                                          <stringProp name="Header.name">Accept-Language</stringProp>
                                          <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                                        </elementProp>
                                      </collectionProp>
                                    </HeaderManager>
                                    <hashTree/>
                                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                                      <stringProp name="RandomTimer.range">4865.2</stringProp>
                                      <stringProp name="ConstantTimer.delay">9730.4</stringProp>
                                    </UniformRandomTimer>
                                    <hashTree/>
                                  </hashTree>
                                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://loadtest.rhinoapps.com/rhinoApi/api/Projects/GetProjectsWithLive?t=1490856884730" enabled="false">
                                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                      <collectionProp name="Arguments.arguments">
                                        <elementProp name="t" elementType="HTTPArgument">
                                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                          <stringProp name="Argument.name">t</stringProp>
                                          <stringProp name="Argument.value">1490856884730</stringProp>
                                          <stringProp name="Argument.metadata">=</stringProp>
                                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        </elementProp>
                                      </collectionProp>
                                    </elementProp>
                                    <stringProp name="HTTPSampler.domain">loadtest.rhinoapps.com</stringProp>
                                    <stringProp name="HTTPSampler.port"></stringProp>
                                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                    <stringProp name="HTTPSampler.path">rhinoApi/api/Projects/GetProjectsWithLive</stringProp>
                                    <stringProp name="HTTPSampler.method">GET</stringProp>
                                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                  </HTTPSamplerProxy>
                                  <hashTree>
                                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                                      <collectionProp name="HeaderManager.headers">
                                        <elementProp name="Accept" elementType="Header">
                                          <stringProp name="Header.name">Accept</stringProp>
                                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                                        </elementProp>
                                        <elementProp name="X-DevTools-Emulate-Network-Conditions-Client-Id" elementType="Header">
                                          <stringProp name="Header.name">X-DevTools-Emulate-Network-Conditions-Client-Id</stringProp>
                                          <stringProp name="Header.value">a88c0755-8e77-412e-bac1-0e7fd44e999b</stringProp>
                                        </elementProp>
                                        <elementProp name="User-Agent" elementType="Header">
                                          <stringProp name="Header.name">User-Agent</stringProp>
                                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                                        </elementProp>
                                        <elementProp name="Authorization" elementType="Header">
                                          <stringProp name="Header.name">Authorization</stringProp>
                                          <stringProp name="Header.value">bearer V_UbgBWUpDdaMEmDcPeWYJAx41khyUMk66xpzTmsnc4jyDMs91zbRuRJUynaWMF-bgLQ8Vo884eA00i5Q8sTl-ZMCL7bQH1f975pfg3NRSeHHgS-qdOWZ2ld1MOpdF-7YHxF7pNLR9KAern85LbIjaxMcxBg3H5Pa9mKvOLjzVbnz7u5eQRvWhczu3G5H6NMmuzjUhULyqUz2HA6uNgracUepIe7OyIAOYBe_dGQWLEsX2HERC_6Vu3sSwTNgBmq9Kghs-mX5Alfh_xnb3grVM1agcFiVna_9-TYCXOTAc9FcGpUy4QLdYjv42cieeVb0ZO0BdIvWORK7HNXbGJjShmtgmmyxaNZGH8zBdo0P21Po17NSDnIeMQJRP2NL1ey3z1sd9Syk6_5Ky1TLebknq-rqyUnbZdN9QdgWjo0cIFhyY-nACFIDZR7Dx3PJbQB8PnXYrcpDaEVXKqM_mO18wTdY8oPcD2hdRI0cHF2JiEeZSQLxnqR2Y-s3cLho7w3TC2uNDorU6ULpLWalWTO1vIMu79yNDhUjGQxGU-sLwxv2sZ5m7Gx5WWkTvjsgUOBE4w3AaPGnYmvuRNd0bB9FRjfewLzV9dC-GUK5ga9E3opYNhyDTLYuG0K2DXf72BraVs7Ns1aT8ZePgTz7rkWNCH0r-er10vcbwWiYDBfQjE</stringProp>
                                        </elementProp>
                                        <elementProp name="Referer" elementType="Header">
                                          <stringProp name="Header.name">Referer</stringProp>
                                          <stringProp name="Header.value">https://loadtest.rhinoapps.com/Rhino/</stringProp>
                                        </elementProp>
                                        <elementProp name="Accept-Encoding" elementType="Header">
                                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                                          <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                                        </elementProp>
                                        <elementProp name="Accept-Language" elementType="Header">
                                          <stringProp name="Header.name">Accept-Language</stringProp>
                                          <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                                        </elementProp>
                                      </collectionProp>
                                    </HeaderManager>
                                    <hashTree/>
                                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                                      <stringProp name="RandomTimer.range">0.4</stringProp>
                                      <stringProp name="ConstantTimer.delay">0.8</stringProp>
                                    </UniformRandomTimer>
                                    <hashTree/>
                                  </hashTree>
                                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://loadtest.rhinoapps.com/rhinoApi/api/UserCostAmts/GetWithTypeAndCodeActiveByCostCode/4e6dde3a-47e6-484e-ae4c-93bb647f05a1?t=1490856884730" enabled="false">
                                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                      <collectionProp name="Arguments.arguments">
                                        <elementProp name="t" elementType="HTTPArgument">
                                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                          <stringProp name="Argument.name">t</stringProp>
                                          <stringProp name="Argument.value">1490856884730</stringProp>
                                          <stringProp name="Argument.metadata">=</stringProp>
                                        </elementProp>
                                      </collectionProp>
                                    </elementProp>
                                    <stringProp name="HTTPSampler.domain">loadtest.rhinoapps.com</stringProp>
                                    <stringProp name="HTTPSampler.port"></stringProp>
                                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                    <stringProp name="HTTPSampler.path">rhinoApi/api/UserCostAmts/GetWithTypeAndCodeActiveByCostCode/4e6dde3a-47e6-484e-ae4c-93bb647f05a1</stringProp>
                                    <stringProp name="HTTPSampler.method">GET</stringProp>
                                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                  </HTTPSamplerProxy>
                                  <hashTree>
                                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                                      <collectionProp name="HeaderManager.headers">
                                        <elementProp name="Accept" elementType="Header">
                                          <stringProp name="Header.name">Accept</stringProp>
                                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                                        </elementProp>
                                        <elementProp name="X-DevTools-Emulate-Network-Conditions-Client-Id" elementType="Header">
                                          <stringProp name="Header.name">X-DevTools-Emulate-Network-Conditions-Client-Id</stringProp>
                                          <stringProp name="Header.value">a88c0755-8e77-412e-bac1-0e7fd44e999b</stringProp>
                                        </elementProp>
                                        <elementProp name="User-Agent" elementType="Header">
                                          <stringProp name="Header.name">User-Agent</stringProp>
                                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                                        </elementProp>
                                        <elementProp name="Authorization" elementType="Header">
                                          <stringProp name="Header.name">Authorization</stringProp>
                                          <stringProp name="Header.value">bearer V_UbgBWUpDdaMEmDcPeWYJAx41khyUMk66xpzTmsnc4jyDMs91zbRuRJUynaWMF-bgLQ8Vo884eA00i5Q8sTl-ZMCL7bQH1f975pfg3NRSeHHgS-qdOWZ2ld1MOpdF-7YHxF7pNLR9KAern85LbIjaxMcxBg3H5Pa9mKvOLjzVbnz7u5eQRvWhczu3G5H6NMmuzjUhULyqUz2HA6uNgracUepIe7OyIAOYBe_dGQWLEsX2HERC_6Vu3sSwTNgBmq9Kghs-mX5Alfh_xnb3grVM1agcFiVna_9-TYCXOTAc9FcGpUy4QLdYjv42cieeVb0ZO0BdIvWORK7HNXbGJjShmtgmmyxaNZGH8zBdo0P21Po17NSDnIeMQJRP2NL1ey3z1sd9Syk6_5Ky1TLebknq-rqyUnbZdN9QdgWjo0cIFhyY-nACFIDZR7Dx3PJbQB8PnXYrcpDaEVXKqM_mO18wTdY8oPcD2hdRI0cHF2JiEeZSQLxnqR2Y-s3cLho7w3TC2uNDorU6ULpLWalWTO1vIMu79yNDhUjGQxGU-sLwxv2sZ5m7Gx5WWkTvjsgUOBE4w3AaPGnYmvuRNd0bB9FRjfewLzV9dC-GUK5ga9E3opYNhyDTLYuG0K2DXf72BraVs7Ns1aT8ZePgTz7rkWNCH0r-er10vcbwWiYDBfQjE</stringProp>
                                        </elementProp>
                                        <elementProp name="Referer" elementType="Header">
                                          <stringProp name="Header.name">Referer</stringProp>
                                          <stringProp name="Header.value">https://loadtest.rhinoapps.com/Rhino/</stringProp>
                                        </elementProp>
                                        <elementProp name="Accept-Encoding" elementType="Header">
                                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                                          <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                                        </elementProp>
                                        <elementProp name="Accept-Language" elementType="Header">
                                          <stringProp name="Header.name">Accept-Language</stringProp>
                                          <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                                        </elementProp>
                                      </collectionProp>
                                    </HeaderManager>
                                    <hashTree/>
                                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                                      <stringProp name="RandomTimer.range">1.2000000000000002</stringProp>
                                      <stringProp name="ConstantTimer.delay">2.4000000000000004</stringProp>
                                    </UniformRandomTimer>
                                    <hashTree/>
                                  </hashTree>
                                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://loadtest.rhinoapps.com/Rhino/commonViews/timesheetMemberListWeekView.html?t=1490856884727" enabled="false">
                                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                      <collectionProp name="Arguments.arguments">
                                        <elementProp name="t" elementType="HTTPArgument">
                                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                          <stringProp name="Argument.name">t</stringProp>
                                          <stringProp name="Argument.value">1490856884727</stringProp>
                                          <stringProp name="Argument.metadata">=</stringProp>
                                        </elementProp>
                                      </collectionProp>
                                    </elementProp>
                                    <stringProp name="HTTPSampler.domain">loadtest.rhinoapps.com</stringProp>
                                    <stringProp name="HTTPSampler.port"></stringProp>
                                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                    <stringProp name="HTTPSampler.path">Rhino/commonViews/timesheetMemberListWeekView.html</stringProp>
                                    <stringProp name="HTTPSampler.method">GET</stringProp>
                                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                  </HTTPSamplerProxy>
                                  <hashTree>
                                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                                      <collectionProp name="HeaderManager.headers">
                                        <elementProp name="Accept" elementType="Header">
                                          <stringProp name="Header.name">Accept</stringProp>
                                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                                        </elementProp>
                                        <elementProp name="X-DevTools-Emulate-Network-Conditions-Client-Id" elementType="Header">
                                          <stringProp name="Header.name">X-DevTools-Emulate-Network-Conditions-Client-Id</stringProp>
                                          <stringProp name="Header.value">a88c0755-8e77-412e-bac1-0e7fd44e999b</stringProp>
                                        </elementProp>
                                        <elementProp name="User-Agent" elementType="Header">
                                          <stringProp name="Header.name">User-Agent</stringProp>
                                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                                        </elementProp>
                                        <elementProp name="Authorization" elementType="Header">
                                          <stringProp name="Header.name">Authorization</stringProp>
                                          <stringProp name="Header.value">bearer V_UbgBWUpDdaMEmDcPeWYJAx41khyUMk66xpzTmsnc4jyDMs91zbRuRJUynaWMF-bgLQ8Vo884eA00i5Q8sTl-ZMCL7bQH1f975pfg3NRSeHHgS-qdOWZ2ld1MOpdF-7YHxF7pNLR9KAern85LbIjaxMcxBg3H5Pa9mKvOLjzVbnz7u5eQRvWhczu3G5H6NMmuzjUhULyqUz2HA6uNgracUepIe7OyIAOYBe_dGQWLEsX2HERC_6Vu3sSwTNgBmq9Kghs-mX5Alfh_xnb3grVM1agcFiVna_9-TYCXOTAc9FcGpUy4QLdYjv42cieeVb0ZO0BdIvWORK7HNXbGJjShmtgmmyxaNZGH8zBdo0P21Po17NSDnIeMQJRP2NL1ey3z1sd9Syk6_5Ky1TLebknq-rqyUnbZdN9QdgWjo0cIFhyY-nACFIDZR7Dx3PJbQB8PnXYrcpDaEVXKqM_mO18wTdY8oPcD2hdRI0cHF2JiEeZSQLxnqR2Y-s3cLho7w3TC2uNDorU6ULpLWalWTO1vIMu79yNDhUjGQxGU-sLwxv2sZ5m7Gx5WWkTvjsgUOBE4w3AaPGnYmvuRNd0bB9FRjfewLzV9dC-GUK5ga9E3opYNhyDTLYuG0K2DXf72BraVs7Ns1aT8ZePgTz7rkWNCH0r-er10vcbwWiYDBfQjE</stringProp>
                                        </elementProp>
                                        <elementProp name="Referer" elementType="Header">
                                          <stringProp name="Header.name">Referer</stringProp>
                                          <stringProp name="Header.value">https://loadtest.rhinoapps.com/Rhino/</stringProp>
                                        </elementProp>
                                        <elementProp name="Accept-Encoding" elementType="Header">
                                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                                          <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                                        </elementProp>
                                        <elementProp name="Accept-Language" elementType="Header">
                                          <stringProp name="Header.name">Accept-Language</stringProp>
                                          <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                                        </elementProp>
                                      </collectionProp>
                                    </HeaderManager>
                                    <hashTree/>
                                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                                      <stringProp name="RandomTimer.range">134.8</stringProp>
                                      <stringProp name="ConstantTimer.delay">269.6</stringProp>
                                    </UniformRandomTimer>
                                    <hashTree/>
                                  </hashTree>
                                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://loadtest.rhinoapps.com/rhinoApi/api/Timesheets/GetTimesheetsWithPeriod?from=2017-03-19T17:00:00.000Z&amp;isGetAdminOnly=true&amp;t=1490856885405&amp;to=2017-03-26T16:59:59.000Z&amp;userId=558b18d4-0629-464a-8b49-0c08258584d9" enabled="false">
                                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                      <collectionProp name="Arguments.arguments">
                                        <elementProp name="isGetAdminOnly" elementType="HTTPArgument">
                                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                          <stringProp name="Argument.name">isGetAdminOnly</stringProp>
                                          <stringProp name="Argument.value">true</stringProp>
                                          <stringProp name="Argument.metadata">=</stringProp>
                                        </elementProp>
                                        <elementProp name="from" elementType="HTTPArgument">
                                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                          <stringProp name="Argument.name">from</stringProp>
                                          <stringProp name="Argument.value">2017-03-19T17:00:00.000Z</stringProp>
                                          <stringProp name="Argument.metadata">=</stringProp>
                                        </elementProp>
                                        <elementProp name="to" elementType="HTTPArgument">
                                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                          <stringProp name="Argument.name">to</stringProp>
                                          <stringProp name="Argument.value">2017-03-26T16:59:59.000Z</stringProp>
                                          <stringProp name="Argument.metadata">=</stringProp>
                                        </elementProp>
                                        <elementProp name="t" elementType="HTTPArgument">
                                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                          <stringProp name="Argument.name">t</stringProp>
                                          <stringProp name="Argument.value">1490856885405</stringProp>
                                          <stringProp name="Argument.metadata">=</stringProp>
                                        </elementProp>
                                        <elementProp name="userId" elementType="HTTPArgument">
                                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                          <stringProp name="Argument.name">userId</stringProp>
                                          <stringProp name="Argument.value">558b18d4-0629-464a-8b49-0c08258584d9</stringProp>
                                          <stringProp name="Argument.metadata">=</stringProp>
                                        </elementProp>
                                      </collectionProp>
                                    </elementProp>
                                    <stringProp name="HTTPSampler.domain">loadtest.rhinoapps.com</stringProp>
                                    <stringProp name="HTTPSampler.port"></stringProp>
                                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                    <stringProp name="HTTPSampler.path">rhinoApi/api/Timesheets/GetTimesheetsWithPeriod</stringProp>
                                    <stringProp name="HTTPSampler.method">GET</stringProp>
                                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                  </HTTPSamplerProxy>
                                  <hashTree>
                                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                                      <collectionProp name="HeaderManager.headers">
                                        <elementProp name="Accept" elementType="Header">
                                          <stringProp name="Header.name">Accept</stringProp>
                                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                                        </elementProp>
                                        <elementProp name="X-DevTools-Emulate-Network-Conditions-Client-Id" elementType="Header">
                                          <stringProp name="Header.name">X-DevTools-Emulate-Network-Conditions-Client-Id</stringProp>
                                          <stringProp name="Header.value">a88c0755-8e77-412e-bac1-0e7fd44e999b</stringProp>
                                        </elementProp>
                                        <elementProp name="User-Agent" elementType="Header">
                                          <stringProp name="Header.name">User-Agent</stringProp>
                                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                                        </elementProp>
                                        <elementProp name="Authorization" elementType="Header">
                                          <stringProp name="Header.name">Authorization</stringProp>
                                          <stringProp name="Header.value">bearer V_UbgBWUpDdaMEmDcPeWYJAx41khyUMk66xpzTmsnc4jyDMs91zbRuRJUynaWMF-bgLQ8Vo884eA00i5Q8sTl-ZMCL7bQH1f975pfg3NRSeHHgS-qdOWZ2ld1MOpdF-7YHxF7pNLR9KAern85LbIjaxMcxBg3H5Pa9mKvOLjzVbnz7u5eQRvWhczu3G5H6NMmuzjUhULyqUz2HA6uNgracUepIe7OyIAOYBe_dGQWLEsX2HERC_6Vu3sSwTNgBmq9Kghs-mX5Alfh_xnb3grVM1agcFiVna_9-TYCXOTAc9FcGpUy4QLdYjv42cieeVb0ZO0BdIvWORK7HNXbGJjShmtgmmyxaNZGH8zBdo0P21Po17NSDnIeMQJRP2NL1ey3z1sd9Syk6_5Ky1TLebknq-rqyUnbZdN9QdgWjo0cIFhyY-nACFIDZR7Dx3PJbQB8PnXYrcpDaEVXKqM_mO18wTdY8oPcD2hdRI0cHF2JiEeZSQLxnqR2Y-s3cLho7w3TC2uNDorU6ULpLWalWTO1vIMu79yNDhUjGQxGU-sLwxv2sZ5m7Gx5WWkTvjsgUOBE4w3AaPGnYmvuRNd0bB9FRjfewLzV9dC-GUK5ga9E3opYNhyDTLYuG0K2DXf72BraVs7Ns1aT8ZePgTz7rkWNCH0r-er10vcbwWiYDBfQjE</stringProp>
                                        </elementProp>
                                        <elementProp name="Referer" elementType="Header">
                                          <stringProp name="Header.name">Referer</stringProp>
                                          <stringProp name="Header.value">https://loadtest.rhinoapps.com/Rhino/</stringProp>
                                        </elementProp>
                                        <elementProp name="Accept-Encoding" elementType="Header">
                                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                                          <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                                        </elementProp>
                                        <elementProp name="Accept-Language" elementType="Header">
                                          <stringProp name="Header.name">Accept-Language</stringProp>
                                          <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                                        </elementProp>
                                      </collectionProp>
                                    </HeaderManager>
                                    <hashTree/>
                                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                                      <stringProp name="RandomTimer.range">134.8</stringProp>
                                      <stringProp name="ConstantTimer.delay">269.6</stringProp>
                                    </UniformRandomTimer>
                                    <hashTree/>
                                  </hashTree>
                                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://loadtest.rhinoapps.com/Rhino/language/en/views/web/timesheetList.html?t=1490856884727" enabled="false">
                                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                      <collectionProp name="Arguments.arguments">
                                        <elementProp name="t" elementType="HTTPArgument">
                                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                          <stringProp name="Argument.name">t</stringProp>
                                          <stringProp name="Argument.value">1490856884727</stringProp>
                                          <stringProp name="Argument.metadata">=</stringProp>
                                        </elementProp>
                                      </collectionProp>
                                    </elementProp>
                                    <stringProp name="HTTPSampler.domain">loadtest.rhinoapps.com</stringProp>
                                    <stringProp name="HTTPSampler.port"></stringProp>
                                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                    <stringProp name="HTTPSampler.path">Rhino/language/en/views/web/timesheetList.html</stringProp>
                                    <stringProp name="HTTPSampler.method">GET</stringProp>
                                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                  </HTTPSamplerProxy>
                                  <hashTree>
                                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                                      <collectionProp name="HeaderManager.headers">
                                        <elementProp name="Accept" elementType="Header">
                                          <stringProp name="Header.name">Accept</stringProp>
                                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                                        </elementProp>
                                        <elementProp name="X-DevTools-Emulate-Network-Conditions-Client-Id" elementType="Header">
                                          <stringProp name="Header.name">X-DevTools-Emulate-Network-Conditions-Client-Id</stringProp>
                                          <stringProp name="Header.value">a88c0755-8e77-412e-bac1-0e7fd44e999b</stringProp>
                                        </elementProp>
                                        <elementProp name="User-Agent" elementType="Header">
                                          <stringProp name="Header.name">User-Agent</stringProp>
                                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                                        </elementProp>
                                        <elementProp name="Authorization" elementType="Header">
                                          <stringProp name="Header.name">Authorization</stringProp>
                                          <stringProp name="Header.value">bearer V_UbgBWUpDdaMEmDcPeWYJAx41khyUMk66xpzTmsnc4jyDMs91zbRuRJUynaWMF-bgLQ8Vo884eA00i5Q8sTl-ZMCL7bQH1f975pfg3NRSeHHgS-qdOWZ2ld1MOpdF-7YHxF7pNLR9KAern85LbIjaxMcxBg3H5Pa9mKvOLjzVbnz7u5eQRvWhczu3G5H6NMmuzjUhULyqUz2HA6uNgracUepIe7OyIAOYBe_dGQWLEsX2HERC_6Vu3sSwTNgBmq9Kghs-mX5Alfh_xnb3grVM1agcFiVna_9-TYCXOTAc9FcGpUy4QLdYjv42cieeVb0ZO0BdIvWORK7HNXbGJjShmtgmmyxaNZGH8zBdo0P21Po17NSDnIeMQJRP2NL1ey3z1sd9Syk6_5Ky1TLebknq-rqyUnbZdN9QdgWjo0cIFhyY-nACFIDZR7Dx3PJbQB8PnXYrcpDaEVXKqM_mO18wTdY8oPcD2hdRI0cHF2JiEeZSQLxnqR2Y-s3cLho7w3TC2uNDorU6ULpLWalWTO1vIMu79yNDhUjGQxGU-sLwxv2sZ5m7Gx5WWkTvjsgUOBE4w3AaPGnYmvuRNd0bB9FRjfewLzV9dC-GUK5ga9E3opYNhyDTLYuG0K2DXf72BraVs7Ns1aT8ZePgTz7rkWNCH0r-er10vcbwWiYDBfQjE</stringProp>
                                        </elementProp>
                                        <elementProp name="Referer" elementType="Header">
                                          <stringProp name="Header.name">Referer</stringProp>
                                          <stringProp name="Header.value">https://loadtest.rhinoapps.com/Rhino/</stringProp>
                                        </elementProp>
                                        <elementProp name="Accept-Encoding" elementType="Header">
                                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                                          <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                                        </elementProp>
                                        <elementProp name="Accept-Language" elementType="Header">
                                          <stringProp name="Header.name">Accept-Language</stringProp>
                                          <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                                        </elementProp>
                                      </collectionProp>
                                    </HeaderManager>
                                    <hashTree/>
                                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                                      <stringProp name="RandomTimer.range">168.4</stringProp>
                                      <stringProp name="ConstantTimer.delay">336.8</stringProp>
                                    </UniformRandomTimer>
                                    <hashTree/>
                                  </hashTree>
                                </hashTree>
                              </hashTree>
                              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="87.Approve_Timesheet" enabled="true">
                                <boolProp name="TransactionController.includeTimers">false</boolProp>
                                <boolProp name="TransactionController.parent">true</boolProp>
                              </TransactionController>
                              <hashTree>
                                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Approve_Timesheet" enabled="true">
                                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                    <collectionProp name="Arguments.arguments"/>
                                  </elementProp>
                                  <stringProp name="HTTPSampler.domain"></stringProp>
                                  <stringProp name="HTTPSampler.port"></stringProp>
                                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.protocol"></stringProp>
                                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                  <stringProp name="HTTPSampler.path">${apiPath}/api/TimesheetSubmissions/Approval/${TimesheetIdS}</stringProp>
                                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                </HTTPSamplerProxy>
                                <hashTree>
                                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                                    <collectionProp name="HeaderManager.headers">
                                      <elementProp name="" elementType="Header">
                                        <stringProp name="Header.name">Authorization</stringProp>
                                        <stringProp name="Header.value">bearer ${token}</stringProp>
                                      </elementProp>
                                      <elementProp name="Accept" elementType="Header">
                                        <stringProp name="Header.name">Accept</stringProp>
                                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                                      </elementProp>
                                      <elementProp name="User-Agent" elementType="Header">
                                        <stringProp name="Header.name">User-Agent</stringProp>
                                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                                      </elementProp>
                                      <elementProp name="Accept-Encoding" elementType="Header">
                                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                                      </elementProp>
                                      <elementProp name="Accept-Language" elementType="Header">
                                        <stringProp name="Header.name">Accept-Language</stringProp>
                                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                                      </elementProp>
                                    </collectionProp>
                                  </HeaderManager>
                                  <hashTree/>
                                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_timesheetIdA" enabled="true">
                                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                                    <stringProp name="RegexExtractor.refname">TimesheetIdA</stringProp>
                                    <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                                    <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                                    <stringProp name="Sample.scope">all</stringProp>
                                  </RegexExtractor>
                                  <hashTree/>
                                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                                    <stringProp name="ConstantTimer.delay">2000</stringProp>
                                    <stringProp name="RandomTimer.range">4000</stringProp>
                                  </UniformRandomTimer>
                                  <hashTree/>
                                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                                    <stringProp name="DurationAssertion.duration">3000</stringProp>
                                  </DurationAssertion>
                                  <hashTree/>
                                </hashTree>
                              </hashTree>
                            </hashTree>
                            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                              <stringProp name="IfController.condition">&quot;${submitTS_msg}&quot; != &quot;Successful&quot;</stringProp>
                              <boolProp name="IfController.evaluateAll">false</boolProp>
                            </IfController>
                            <hashTree>
                              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Edit_Timesheet" enabled="true">
                                <boolProp name="TransactionController.includeTimers">false</boolProp>
                                <boolProp name="TransactionController.parent">true</boolProp>
                              </TransactionController>
                              <hashTree>
                                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                                  <collectionProp name="HeaderManager.headers">
                                    <elementProp name="" elementType="Header">
                                      <stringProp name="Header.name">Authorization</stringProp>
                                      <stringProp name="Header.value">bearer ${token}</stringProp>
                                    </elementProp>
                                    <elementProp name="User-Agent" elementType="Header">
                                      <stringProp name="Header.name">User-Agent</stringProp>
                                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                                    </elementProp>
                                    <elementProp name="Accept" elementType="Header">
                                      <stringProp name="Header.name">Accept</stringProp>
                                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                                    </elementProp>
                                    <elementProp name="Accept-Encoding" elementType="Header">
                                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                                      <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                                    </elementProp>
                                    <elementProp name="Accept-Language" elementType="Header">
                                      <stringProp name="Header.name">Accept-Language</stringProp>
                                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                                    </elementProp>
                                  </collectionProp>
                                </HeaderManager>
                                <hashTree/>
                                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="timesheetFormEdit" enabled="true">
                                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                    <collectionProp name="Arguments.arguments"/>
                                  </elementProp>
                                  <stringProp name="HTTPSampler.domain"></stringProp>
                                  <stringProp name="HTTPSampler.port"></stringProp>
                                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.protocol"></stringProp>
                                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                  <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/timesheetFormEdit.html</stringProp>
                                  <stringProp name="HTTPSampler.method">GET</stringProp>
                                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                </HTTPSamplerProxy>
                                <hashTree/>
                                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTasks" enabled="true">
                                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                    <collectionProp name="Arguments.arguments"/>
                                  </elementProp>
                                  <stringProp name="HTTPSampler.domain"></stringProp>
                                  <stringProp name="HTTPSampler.port"></stringProp>
                                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                  <stringProp name="HTTPSampler.protocol"></stringProp>
                                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                  <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTasks</stringProp>
                                  <stringProp name="HTTPSampler.method">GET</stringProp>
                                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                </HTTPSamplerProxy>
                                <hashTree>
                                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                                    <stringProp name="RandomTimer.range">3000</stringProp>
                                    <stringProp name="ConstantTimer.delay">1000</stringProp>
                                  </UniformRandomTimer>
                                  <hashTree/>
                                </hashTree>
                              </hashTree>
                              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE TimeSheets " enabled="true">
                                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                  <collectionProp name="Arguments.arguments"/>
                                </elementProp>
                                <stringProp name="HTTPSampler.domain"></stringProp>
                                <stringProp name="HTTPSampler.port"></stringProp>
                                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                <stringProp name="HTTPSampler.protocol"></stringProp>
                                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                <stringProp name="HTTPSampler.path">${apiPath}/api/TimeSheets/${timesheetId}</stringProp>
                                <stringProp name="HTTPSampler.method">DELETE</stringProp>
                                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                                <boolProp name="HTTPSampler.monitor">false</boolProp>
                                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                              </HTTPSamplerProxy>
                              <hashTree>
                                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                                  <collectionProp name="HeaderManager.headers">
                                    <elementProp name="" elementType="Header">
                                      <stringProp name="Header.name">Authorization</stringProp>
                                      <stringProp name="Header.value">bearer ${token}</stringProp>
                                    </elementProp>
                                    <elementProp name="User-Agent" elementType="Header">
                                      <stringProp name="Header.name">User-Agent</stringProp>
                                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                                    </elementProp>
                                    <elementProp name="Accept" elementType="Header">
                                      <stringProp name="Header.name">Accept</stringProp>
                                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                                    </elementProp>
                                    <elementProp name="Accept-Encoding" elementType="Header">
                                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                                      <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                                    </elementProp>
                                    <elementProp name="Accept-Language" elementType="Header">
                                      <stringProp name="Header.name">Accept-Language</stringProp>
                                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                                    </elementProp>
                                  </collectionProp>
                                </HeaderManager>
                                <hashTree/>
                                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                                  <stringProp name="RandomTimer.range">5000</stringProp>
                                  <stringProp name="ConstantTimer.delay">3000</stringProp>
                                </UniformRandomTimer>
                                <hashTree/>
                              </hashTree>
                            </hashTree>
                          </hashTree>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transaction Expense" enabled="true"/>
                  <hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="80.Visit_Expense_page" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                          </elementProp>
                          <elementProp name="Authorization" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Visit_Expense_page" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${rhinoPath}/#/expense</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                          <stringProp name="DurationAssertion.duration">3000</stringProp>
                        </DurationAssertion>
                        <hashTree/>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                          <stringProp name="ConstantTimer.delay">1000</stringProp>
                          <stringProp name="RandomTimer.range">3000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="expenseMemberView" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/expenseMemberView.html</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Load_Expense_information" enabled="true"/>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ExpenseTypes" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/ExpenseTypes</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_expenseTypeName" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                            <stringProp name="RegexExtractor.refname">expenseTypeName</stringProp>
                            <stringProp name="RegexExtractor.regex">&quot;expenseTypeName&quot;:&quot;(.+?)&quot;</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                            <stringProp name="RegexExtractor.match_number">1</stringProp>
                            <stringProp name="Sample.scope">all</stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_expenseTypeId" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                            <stringProp name="RegexExtractor.refname">expenseTypeId</stringProp>
                            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                            <stringProp name="RegexExtractor.match_number">1</stringProp>
                            <stringProp name="Sample.scope">all</stringProp>
                          </RegexExtractor>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetProjectsWithLive" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetProjectsWithLive</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree/>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserProfiles" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/UserProfiles</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree/>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="isGetAdminOnly" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">isGetAdminOnly</stringProp>
                                <stringProp name="Argument.value">true</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="from" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">from</stringProp>
                                <stringProp name="Argument.value">${fromDate}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="searchTerm" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.value"></stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                <stringProp name="Argument.name">searchTerm</stringProp>
                              </elementProp>
                              <elementProp name="userId" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">userId</stringProp>
                                <stringProp name="Argument.value">${userProfileId}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/Expenses/Search</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree/>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="expenseList" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/expenseList.html</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree/>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ExpenseTypes" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/ExpenseTypes</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                            <stringProp name="RandomTimer.range">3000</stringProp>
                            <stringProp name="ConstantTimer.delay">1000</stringProp>
                          </UniformRandomTimer>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                      <stringProp name="IfController.condition">&quot;${expenseTypeId}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${expenseTypeId}&quot; != &quot;\${expenseTypeId}&quot;</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                        <stringProp name="DurationAssertion.duration">3000</stringProp>
                      </DurationAssertion>
                      <hashTree/>
                      <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="81.Click_Add_Expense" enabled="true">
                        <boolProp name="TransactionController.includeTimers">false</boolProp>
                        <boolProp name="TransactionController.parent">true</boolProp>
                      </TransactionController>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                            </elementProp>
                            <elementProp name="Authorization" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">bearer ${token}</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Add_Expense" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/expenseFormAdd.html</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                            <stringProp name="DurationAssertion.duration">3000</stringProp>
                          </DurationAssertion>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserProfiles" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/UserProfiles</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree/>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ExpenseTypes" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/ExpenseTypes</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_expenseTypeName" enabled="false">
                            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                            <stringProp name="RegexExtractor.refname">expenseTypeName</stringProp>
                            <stringProp name="RegexExtractor.regex">&quot;expenseTypeName&quot;:&quot;(.+?)&quot;</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                            <stringProp name="RegexExtractor.match_number">1</stringProp>
                            <stringProp name="Sample.scope">all</stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_expenseTypeId" enabled="false">
                            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                            <stringProp name="RegexExtractor.refname">expenseTypeId</stringProp>
                            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                            <stringProp name="RegexExtractor.match_number">1</stringProp>
                            <stringProp name="Sample.scope">all</stringProp>
                          </RegexExtractor>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContacts/GetContactsWithEnableSupplier" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts/GetContactsWithEnableSupplier</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                            <stringProp name="ConstantTimer.delay">1000</stringProp>
                            <stringProp name="RandomTimer.range">3000</stringProp>
                          </UniformRandomTimer>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/UIBuilder" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/UIBuilder</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                            <stringProp name="RandomTimer.range">3000</stringProp>
                            <stringProp name="ConstantTimer.delay">1000</stringProp>
                          </UniformRandomTimer>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                      <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="82.Select_ProjectTask" enabled="true">
                        <boolProp name="TransactionController.includeTimers">false</boolProp>
                        <boolProp name="TransactionController.parent">true</boolProp>
                      </TransactionController>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                            </elementProp>
                            <elementProp name="Authorization" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">bearer ${token}</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTasks" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="filter" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.value">{&quot;projectId&quot;:&quot;${projectId}&quot;}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                <stringProp name="Argument.name">filter</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTasks</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                            <stringProp name="RandomTimer.range">60000</stringProp>
                            <stringProp name="ConstantTimer.delay">10000</stringProp>
                          </UniformRandomTimer>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                      <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="83.Click_Save_expense" enabled="true">
                        <boolProp name="TransactionController.includeTimers">false</boolProp>
                        <boolProp name="TransactionController.parent">true</boolProp>
                      </TransactionController>
                      <hashTree>
                        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - &apos;Travel (Flights, Trains, Parking)&apos;" enabled="true">
                          <stringProp name="IfController.condition">&quot;${expenseTypeName}&quot; == &quot;Travel (Flights, Trains, Parking)&quot;</stringProp>
                          <boolProp name="IfController.evaluateAll">false</boolProp>
                        </IfController>
                        <hashTree>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Save_expense" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                              <collectionProp name="Arguments.arguments">
                                <elementProp name="expenseNetAmt" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">expenseNetAmt</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="chargeable" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">chargeable</stringProp>
                                  <stringProp name="Argument.value">true</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="units" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">units</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="expenseDate" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">expenseDate</stringProp>
                                  <stringProp name="Argument.value">${timeDate}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="paymentType" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">paymentType</stringProp>
                                  <stringProp name="Argument.value">0</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="taxRate2Amount" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">taxRate2Amount</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="projectTaskId" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">projectTaskId</stringProp>
                                  <stringProp name="Argument.value">${projectTaskId}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="taxRate3Amount" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">taxRate3Amount</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="receiptAttachment" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">receiptAttachment</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="supplier" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">supplier</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="taxRate1Amount" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">taxRate1Amount</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="perUnitMultiplier" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">perUnitMultiplier</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="chargeableAmount" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">chargeableAmount</stringProp>
                                  <stringProp name="Argument.value">17</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="expenseTypeId" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">expenseTypeId</stringProp>
                                  <stringProp name="Argument.value">${expenseTypeId}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="userProfileId" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">userProfileId</stringProp>
                                  <stringProp name="Argument.value">${userProfileId}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="expenseNotes" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">expenseNotes</stringProp>
                                  <stringProp name="Argument.value">Travel (Flights, Trains, Parking)&apos;</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="expenseGrossAmt" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">expenseGrossAmt</stringProp>
                                  <stringProp name="Argument.value">17</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="locked" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">locked</stringProp>
                                  <stringProp name="Argument.value">false</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="projectId" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">projectId</stringProp>
                                  <stringProp name="Argument.value">${projectId}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                              </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain"></stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol"></stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">${apiPath}/api/Expenses/PostExpense</stringProp>
                            <stringProp name="HTTPSampler.method">POST</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                            <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            <stringProp name="TestPlan.comments">PostExpense Travel (Flights, Trains, Parking)&apos;</stringProp>
                          </HTTPSamplerProxy>
                          <hashTree>
                            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                              <collectionProp name="HeaderManager.headers">
                                <elementProp name="Accept-Encoding" elementType="Header">
                                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                                  <stringProp name="Header.value">gzip, deflate</stringProp>
                                </elementProp>
                                <elementProp name="User-Agent" elementType="Header">
                                  <stringProp name="Header.name">User-Agent</stringProp>
                                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:51.0) Gecko/20100101 Firefox/51.0</stringProp>
                                </elementProp>
                                <elementProp name="Accept" elementType="Header">
                                  <stringProp name="Header.name">Accept</stringProp>
                                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                                </elementProp>
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">Authorization</stringProp>
                                  <stringProp name="Header.value">bearer ${token}</stringProp>
                                </elementProp>
                                <elementProp name="Accept-Language" elementType="Header">
                                  <stringProp name="Header.name">Accept-Language</stringProp>
                                  <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                                </elementProp>
                              </collectionProp>
                            </HeaderManager>
                            <hashTree/>
                            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="expenseId Extractor" enabled="true">
                              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                              <stringProp name="RegexExtractor.refname">expenseId</stringProp>
                              <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                              <stringProp name="RegexExtractor.template">$1$</stringProp>
                              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                              <stringProp name="RegexExtractor.match_number">1</stringProp>
                              <stringProp name="Sample.scope">all</stringProp>
                            </RegexExtractor>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="get expenseId" enabled="false">
                              <collectionProp name="Asserion.test_strings">
                                <stringProp name="-1820558495">${expenseId}</stringProp>
                              </collectionProp>
                              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                              <boolProp name="Assertion.assume_success">false</boolProp>
                              <intProp name="Assertion.test_type">2</intProp>
                            </ResponseAssertion>
                            <hashTree/>
                            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_message" enabled="true">
                              <stringProp name="RegexExtractor.useHeaders">message</stringProp>
                              <stringProp name="RegexExtractor.refname">message</stringProp>
                              <stringProp name="RegexExtractor.regex">.*&quot;message&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                              <stringProp name="RegexExtractor.template">$1$</stringProp>
                              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                              <stringProp name="RegexExtractor.match_number">1</stringProp>
                              <stringProp name="Sample.scope">all</stringProp>
                            </RegexExtractor>
                            <hashTree/>
                            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                              <stringProp name="RandomTimer.range">5000</stringProp>
                              <stringProp name="ConstantTimer.delay">3000</stringProp>
                            </UniformRandomTimer>
                            <hashTree/>
                          </hashTree>
                        </hashTree>
                        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - &apos;Meals&apos;" enabled="true">
                          <stringProp name="IfController.condition">&quot;${expenseTypeName}&quot; == &quot;Meals&quot;</stringProp>
                          <boolProp name="IfController.evaluateAll">false</boolProp>
                        </IfController>
                        <hashTree>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Save_expense " enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                              <collectionProp name="Arguments.arguments">
                                <elementProp name="expenseNetAmt" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">expenseNetAmt</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="chargeable" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">chargeable</stringProp>
                                  <stringProp name="Argument.value">true</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="units" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">units</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="expenseDate" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">expenseDate</stringProp>
                                  <stringProp name="Argument.value">${timeDate}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="paymentType" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">paymentType</stringProp>
                                  <stringProp name="Argument.value">0</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="taxRate2Amount" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">taxRate2Amount</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="projectTaskId" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">projectTaskId</stringProp>
                                  <stringProp name="Argument.value">${projectTaskId}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="taxRate3Amount" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">taxRate3Amount</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="receiptAttachment" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">receiptAttachment</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="supplier" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">supplier</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="taxRate1Amount" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">taxRate1Amount</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="perUnitMultiplier" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">perUnitMultiplier</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="chargeableAmount" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">chargeableAmount</stringProp>
                                  <stringProp name="Argument.value">14</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="expenseTypeId" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">expenseTypeId</stringProp>
                                  <stringProp name="Argument.value">${expenseTypeId}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="userProfileId" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">userProfileId</stringProp>
                                  <stringProp name="Argument.value">${userProfileId}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="expenseNotes" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">expenseNotes</stringProp>
                                  <stringProp name="Argument.value">Meals</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="expenseGrossAmt" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">expenseGrossAmt</stringProp>
                                  <stringProp name="Argument.value">14</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="locked" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">locked</stringProp>
                                  <stringProp name="Argument.value">false</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="projectId" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">projectId</stringProp>
                                  <stringProp name="Argument.value">${projectId}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                              </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain"></stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol"></stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">${apiPath}/api/Expenses/PostExpense</stringProp>
                            <stringProp name="HTTPSampler.method">POST</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                            <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            <stringProp name="TestPlan.comments">PostExpense</stringProp>
                          </HTTPSamplerProxy>
                          <hashTree>
                            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                              <collectionProp name="HeaderManager.headers">
                                <elementProp name="Accept-Encoding" elementType="Header">
                                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                                  <stringProp name="Header.value">gzip, deflate</stringProp>
                                </elementProp>
                                <elementProp name="User-Agent" elementType="Header">
                                  <stringProp name="Header.name">User-Agent</stringProp>
                                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:51.0) Gecko/20100101 Firefox/51.0</stringProp>
                                </elementProp>
                                <elementProp name="Accept" elementType="Header">
                                  <stringProp name="Header.name">Accept</stringProp>
                                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                                </elementProp>
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">Authorization</stringProp>
                                  <stringProp name="Header.value">bearer ${token}</stringProp>
                                </elementProp>
                                <elementProp name="Accept-Language" elementType="Header">
                                  <stringProp name="Header.name">Accept-Language</stringProp>
                                  <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                                </elementProp>
                              </collectionProp>
                            </HeaderManager>
                            <hashTree/>
                            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="expenseId Extractor" enabled="true">
                              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                              <stringProp name="RegexExtractor.refname">expenseId</stringProp>
                              <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                              <stringProp name="RegexExtractor.template">$1$</stringProp>
                              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                              <stringProp name="RegexExtractor.match_number">1</stringProp>
                              <stringProp name="Sample.scope">all</stringProp>
                            </RegexExtractor>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="get expenseId" enabled="false">
                              <collectionProp name="Asserion.test_strings">
                                <stringProp name="-1820558495">${expenseId}</stringProp>
                              </collectionProp>
                              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                              <boolProp name="Assertion.assume_success">false</boolProp>
                              <intProp name="Assertion.test_type">2</intProp>
                            </ResponseAssertion>
                            <hashTree/>
                            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                              <stringProp name="RandomTimer.range">5000</stringProp>
                              <stringProp name="ConstantTimer.delay">3000</stringProp>
                            </UniformRandomTimer>
                            <hashTree/>
                          </hashTree>
                        </hashTree>
                        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - &apos;Own Car - Mileage @ 45p&apos;" enabled="true">
                          <stringProp name="IfController.condition">&quot;${expenseTypeName}&quot; == &quot;Own Car - Mileage @ 45p&quot;</stringProp>
                          <boolProp name="IfController.evaluateAll">false</boolProp>
                        </IfController>
                        <hashTree>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Save_expense" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                              <collectionProp name="Arguments.arguments">
                                <elementProp name="expenseNetAmt" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">expenseNetAmt</stringProp>
                                  <stringProp name="Argument.value">0.45</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="chargeable" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">chargeable</stringProp>
                                  <stringProp name="Argument.value">true</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="units" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">units</stringProp>
                                  <stringProp name="Argument.value">1</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="expenseDate" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">expenseDate</stringProp>
                                  <stringProp name="Argument.value">${timeDate}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="paymentType" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">paymentType</stringProp>
                                  <stringProp name="Argument.value">0</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="taxRate2Amount" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">taxRate2Amount</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="projectTaskId" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">projectTaskId</stringProp>
                                  <stringProp name="Argument.value">${projectTaskId}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="taxRate3Amount" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">taxRate3Amount</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="receiptAttachment" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">receiptAttachment</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="supplier" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">supplier</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="taxRate1Amount" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">taxRate1Amount</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="perUnitMultiplier" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">perUnitMultiplier</stringProp>
                                  <stringProp name="Argument.value">0.45</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="chargeableAmount" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">chargeableAmount</stringProp>
                                  <stringProp name="Argument.value">0.45</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="expenseTypeId" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">expenseTypeId</stringProp>
                                  <stringProp name="Argument.value">${expenseTypeId}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="userProfileId" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">userProfileId</stringProp>
                                  <stringProp name="Argument.value">${userProfileId}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="expenseNotes" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">expenseNotes</stringProp>
                                  <stringProp name="Argument.value">Own Car - Mileage @ 45p</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="expenseGrossAmt" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">expenseGrossAmt</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="locked" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">locked</stringProp>
                                  <stringProp name="Argument.value">false</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="projectId" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">projectId</stringProp>
                                  <stringProp name="Argument.value">${projectId}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                              </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain"></stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol"></stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">${apiPath}/api/Expenses/PostExpense</stringProp>
                            <stringProp name="HTTPSampler.method">POST</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                            <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            <stringProp name="TestPlan.comments">PostExpense</stringProp>
                          </HTTPSamplerProxy>
                          <hashTree>
                            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                              <collectionProp name="HeaderManager.headers">
                                <elementProp name="Accept-Encoding" elementType="Header">
                                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                                  <stringProp name="Header.value">gzip, deflate</stringProp>
                                </elementProp>
                                <elementProp name="User-Agent" elementType="Header">
                                  <stringProp name="Header.name">User-Agent</stringProp>
                                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:51.0) Gecko/20100101 Firefox/51.0</stringProp>
                                </elementProp>
                                <elementProp name="Accept" elementType="Header">
                                  <stringProp name="Header.name">Accept</stringProp>
                                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                                </elementProp>
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">Authorization</stringProp>
                                  <stringProp name="Header.value">bearer ${token}</stringProp>
                                </elementProp>
                                <elementProp name="Accept-Language" elementType="Header">
                                  <stringProp name="Header.name">Accept-Language</stringProp>
                                  <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                                </elementProp>
                              </collectionProp>
                            </HeaderManager>
                            <hashTree/>
                            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="expenseId Extractor" enabled="true">
                              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                              <stringProp name="RegexExtractor.refname">expenseId</stringProp>
                              <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                              <stringProp name="RegexExtractor.template">$1$</stringProp>
                              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                              <stringProp name="RegexExtractor.match_number">1</stringProp>
                              <stringProp name="Sample.scope">all</stringProp>
                            </RegexExtractor>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="get expenseId" enabled="false">
                              <collectionProp name="Asserion.test_strings">
                                <stringProp name="-1820558495">${expenseId}</stringProp>
                              </collectionProp>
                              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                              <boolProp name="Assertion.assume_success">false</boolProp>
                              <intProp name="Assertion.test_type">2</intProp>
                            </ResponseAssertion>
                            <hashTree/>
                            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                              <stringProp name="RandomTimer.range">5000</stringProp>
                              <stringProp name="ConstantTimer.delay">3000</stringProp>
                            </UniformRandomTimer>
                            <hashTree/>
                          </hashTree>
                        </hashTree>
                        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - &apos;General Purchases&apos;" enabled="true">
                          <stringProp name="IfController.condition">&quot;${expenseTypeName}&quot; == &quot;General Purchases&quot;</stringProp>
                          <boolProp name="IfController.evaluateAll">false</boolProp>
                        </IfController>
                        <hashTree>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Save_expense" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                              <collectionProp name="Arguments.arguments">
                                <elementProp name="expenseNetAmt" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">expenseNetAmt</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="chargeable" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">chargeable</stringProp>
                                  <stringProp name="Argument.value">true</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="units" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">units</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="expenseDate" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">expenseDate</stringProp>
                                  <stringProp name="Argument.value">${timeDate}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="paymentType" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">paymentType</stringProp>
                                  <stringProp name="Argument.value">0</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="taxRate2Amount" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">taxRate2Amount</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="projectTaskId" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">projectTaskId</stringProp>
                                  <stringProp name="Argument.value">${projectTaskId}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="taxRate3Amount" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">taxRate3Amount</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="receiptAttachment" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">receiptAttachment</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="supplier" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">supplier</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="taxRate1Amount" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">taxRate1Amount</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="perUnitMultiplier" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">perUnitMultiplier</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="chargeableAmount" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">chargeableAmount</stringProp>
                                  <stringProp name="Argument.value">12</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="expenseTypeId" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">expenseTypeId</stringProp>
                                  <stringProp name="Argument.value">${expenseTypeId}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="userProfileId" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">userProfileId</stringProp>
                                  <stringProp name="Argument.value">${userProfileId}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="expenseNotes" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">expenseNotes</stringProp>
                                  <stringProp name="Argument.value">Note for add expense General Purchases</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="expenseGrossAmt" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">expenseGrossAmt</stringProp>
                                  <stringProp name="Argument.value">12</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="locked" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">locked</stringProp>
                                  <stringProp name="Argument.value">false</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="projectId" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">projectId</stringProp>
                                  <stringProp name="Argument.value">${projectId}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                              </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain"></stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol"></stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">${apiPath}/api/Expenses/PostExpense</stringProp>
                            <stringProp name="HTTPSampler.method">POST</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                            <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            <stringProp name="TestPlan.comments">PostExpense</stringProp>
                          </HTTPSamplerProxy>
                          <hashTree>
                            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                              <collectionProp name="HeaderManager.headers">
                                <elementProp name="Accept-Encoding" elementType="Header">
                                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                                  <stringProp name="Header.value">gzip, deflate</stringProp>
                                </elementProp>
                                <elementProp name="User-Agent" elementType="Header">
                                  <stringProp name="Header.name">User-Agent</stringProp>
                                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:51.0) Gecko/20100101 Firefox/51.0</stringProp>
                                </elementProp>
                                <elementProp name="Accept" elementType="Header">
                                  <stringProp name="Header.name">Accept</stringProp>
                                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                                </elementProp>
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">Authorization</stringProp>
                                  <stringProp name="Header.value">bearer ${token}</stringProp>
                                </elementProp>
                                <elementProp name="Accept-Language" elementType="Header">
                                  <stringProp name="Header.name">Accept-Language</stringProp>
                                  <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                                </elementProp>
                              </collectionProp>
                            </HeaderManager>
                            <hashTree/>
                            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="expenseId Extractor" enabled="true">
                              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                              <stringProp name="RegexExtractor.refname">expenseId</stringProp>
                              <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                              <stringProp name="RegexExtractor.template">$1$</stringProp>
                              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                              <stringProp name="RegexExtractor.match_number">1</stringProp>
                              <stringProp name="Sample.scope">all</stringProp>
                            </RegexExtractor>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="get expenseId" enabled="false">
                              <collectionProp name="Asserion.test_strings">
                                <stringProp name="-1820558495">${expenseId}</stringProp>
                              </collectionProp>
                              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                              <boolProp name="Assertion.assume_success">false</boolProp>
                              <intProp name="Assertion.test_type">2</intProp>
                            </ResponseAssertion>
                            <hashTree/>
                            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                              <stringProp name="RandomTimer.range">5000</stringProp>
                              <stringProp name="ConstantTimer.delay">3000</stringProp>
                            </UniformRandomTimer>
                            <hashTree/>
                          </hashTree>
                        </hashTree>
                        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - &apos;Accomodation&apos;" enabled="true">
                          <stringProp name="IfController.condition">&quot;${expenseTypeName}&quot; == &quot;Accomodation&quot;</stringProp>
                          <boolProp name="IfController.evaluateAll">false</boolProp>
                        </IfController>
                        <hashTree>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Save_expense" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                              <collectionProp name="Arguments.arguments">
                                <elementProp name="expenseNetAmt" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">expenseNetAmt</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="chargeable" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">chargeable</stringProp>
                                  <stringProp name="Argument.value">true</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="units" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">units</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="expenseDate" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">expenseDate</stringProp>
                                  <stringProp name="Argument.value">${timeDate}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="paymentType" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">paymentType</stringProp>
                                  <stringProp name="Argument.value">0</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="taxRate2Amount" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">taxRate2Amount</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="projectTaskId" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">projectTaskId</stringProp>
                                  <stringProp name="Argument.value">${projectTaskId}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="taxRate3Amount" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">taxRate3Amount</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="receiptAttachment" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">receiptAttachment</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="supplier" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">supplier</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="taxRate1Amount" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">taxRate1Amount</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="perUnitMultiplier" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">perUnitMultiplier</stringProp>
                                  <stringProp name="Argument.value">null</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="chargeableAmount" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">chargeableAmount</stringProp>
                                  <stringProp name="Argument.value">11</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="expenseTypeId" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">expenseTypeId</stringProp>
                                  <stringProp name="Argument.value">${expenseTypeId}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="userProfileId" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">userProfileId</stringProp>
                                  <stringProp name="Argument.value">${userProfileId}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="expenseNotes" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">expenseNotes</stringProp>
                                  <stringProp name="Argument.value">Note for Accomodation</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="expenseGrossAmt" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">expenseGrossAmt</stringProp>
                                  <stringProp name="Argument.value">11</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="locked" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">locked</stringProp>
                                  <stringProp name="Argument.value">false</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="projectId" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">projectId</stringProp>
                                  <stringProp name="Argument.value">${projectId}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                              </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain"></stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol"></stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">${apiPath}/api/Expenses/PostExpense</stringProp>
                            <stringProp name="HTTPSampler.method">POST</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                            <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            <stringProp name="TestPlan.comments">PostExpense</stringProp>
                          </HTTPSamplerProxy>
                          <hashTree>
                            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                              <collectionProp name="HeaderManager.headers">
                                <elementProp name="Accept-Encoding" elementType="Header">
                                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                                  <stringProp name="Header.value">gzip, deflate</stringProp>
                                </elementProp>
                                <elementProp name="User-Agent" elementType="Header">
                                  <stringProp name="Header.name">User-Agent</stringProp>
                                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:51.0) Gecko/20100101 Firefox/51.0</stringProp>
                                </elementProp>
                                <elementProp name="Accept" elementType="Header">
                                  <stringProp name="Header.name">Accept</stringProp>
                                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                                </elementProp>
                                <elementProp name="" elementType="Header">
                                  <stringProp name="Header.name">Authorization</stringProp>
                                  <stringProp name="Header.value">bearer ${token}</stringProp>
                                </elementProp>
                                <elementProp name="Accept-Language" elementType="Header">
                                  <stringProp name="Header.name">Accept-Language</stringProp>
                                  <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                                </elementProp>
                              </collectionProp>
                            </HeaderManager>
                            <hashTree/>
                            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="expenseId Extractor" enabled="true">
                              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                              <stringProp name="RegexExtractor.refname">expenseId</stringProp>
                              <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                              <stringProp name="RegexExtractor.template">$1$</stringProp>
                              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                              <stringProp name="RegexExtractor.match_number">1</stringProp>
                              <stringProp name="Sample.scope">all</stringProp>
                            </RegexExtractor>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="get expenseId" enabled="false">
                              <collectionProp name="Asserion.test_strings">
                                <stringProp name="-1820558495">${expenseId}</stringProp>
                              </collectionProp>
                              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                              <boolProp name="Assertion.assume_success">false</boolProp>
                              <intProp name="Assertion.test_type">2</intProp>
                            </ResponseAssertion>
                            <hashTree/>
                            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                              <stringProp name="ConstantTimer.delay">1000</stringProp>
                              <stringProp name="RandomTimer.range">3000</stringProp>
                            </UniformRandomTimer>
                            <hashTree/>
                          </hashTree>
                        </hashTree>
                        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                          <stringProp name="IfController.condition">&quot;${expenseId}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${expenseId}&quot; != &quot;\${expenseId}&quot;</stringProp>
                          <boolProp name="IfController.evaluateAll">false</boolProp>
                        </IfController>
                        <hashTree>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                              <collectionProp name="Arguments.arguments">
                                <elementProp name="isGetAdminOnly" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">isGetAdminOnly</stringProp>
                                  <stringProp name="Argument.value">true</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="from" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">from</stringProp>
                                  <stringProp name="Argument.value">${fromDate}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                                <elementProp name="searchTerm" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.value"></stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                  <stringProp name="Argument.name">searchTerm</stringProp>
                                </elementProp>
                                <elementProp name="userId" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                  <stringProp name="Argument.name">userId</stringProp>
                                  <stringProp name="Argument.value">${userProfileId}</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                </elementProp>
                              </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain"></stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol"></stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">${apiPath}/api/Expenses/Search</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                            <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          </HTTPSamplerProxy>
                          <hashTree/>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Expenses/${expenseId}" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                              <collectionProp name="Arguments.arguments"/>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain"></stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol"></stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">${apiPath}/api/Expenses/${expenseId}</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                            <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          </HTTPSamplerProxy>
                          <hashTree/>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetFooterCounts/${expenseId}" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                              <collectionProp name="Arguments.arguments"/>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain"></stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol"></stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">${apiPath}/api/Expenses/GetFooterCounts/${expenseId}</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                            <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          </HTTPSamplerProxy>
                          <hashTree/>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="expenseFormDetail" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                              <collectionProp name="Arguments.arguments"/>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain"></stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol"></stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/expenseFormDetail.html</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                            <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          </HTTPSamplerProxy>
                          <hashTree>
                            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                              <stringProp name="RandomTimer.range">3000</stringProp>
                              <stringProp name="ConstantTimer.delay">1000</stringProp>
                            </UniformRandomTimer>
                            <hashTree/>
                          </hashTree>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="84.Visit_Project_page" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Visit_Project_page" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/#/project</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                        <stringProp name="DurationAssertion.duration">3000</stringProp>
                      </DurationAssertion>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="projectView" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/projectView.html</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectStatuses/GetDefaultStatus" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectStatuses/GetDefaultStatus</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTypes/GetDefaultType" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTypes/GetDefaultType</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectActivities" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="filter" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">{&quot;active&quot;:true}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">filter</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectActivities</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/GetWithPaging" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="filter" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">filter</stringProp>
                          </elementProp>
                          <elementProp name="page" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">page</stringProp>
                          </elementProp>
                          <elementProp name="type" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">type</stringProp>
                            <stringProp name="Argument.value">0</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetWithPaging</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/GetWithPaging" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="filter" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">filter</stringProp>
                          </elementProp>
                          <elementProp name="page" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">2</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">page</stringProp>
                          </elementProp>
                          <elementProp name="type" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">type</stringProp>
                            <stringProp name="Argument.value">0</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetWithPaging</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_projectManagerId" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">projectManagerId</stringProp>
                        <stringProp name="RegexExtractor.regex">.*&quot;projectManagerId&quot;:&quot;([^&quot;]+)&quot;.* </stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="Sample.scope">all</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_projectStatusId" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">projectStatusId</stringProp>
                        <stringProp name="RegexExtractor.regex">.*&quot;projectStatusId&quot;:&quot;([^&quot;]+)&quot;.* </stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="Sample.scope">all</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_projectTypeId" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">projectTypeId</stringProp>
                        <stringProp name="RegexExtractor.regex">.*&quot;projectTypeId&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="Sample.scope">all</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="projectList" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/projectList.html</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectStatuses" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectStatuses</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContacts" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTypes" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTypes</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                        <stringProp name="RandomTimer.range">3000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="85.Select_Project" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/${projectId}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/${projectId}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/GetFooterCounts/${projectId}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetFooterCounts/${projectId}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="projectFormDetail" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/projectFormDetail.html</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                        <stringProp name="RandomTimer.range">3000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Add Invoice 03" enabled="true"/>
                  <hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="86.Click_Invoice_icon" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="43.Click_Invoice_icon03" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/invoiceView.html</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                          <stringProp name="DurationAssertion.duration">3000</stringProp>
                        </DurationAssertion>
                        <hashTree/>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="ConstantTimer.delay">1000</stringProp>
                          <stringProp name="RandomTimer.range">3000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Invoices/GetWithPaging?filter=3&amp;page=1&amp;referId=${projectId}&amp;type=3" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="filter" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">3</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">filter</stringProp>
                            </elementProp>
                            <elementProp name="page" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">1</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">page</stringProp>
                            </elementProp>
                            <elementProp name="type" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">3</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">type</stringProp>
                            </elementProp>
                            <elementProp name="referId" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">referId</stringProp>
                              <stringProp name="Argument.value">${projectId}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/Invoices/GetWithPaging</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="ConstantTimer.delay">1000</stringProp>
                          <stringProp name="RandomTimer.range">3000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="87.Click_Add_Invoice03" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/${projectId}" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/${projectId}</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Add_Invoice03" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/invoiceFormAdd.html</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                          <stringProp name="DurationAssertion.duration">3000</stringProp>
                        </DurationAssertion>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContacts" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/UIBuilder" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/UIBuilder</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContactSales/UIBuilder" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContactSales/UIBuilder</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="ConstantTimer.delay">5000</stringProp>
                          <stringProp name="RandomTimer.range">30000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="88.Click_Save Invoice03" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Save_Invoice" enabled="true">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">{&#xd;
  &quot;createdByRhino&quot;: true,&#xd;
  &quot;terms&quot;: &quot;Invoices should be paid within 7 days from the Invoice Date&quot;,&#xd;
  &quot;notes&quot;: &quot;Load-Note - Add invoice for Project with timesheet and expense&quot;,&#xd;
  &quot;invoiceDate&quot;: &quot;${timeDate}&quot;,&#xd;
  &quot;invoiceRef&quot;: &quot;Draft&quot;,&#xd;
  &quot;dueDate&quot;: &quot;${toDate}&quot;,&#xd;
  &quot;projectId&quot;: &quot;${projectId}&quot;,&#xd;
  &quot;description&quot;: &quot;Add invoice for Project with timesheet and expense&quot;,&#xd;
  &quot;companyContactId&quot;: &quot;${contactId}&quot;,&#xd;
  &quot;invoiceDetails&quot;: [],&#xd;
  &quot;totalExpenseAmt&quot;: 0,&#xd;
  &quot;netValue&quot;: 100,&#xd;
  &quot;taxAmt1&quot;: null,&#xd;
  &quot;taxAmt2&quot;: null,&#xd;
  &quot;taxAmt3&quot;: null,&#xd;
  &quot;grossAmt&quot;: 100,&#xd;
  &quot;userProfileId&quot;: &quot;${userProfileId}&quot;,&#xd;
  &quot;taxRate1&quot;: null,&#xd;
  &quot;source&quot;: 3,&#xd;
  &quot;taxRate2&quot;: null,&#xd;
  &quot;taxRate3&quot;: null&#xd;
}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/Invoices</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="TestPlan.comments">Add_Invoice03_for_project_has_TS_and_EX</stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate, br</stringProp>
                            </elementProp>
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">bearer ${token}</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                            </elementProp>
                            <elementProp name="Content-Type" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/json</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="ConstantTimer.delay">2000</stringProp>
                          <stringProp name="RandomTimer.range">5000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Invoice for PWTS&amp;EX" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">invoiceId03</stringProp>
                          <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                          <stringProp name="Sample.scope">all</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                          <stringProp name="DurationAssertion.duration">10000</stringProp>
                        </DurationAssertion>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="68.Click_Save_Invoice*" enabled="false">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">{&#xd;
  &quot;createdByRhino&quot;: true,&#xd;
  &quot;terms&quot;: &quot;Invoices should be paid within 7 days from the Invoice Date&quot;,&#xd;
  &quot;notes&quot;: &quot;Load-Note - Add invoice for Project with timesheet and expense&quot;,&#xd;
  &quot;invoiceDate&quot;: &quot;${timeDate}&quot;,&#xd;
  &quot;invoiceRef&quot;: &quot;Draft&quot;,&#xd;
  &quot;dueDate&quot;: &quot;${toDate}&quot;,&#xd;
  &quot;projectId&quot;: &quot;${projectId}&quot;,&#xd;
  &quot;description&quot;: &quot;Add invoice for Project with timesheet and expense&quot;,&#xd;
  &quot;companyContactId&quot;: &quot;${contactId}&quot;,&#xd;
  &quot;invoiceDetails&quot;: [],&#xd;
  &quot;totalExpenseAmt&quot;: 0,&#xd;
  &quot;netValue&quot;: 100,&#xd;
  &quot;taxAmt1&quot;: null,&#xd;
  &quot;taxAmt2&quot;: null,&#xd;
  &quot;taxAmt3&quot;: null,&#xd;
  &quot;grossAmt&quot;: 100,&#xd;
  &quot;userProfileId&quot;: &quot;${userProfileId}&quot;,&#xd;
  &quot;source&quot;: 3,&#xd;
  &quot;taxRate1&quot;: 0.2,&#xd;
  &quot;taxRate2&quot;: null,&#xd;
  &quot;taxRate3&quot;: null&#xd;
}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/Invoices</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="TestPlan.comments">Add_Invoice03_for_project_has_TS_and_EX</stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate, br</stringProp>
                            </elementProp>
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">bearer ${token}</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                            </elementProp>
                            <elementProp name="Content-Type" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/json</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="ConstantTimer.delay">2000</stringProp>
                          <stringProp name="RandomTimer.range">5000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Invoice for PWTS&amp;EX" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">invoiceId03</stringProp>
                          <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                          <stringProp name="Sample.scope">all</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                          <stringProp name="DurationAssertion.duration">10000</stringProp>
                        </DurationAssertion>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Invoices***" enabled="false">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">{&#xd;
  &quot;createdByRhino&quot;: true,&#xd;
  &quot;terms&quot;: &quot;Invoices should be paid within 7 days from the Invoice Date&quot;,&#xd;
  &quot;notes&quot;: &quot;Registered Company No: 111222333    Bank Sort Code 00-11-00     Bank Account No: 1010101010&quot;,&#xd;
  &quot;invoiceDate&quot;: &quot;2017-03-26T17:00:00.000Z&quot;,&#xd;
  &quot;invoiceRef&quot;: &quot;Draft&quot;,&#xd;
  &quot;dueDate&quot;: &quot;2017-04-02T17:00:00.000Z&quot;,&#xd;
  &quot;projectId&quot;: &quot;973fe143-58cc-4334-b73f-6ad931cd1c08&quot;,&#xd;
  &quot;description&quot;: &quot;P001  - invoice 03&quot;,&#xd;
  &quot;companyContactId&quot;: &quot;df151d99-00c8-4212-b7d4-95bf35f6c616&quot;,&#xd;
  &quot;invoiceDetails&quot;: [&#xd;
    {&#xd;
      &quot;timestamp&quot;: &quot;d17665d0-6c1a-43ed-81e4-d151cd5d3022-0&quot;,&#xd;
      &quot;createdDate&quot;: &quot;2017-03-27T11:50:51.018Z&quot;,&#xd;
      &quot;invoiceDetailType&quot;: &quot;1&quot;,&#xd;
      &quot;invoiceDetailDesc&quot;: &quot;T001&quot;,&#xd;
      &quot;projectTaskId&quot;: &quot;d17665d0-6c1a-43ed-81e4-d151cd5d3022&quot;,&#xd;
      &quot;invoiceDetailNetUnitPrice&quot;: 100,&#xd;
      &quot;invoiceDetailQty&quot;: 0,&#xd;
      &quot;expenses&quot;: [],&#xd;
      &quot;timesheets&quot;: [],&#xd;
      &quot;totalExpense&quot;: 0,&#xd;
      &quot;invoiceDetailTotalNet&quot;: 0,&#xd;
      &quot;taxRate1&quot;: 0.2,&#xd;
      &quot;taxAmt1&quot;: 0,&#xd;
      &quot;grossAmt&quot;: 0&#xd;
    }&#xd;
  ],&#xd;
  &quot;totalExpenseAmt&quot;: 0,&#xd;
  &quot;netValue&quot;: 100,&#xd;
  &quot;taxAmt1&quot;: 0,&#xd;
  &quot;taxAmt2&quot;: null,&#xd;
  &quot;taxAmt3&quot;: null,&#xd;
  &quot;grossAmt&quot;: 100,&#xd;
  &quot;taxRate1&quot;: null,&#xd;
  &quot;userProfileId&quot;: &quot;55103616-81e8-4611-a977-38073b013850&quot;,&#xd;
  &quot;source&quot;: 3,&#xd;
  &quot;taxRate2&quot;: null,&#xd;
  &quot;taxRate3&quot;: null&#xd;
}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">loadtest.rhinoapps.com</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">rhinoApi/api/Invoices</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.image_parser">true</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                            </elementProp>
                            <elementProp name="Origin" elementType="Header">
                              <stringProp name="Header.name">Origin</stringProp>
                              <stringProp name="Header.value">https://loadtest.rhinoapps.com</stringProp>
                            </elementProp>
                            <elementProp name="X-DevTools-Emulate-Network-Conditions-Client-Id" elementType="Header">
                              <stringProp name="Header.name">X-DevTools-Emulate-Network-Conditions-Client-Id</stringProp>
                              <stringProp name="Header.value">b8dd5b5a-3cec-4f37-9370-c2292513434e</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                            </elementProp>
                            <elementProp name="Authorization" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">bearer I_nySF66IDQrVeP5tQflB2uC21SWO09e1xAeam9F9kFPb7O6I4uMHywRYf4hbhV1ar0xWALVuxhiitDCuML2r6X_HFw2ZXtDaRF-IhsCYdAL-x9OP7YjcPWD5Z7VydSUAK3JcwfLoMco3Qf4l9V-32lxdke3sKl0mbVfpEAGXAcFDaWw-PKjbSUKxhWNVeBhrEYmTrrls6Z3xRiAm2u2WA2U90yzvks198SOPkNdKnmw9IPGIq-Xw8HWY9CrzG2d8ix2iM9XhPAoHAuBvIwQCpzvaS5aQNbIbBm4O3fDTfkLQC1PeA82lGK1KfJkyCxadff2DT48RPsFXFh3F0tl1AkQH-DsaqIejWzgZZN5ajsTZa54xY9E_28zgyQHgyhK99LgYvrhxdMOjzENTL1QGRy80zLLE0pgyQyu6DrMnIQ8QLvCWxPK6712vxJlkm_OEe5nc2F8VvIqAouXRW4wO2eTDY0AaoBH7VBIT4Erw5_oDjX0wW2C0AGYLL4qx_B3RJqT000oOiJMekVGvozx1zdrbEWrCTP9HQQdrs_AXTPahDlPKluI_piXrhJRvdXJcf15vZHpzoUasd3V6FndTk6XLTzVY_VMeF3K5V_T1CcdlKcOIt2YHW0AxrwXSpVzLm3iEtkdShVSY_1DFsLQmQ</stringProp>
                            </elementProp>
                            <elementProp name="Content-Type" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/json</stringProp>
                            </elementProp>
                            <elementProp name="Referer" elementType="Header">
                              <stringProp name="Header.name">Referer</stringProp>
                              <stringProp name="Header.value">https://loadtest.rhinoapps.com/Rhino/</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate, br</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="RandomTimer.range">5623.6</stringProp>
                          <stringProp name="ConstantTimer.delay">11247.2</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                        <stringProp name="IfController.condition">&quot;${invoiceId03}&quot; != &quot;NOT FOUND&quot;  &amp;&amp; &quot;${invoiceId03}&quot; != &quot;\${invoiceId03}&quot;</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Invoices/${invoiceId03}" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/Invoices/${invoiceId03}</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree/>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="invoiceList" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/invoiceList.html</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree/>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Invoices/GetFooterCounts/${invoiceId03}" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/Invoices/GetFooterCounts/${invoiceId03}</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree/>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="invoiceFormDetail.html" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/invoiceFormDetail.html</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                            <stringProp name="ConstantTimer.delay">1000</stringProp>
                            <stringProp name="RandomTimer.range">3000</stringProp>
                          </UniformRandomTimer>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                      <stringProp name="IfController.condition">&quot;${invoiceId03}&quot; != &quot;NOT FOUND&quot;  &amp;&amp; &quot;${invoiceId03}&quot; != &quot;\${invoiceId03}&quot;</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="89.Click_Edit_Invoice 03" enabled="true">
                        <boolProp name="TransactionController.includeTimers">false</boolProp>
                        <boolProp name="TransactionController.parent">true</boolProp>
                      </TransactionController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="invoiceFormEdit.html" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/invoiceFormEdit.html</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                            <stringProp name="ConstantTimer.delay">1000</stringProp>
                            <stringProp name="RandomTimer.range">3000</stringProp>
                          </UniformRandomTimer>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                      <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="90.DELETE Invoice 03" enabled="true">
                        <boolProp name="TransactionController.includeTimers">false</boolProp>
                        <boolProp name="TransactionController.parent">true</boolProp>
                      </TransactionController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DEL Invoice for project with Task" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value"></stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/Invoices/${invoiceId03}</stringProp>
                          <stringProp name="HTTPSampler.method">DELETE</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Invoice for Empty project has been deleted" enabled="false">
                            <collectionProp name="Asserion.test_strings">
                              <stringProp name="1259833018">Successful</stringProp>
                            </collectionProp>
                            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                            <boolProp name="Assertion.assume_success">false</boolProp>
                            <intProp name="Assertion.test_type">2</intProp>
                            <stringProp name="TestPlan.comments">Verify Invoice for Empty project has been deleted</stringProp>
                          </ResponseAssertion>
                          <hashTree/>
                          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                            <stringProp name="ConstantTimer.delay">1000</stringProp>
                            <stringProp name="RandomTimer.range">3000</stringProp>
                          </UniformRandomTimer>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="DELETE" enabled="true"/>
                <hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                    <stringProp name="IfController.condition">&quot;${timesheetId}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${timesheetId}&quot; != &quot;\${timesheetId}&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="91.Back to Timesheet page" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                          </elementProp>
                          <elementProp name="Authorization" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="timesheetMemberView" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/timesheetMemberView.html</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Load_Timesheet_information" enabled="true">
                        <boolProp name="TransactionController.includeTimers">false</boolProp>
                        <boolProp name="TransactionController.parent">true</boolProp>
                      </TransactionController>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                            </elementProp>
                            <elementProp name="Authorization" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">bearer ${token}</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_Project" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/Projects</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="TestPlan.comments">get id &amp; projectManagerId</stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="Accept" elementType="Header">
                                <stringProp name="Header.name">Accept</stringProp>
                                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                              </elementProp>
                              <elementProp name="User-Agent" elementType="Header">
                                <stringProp name="Header.name">User-Agent</stringProp>
                                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                              </elementProp>
                              <elementProp name="Authorization" elementType="Header">
                                <stringProp name="Header.name">Authorization</stringProp>
                                <stringProp name="Header.value">bearer ${token}</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Encoding" elementType="Header">
                                <stringProp name="Header.name">Accept-Encoding</stringProp>
                                <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Language" elementType="Header">
                                <stringProp name="Header.name">Accept-Language</stringProp>
                                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_projectId" enabled="false">
                            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                            <stringProp name="RegexExtractor.refname">projectId</stringProp>
                            <stringProp name="RegexExtractor.regex">.*&quot;projectId&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                            <stringProp name="RegexExtractor.match_number">1</stringProp>
                            <stringProp name="Sample.scope">all</stringProp>
                          </RegexExtractor>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_GetProjectsWithLive" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetProjectsWithLive</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="TestPlan.comments">data[14].Projects/GetProjectsWithLive &amp; id</stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="Accept" elementType="Header">
                                <stringProp name="Header.name">Accept</stringProp>
                                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                              </elementProp>
                              <elementProp name="User-Agent" elementType="Header">
                                <stringProp name="Header.name">User-Agent</stringProp>
                                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                              </elementProp>
                              <elementProp name="Authorization" elementType="Header">
                                <stringProp name="Header.name">Authorization</stringProp>
                                <stringProp name="Header.value">bearer ${token}</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Encoding" elementType="Header">
                                <stringProp name="Header.name">Accept-Encoding</stringProp>
                                <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Language" elementType="Header">
                                <stringProp name="Header.name">Accept-Language</stringProp>
                                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_userCostCodeId Default " enabled="false">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/UserCostCodes</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="Accept" elementType="Header">
                                <stringProp name="Header.name">Accept</stringProp>
                                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                              </elementProp>
                              <elementProp name="User-Agent" elementType="Header">
                                <stringProp name="Header.name">User-Agent</stringProp>
                                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                              </elementProp>
                              <elementProp name="Authorization" elementType="Header">
                                <stringProp name="Header.name">Authorization</stringProp>
                                <stringProp name="Header.value">bearer ${token}</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Encoding" elementType="Header">
                                <stringProp name="Header.name">Accept-Encoding</stringProp>
                                <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Language" elementType="Header">
                                <stringProp name="Header.name">Accept-Language</stringProp>
                                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_userCostCodeId" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                            <stringProp name="RegexExtractor.refname">userCostCodeId</stringProp>
                            <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                            <stringProp name="RegexExtractor.match_number">1</stringProp>
                            <stringProp name="Sample.scope">all</stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="get_UserCostCodesId" enabled="false">
                            <collectionProp name="Asserion.test_strings">
                              <stringProp name="-209463674">${userCostCodeId}</stringProp>
                            </collectionProp>
                            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                            <boolProp name="Assertion.assume_success">false</boolProp>
                            <intProp name="Assertion.test_type">2</intProp>
                          </ResponseAssertion>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetWithTypeAndCodeActiveByCostCode" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/UserCostAmts/GetWithTypeAndCodeActiveByCostCode/${userCostCodeId}</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="Accept" elementType="Header">
                                <stringProp name="Header.name">Accept</stringProp>
                                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                              </elementProp>
                              <elementProp name="User-Agent" elementType="Header">
                                <stringProp name="Header.name">User-Agent</stringProp>
                                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                              </elementProp>
                              <elementProp name="Authorization" elementType="Header">
                                <stringProp name="Header.name">Authorization</stringProp>
                                <stringProp name="Header.value">bearer ${token}</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Encoding" elementType="Header">
                                <stringProp name="Header.name">Accept-Encoding</stringProp>
                                <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Language" elementType="Header">
                                <stringProp name="Header.name">Accept-Language</stringProp>
                                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_projectActivityId" enabled="false">
                            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                            <stringProp name="RegexExtractor.refname">projectActivityId</stringProp>
                            <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                            <stringProp name="RegexExtractor.match_number">1</stringProp>
                            <stringProp name="Sample.scope">all</stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify_projectActivityId" enabled="false">
                            <collectionProp name="Asserion.test_strings">
                              <stringProp name="1419238769">${projectActivityId}</stringProp>
                            </collectionProp>
                            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                            <boolProp name="Assertion.assume_success">false</boolProp>
                            <intProp name="Assertion.test_type">2</intProp>
                          </ResponseAssertion>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_userCostAmtId Default" enabled="false">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/UserCostAmts/GetWithTypeActiveByCostCode/${userCostCodeId}</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="Accept" elementType="Header">
                                <stringProp name="Header.name">Accept</stringProp>
                                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                              </elementProp>
                              <elementProp name="User-Agent" elementType="Header">
                                <stringProp name="Header.name">User-Agent</stringProp>
                                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                              </elementProp>
                              <elementProp name="Authorization" elementType="Header">
                                <stringProp name="Header.name">Authorization</stringProp>
                                <stringProp name="Header.value">bearer ${token}</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Encoding" elementType="Header">
                                <stringProp name="Header.name">Accept-Encoding</stringProp>
                                <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Language" elementType="Header">
                                <stringProp name="Header.name">Accept-Language</stringProp>
                                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_userCostAmtId" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                            <stringProp name="RegexExtractor.refname">userCostAmtId</stringProp>
                            <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                            <stringProp name="RegexExtractor.match_number">1</stringProp>
                            <stringProp name="Sample.scope">all</stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                            <stringProp name="ConstantTimer.delay">10000</stringProp>
                            <stringProp name="RandomTimer.range">30000</stringProp>
                          </UniformRandomTimer>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="timesheetMemberListWeekView" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/timesheetMemberListWeekView.html</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree/>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetTimesheetsWithPeriod" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="isGetAdminOnly" elementType="HTTPArgument">
                                <stringProp name="Argument.name">isGetAdminOnly</stringProp>
                                <stringProp name="Argument.value">true</stringProp>
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                              <elementProp name="from" elementType="HTTPArgument">
                                <stringProp name="Argument.name">from</stringProp>
                                <stringProp name="Argument.value">${fromDate}</stringProp>
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                              <elementProp name="to" elementType="HTTPArgument">
                                <stringProp name="Argument.name">to</stringProp>
                                <stringProp name="Argument.value">${toDate}</stringProp>
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                              <elementProp name="userId" elementType="HTTPArgument">
                                <stringProp name="Argument.name">userId</stringProp>
                                <stringProp name="Argument.value">${userProfileId}</stringProp>
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/Timesheets/GetTimesheetsWithPeriod</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree/>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="timesheetList" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/timesheetList.html</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                            <stringProp name="ConstantTimer.delay">2000</stringProp>
                            <stringProp name="RandomTimer.range">4000</stringProp>
                          </UniformRandomTimer>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="92.Select TS" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TimeSheets/${timesheetId}" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/TimeSheets/${timesheetId}</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="timesheetFormDetail" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/timesheetFormDetail.html</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetByProject/${projectId}" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectActivities/GetByProject/${projectId}</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_projectActivityId" enabled="false">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">projectActivityId</stringProp>
                          <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                          <stringProp name="Sample.scope">all</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="RandomTimer.range">5000</stringProp>
                          <stringProp name="ConstantTimer.delay">3000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="93.Edit_Timesheet" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="timesheetFormEdit" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/timesheetFormEdit.html</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTasks" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="filter" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">{&quot;ProjectId&quot;:&quot;${projectId}&quot;,&quot;ProjectTaskType&quot;:&quot;1&quot;}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">filter</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTasks</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="RandomTimer.range">3000</stringProp>
                          <stringProp name="ConstantTimer.delay">1000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="94.DELETE TimeSheet" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/TimeSheets/${timesheetId}</stringProp>
                      <stringProp name="HTTPSampler.method">DELETE</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="RandomTimer.range">5000</stringProp>
                        <stringProp name="ConstantTimer.delay">3000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                    <stringProp name="IfController.condition">&quot;${expenseId}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${expenseId}&quot; != &quot;\${expenseId}&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="95.Back_to_Expense_page" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="expenseMemberView" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/expenseMemberView.html</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.image_parser">true</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ExpenseTypes" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/ExpenseTypes</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_expenseTypeName" enabled="false">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">expenseTypeName</stringProp>
                          <stringProp name="RegexExtractor.regex">&quot;expenseTypeName&quot;:&quot;(.+?)&quot;</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                          <stringProp name="Sample.scope">all</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_expenseTypeId" enabled="false">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">expenseTypeId</stringProp>
                          <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                          <stringProp name="Sample.scope">all</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetProjectsWithLive" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetProjectsWithLive</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserProfiles" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/UserProfiles</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="isGetAdminOnly" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">isGetAdminOnly</stringProp>
                              <stringProp name="Argument.value">true</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="from" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">from</stringProp>
                              <stringProp name="Argument.value">${fromDate}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="searchTerm" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">searchTerm</stringProp>
                            </elementProp>
                            <elementProp name="userId" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">userId</stringProp>
                              <stringProp name="Argument.value">${userProfileId}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/Expenses/Search</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="expenseList" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/expenseList.html</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ExpenseTypes" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/ExpenseTypes</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_expenseTypeName" enabled="false">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">expenseTypeName</stringProp>
                          <stringProp name="RegexExtractor.regex">&quot;expenseTypeName&quot;:&quot;(.+?)&quot;</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                          <stringProp name="Sample.scope">all</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_expenseTypeId" enabled="false">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">expenseTypeId</stringProp>
                          <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                          <stringProp name="Sample.scope">all</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="96.Select Expense" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Expenses/${expenseId}" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/Expenses/${expenseId}</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetFooterCounts/${expenseId}" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/Expenses/GetFooterCounts/${expenseId}</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTasks" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="filter" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">{&quot;projectId&quot;:&quot;${projectId}&quot;}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">filter</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTasks</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="RandomTimer.range">3000</stringProp>
                          <stringProp name="ConstantTimer.delay">1000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="expenseFormDetail.html" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/expenseFormDetail.html</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetContactsWithEnableSupplier" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts/GetContactsWithEnableSupplier</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="RandomTimer.range">3000</stringProp>
                          <stringProp name="ConstantTimer.delay">1000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="97.Click_Edit_Expense" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                          </elementProp>
                          <elementProp name="Authorization" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Edit_Expense" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/expenseFormEdit.html</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                            </elementProp>
                            <elementProp name="Authorization" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">bearer ${token}</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                          <stringProp name="RandomTimer.range">5000</stringProp>
                          <stringProp name="ConstantTimer.delay">3000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserProfiles" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/UserProfiles</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                            </elementProp>
                            <elementProp name="X-DevTools-Emulate-Network-Conditions-Client-Id" elementType="Header">
                              <stringProp name="Header.name">X-DevTools-Emulate-Network-Conditions-Client-Id</stringProp>
                              <stringProp name="Header.value">02c5719f-5215-4b44-8767-e0175f288cfd</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                            </elementProp>
                            <elementProp name="Authorization" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">bearer Uae-dANF95qEYbhmhu3hJ-8TPDbJg0lzX4mZTqszlUD9iniYTjS7n5Mpu-pUloH8wOHXsp1_xQ9fxXWnjcEpI3kwhErjTeNwBV9t-tprZi-jT-kvY53vp3mrridiZecXRk0qneBlb3gmULQ_QN5yODbFEukbykup9Gjk012qH5zAdoskjJ2eonZp9zRernBGSggiPtiljy8wCsdCuNrdUJFc9cBxrnFvlX18w-0jlOGiWmx3x26GGJfIMn_8zjJCQ8CG1uAuptn_ilS2CvTG_7Vk2x_LvWt-KCE1DQSlM7g0S0bJGo_ykObE_CsEqZp1y0SwXQpgpUVVEzwuMG7_y_BjQ89zQyiJsrr9vK4gObQ3CKIFIfYSsshT6tmnv8wPs6AWka383Du4SY2tMBy91UXITgJ0M8CQKRPIgXkYrZ3C1lnvCHlwl6US40-GfjaLXITiArvB5fG1_94UNhs6gCr5ezlG2ScQ8bZmk3u-Z0k6wS7BfF1adju-F2dOPwh_95VHfsimXDMhdPZ7hS1Wc5Nmkh4Srw45fdqaL7KhsaEgpbLF6yFSGtcyot5eHl56M7dtKtLWL6bn4tmLFaqthGkohnVomth-2v5oRlqUQVeLLOLZe5D9Gj0mbUsz1OZX0jMHYkB-nMkWdsdQW6NQ5INz6oCQKYrFBxDcojGTRzwH18-zIe5WukyEB59fg1c2aQuzQZvdNdhtUdLhiLerUA</stringProp>
                            </elementProp>
                            <elementProp name="Referer" elementType="Header">
                              <stringProp name="Header.name">Referer</stringProp>
                              <stringProp name="Header.value">http://10.84.1.76/SBAWEB_QC/</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                          <stringProp name="RandomTimer.range">35.6</stringProp>
                          <stringProp name="ConstantTimer.delay">71.2</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ExpenseTypes" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/ExpenseTypes</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                            </elementProp>
                            <elementProp name="X-DevTools-Emulate-Network-Conditions-Client-Id" elementType="Header">
                              <stringProp name="Header.name">X-DevTools-Emulate-Network-Conditions-Client-Id</stringProp>
                              <stringProp name="Header.value">02c5719f-5215-4b44-8767-e0175f288cfd</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                            </elementProp>
                            <elementProp name="Authorization" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">bearer Uae-dANF95qEYbhmhu3hJ-8TPDbJg0lzX4mZTqszlUD9iniYTjS7n5Mpu-pUloH8wOHXsp1_xQ9fxXWnjcEpI3kwhErjTeNwBV9t-tprZi-jT-kvY53vp3mrridiZecXRk0qneBlb3gmULQ_QN5yODbFEukbykup9Gjk012qH5zAdoskjJ2eonZp9zRernBGSggiPtiljy8wCsdCuNrdUJFc9cBxrnFvlX18w-0jlOGiWmx3x26GGJfIMn_8zjJCQ8CG1uAuptn_ilS2CvTG_7Vk2x_LvWt-KCE1DQSlM7g0S0bJGo_ykObE_CsEqZp1y0SwXQpgpUVVEzwuMG7_y_BjQ89zQyiJsrr9vK4gObQ3CKIFIfYSsshT6tmnv8wPs6AWka383Du4SY2tMBy91UXITgJ0M8CQKRPIgXkYrZ3C1lnvCHlwl6US40-GfjaLXITiArvB5fG1_94UNhs6gCr5ezlG2ScQ8bZmk3u-Z0k6wS7BfF1adju-F2dOPwh_95VHfsimXDMhdPZ7hS1Wc5Nmkh4Srw45fdqaL7KhsaEgpbLF6yFSGtcyot5eHl56M7dtKtLWL6bn4tmLFaqthGkohnVomth-2v5oRlqUQVeLLOLZe5D9Gj0mbUsz1OZX0jMHYkB-nMkWdsdQW6NQ5INz6oCQKYrFBxDcojGTRzwH18-zIe5WukyEB59fg1c2aQuzQZvdNdhtUdLhiLerUA</stringProp>
                            </elementProp>
                            <elementProp name="Referer" elementType="Header">
                              <stringProp name="Header.name">Referer</stringProp>
                              <stringProp name="Header.value">http://10.84.1.76/SBAWEB_QC/</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="RandomTimer.range">3000</stringProp>
                          <stringProp name="ConstantTimer.delay">1000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/UIBuilder" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/UIBuilder</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="RandomTimer.range">3000</stringProp>
                          <stringProp name="ConstantTimer.delay">1000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="98.Click_DELETE_Expense" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE Expenses" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/Expenses/${expenseId}</stringProp>
                        <stringProp name="HTTPSampler.method">DELETE</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">bearer ${token}</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                          <stringProp name="RandomTimer.range">5000</stringProp>
                          <stringProp name="ConstantTimer.delay">3000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ExpenseTypes" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/ExpenseTypes</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="RandomTimer.range">5000</stringProp>
                          <stringProp name="ConstantTimer.delay">3000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Approve_Timesheet_and_Expense" enabled="true">
          <stringProp name="TestPlan.comments">Using previous TS and Expense to approve</stringProp>
        </OnceOnlyController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">&quot;${projectId}&quot; != &quot;NOT FOUND&quot;  &amp;&amp; &quot;${projectId}&quot; != &quot;\${projectId}&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${projectTaskId}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${projectTaskId}&quot; != &quot;\${projectTaskId}&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Approve Timesheet" enabled="true"/>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transaction Timeshe" enabled="true"/>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="99.Visit_Timesheet page_to_approve" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Visit_Timesheet page" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/#/timesheet</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                        <stringProp name="DurationAssertion.duration">3000</stringProp>
                      </DurationAssertion>
                      <hashTree/>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                        <stringProp name="RandomTimer.range">3000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="timesheetMemberView" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/timesheetMemberView.html</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Load_Timesheet_information" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                          </elementProp>
                          <elementProp name="Authorization" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_Project" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/Projects</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="TestPlan.comments">get id &amp; projectManagerId</stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                            </elementProp>
                            <elementProp name="Authorization" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">bearer ${token}</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_projectId" enabled="false">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">projectId</stringProp>
                          <stringProp name="RegexExtractor.regex">.*&quot;projectId&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                          <stringProp name="Sample.scope">all</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_GetProjectsWithLive" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetProjectsWithLive</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="TestPlan.comments">data[14].Projects/GetProjectsWithLive &amp; id</stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                            </elementProp>
                            <elementProp name="Authorization" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">bearer ${token}</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_userCostCodeId Default " enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/UserCostCodes</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                            </elementProp>
                            <elementProp name="Authorization" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">bearer ${token}</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_userCostCodeId" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">userCostCodeId</stringProp>
                          <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                          <stringProp name="Sample.scope">all</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="get_UserCostCodesId" enabled="false">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="-209463674">${userCostCodeId}</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">2</intProp>
                        </ResponseAssertion>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetWithTypeAndCodeActiveByCostCode" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/UserCostAmts/GetWithTypeAndCodeActiveByCostCode/${userCostCodeId}</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                            </elementProp>
                            <elementProp name="Authorization" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">bearer ${token}</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_projectActivityId" enabled="false">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">projectActivityId</stringProp>
                          <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                          <stringProp name="Sample.scope">all</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify_projectActivityId" enabled="false">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="1419238769">${projectActivityId}</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">2</intProp>
                        </ResponseAssertion>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_userCostAmtId Default" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/UserCostAmts/GetWithTypeActiveByCostCode/${userCostCodeId}</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                            </elementProp>
                            <elementProp name="Authorization" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">bearer ${token}</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_userCostAmtId" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">userCostAmtId</stringProp>
                          <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                          <stringProp name="Sample.scope">all</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                          <stringProp name="ConstantTimer.delay">10000</stringProp>
                          <stringProp name="RandomTimer.range">30000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="timesheetMemberListWeekView" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/timesheetMemberListWeekView.html</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetTimesheetsWithPeriod" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="isGetAdminOnly" elementType="HTTPArgument">
                              <stringProp name="Argument.name">isGetAdminOnly</stringProp>
                              <stringProp name="Argument.value">true</stringProp>
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="from" elementType="HTTPArgument">
                              <stringProp name="Argument.name">from</stringProp>
                              <stringProp name="Argument.value">${fromDate}</stringProp>
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="userId" elementType="HTTPArgument">
                              <stringProp name="Argument.name">userId</stringProp>
                              <stringProp name="Argument.value">${userProfileId}</stringProp>
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="to" elementType="HTTPArgument">
                              <stringProp name="Argument.name">to</stringProp>
                              <stringProp name="Argument.value">${toDate}</stringProp>
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/Timesheets/GetTimesheetsWithPeriod</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                          <stringProp name="ConstantTimer.delay">10000</stringProp>
                          <stringProp name="RandomTimer.range">30000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="100.Click_Add_Timesheet_to_approve" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/timesheetFormAdd.html</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                    <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                      <stringProp name="DurationAssertion.duration">3000</stringProp>
                    </DurationAssertion>
                    <hashTree/>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="ConstantTimer.delay">2000</stringProp>
                      <stringProp name="RandomTimer.range">4000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="101.Select_project_task" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="Authorization" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">bearer ${token}</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTasks" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTasks/${projectTaskId}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectActivities/GetByProject/${projectId}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectActivities/GetByProject/${projectId}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                        <stringProp name="RandomTimer.range">3000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">10000</stringProp>
                        <stringProp name="RandomTimer.range">30000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="ConstantTimer.delay">10000</stringProp>
                      <stringProp name="RandomTimer.range">30000</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                    <stringProp name="IfController.condition">&quot;${projectActivityId}&quot; != &quot;NOT FOUND&quot; &amp;&amp;  &quot;${userCostAmtId}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${projectActivityId}&quot; != &quot;\${projectActivityId}&quot; &amp;&amp;  &quot;${userCostAmtId}&quot; != &quot;\${userCostAmtId}&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="102.Click_Save_TimeSheet_to_approve" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Save_TimeSheet" enabled="true">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">{&#xd;
  &quot;timeDate&quot;: &quot;${apptimeDate}&quot;,&#xd;
  &quot;userProfileId&quot;: &quot;${userProfileId}&quot;,&#xd;
  &quot;projectId&quot;: &quot;${projectId}&quot;,&#xd;
  &quot;userCostCodeId&quot;: &quot;${userCostCodeId}&quot;,&#xd;
  &quot;projectActivityId&quot;: &quot;${projectActivityId}&quot;,&#xd;
  &quot;userCostAmtId&quot;: &quot;${userCostAmtId}&quot;,&#xd;
  &quot;projectTaskId&quot;: &quot;${projectTaskId}&quot;,&#xd;
  &quot;effortUnits&quot;: 0.1,&#xd;
  &quot;timeNotes&quot;: &quot;Load-note for saving a timesheet&quot;,&#xd;
  &quot;fromDate&quot;: &quot;${appfromDate}&quot;,&#xd;
  &quot;toDate&quot;: &quot;${apptoDate}&quot;&#xd;
}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/TimeSheets</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="TestPlan.comments">Add TimeSheets</stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">bearer ${token}</stringProp>
                            </elementProp>
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate, br</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                            </elementProp>
                            <elementProp name="Content-Type" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/json</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_TimesheetId" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">TimesheetId</stringProp>
                          <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                          <stringProp name="Sample.scope">all</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_message" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">message</stringProp>
                          <stringProp name="RegexExtractor.refname">message</stringProp>
                          <stringProp name="RegexExtractor.regex">.*&quot;message&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                          <stringProp name="Sample.scope">all</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                          <stringProp name="DurationAssertion.duration">3000</stringProp>
                        </DurationAssertion>
                        <hashTree/>
                      </hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                        <stringProp name="IfController.condition"> &quot;${message}&quot; == &quot;Successful&quot;</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TimeSheets/${TimesheetId}" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/TimeSheets/${TimesheetId}</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree/>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="timesheetFormDetail" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/timesheetFormDetail.html</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree/>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetByProject/${projectId}" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectActivities/GetByProject/${projectId}</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                            <stringProp name="RandomTimer.range">5000</stringProp>
                            <stringProp name="ConstantTimer.delay">3000</stringProp>
                          </UniformRandomTimer>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                  <stringProp name="IfController.condition">&quot;${TimesheetId}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${TimesheetId}&quot; != &quot;\${TimesheetId}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="103.Submit_Timesheet " enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit_Timesheet " enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&#xd;
  &quot;userProfileId&quot;: &quot;${userProfileId}&quot;,&#xd;
  &quot;firstDayOfWeekDate&quot;: &quot;${appfirstDayOfWeekDate}&quot;,&#xd;
  &quot;timesheets&quot;: [{&quot;id&quot;:&quot;${TimesheetId}&quot;}]&#xd;
}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/TimesheetSubmissions</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, br</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                          </elementProp>
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                        <stringProp name="ConstantTimer.delay">5000</stringProp>
                        <stringProp name="RandomTimer.range">3000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_TimesheetIdS" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">TimesheetIdS</stringProp>
                        <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="Sample.scope">all</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_submitmessage" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">submitTS_msg</stringProp>
                        <stringProp name="RegexExtractor.regex">.*&quot;message&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="Sample.scope">all</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                        <stringProp name="DurationAssertion.duration">3000</stringProp>
                      </DurationAssertion>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***TimesheetSubmissions" enabled="false">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&#xd;
  &quot;userProfileId&quot;: &quot;558b18d4-0629-464a-8b49-0c08258584d9&quot;,&#xd;
  &quot;firstDayOfWeekDate&quot;: &quot;2017-03-19T17:00:00.000Z&quot;,&#xd;
  &quot;timesheets&quot;: [&#xd;
    {&#xd;
      &quot;timeDate&quot;: &quot;2017-03-19T17:00:00Z&quot;,&#xd;
      &quot;fromDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;toDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;userProfileId&quot;: &quot;558b18d4-0629-464a-8b49-0c08258584d9&quot;,&#xd;
      &quot;projectId&quot;: &quot;30b40a6c-0c39-4269-a99f-1b09ea04759d&quot;,&#xd;
      &quot;projectTaskId&quot;: &quot;e6966b37-15e9-40f2-bea3-1a2fca6339ef&quot;,&#xd;
      &quot;invoiceDetailId&quot;: null,&#xd;
      &quot;projectActivityId&quot;: &quot;2b44c982-5c8b-4159-ab99-24788f87a94b&quot;,&#xd;
      &quot;userCostAmtId&quot;: &quot;175b2f8a-bf2d-47a3-b9c3-a3cc409eb45d&quot;,&#xd;
      &quot;effortUnits&quot;: 1,&#xd;
      &quot;costTotal&quot;: 0,&#xd;
      &quot;costRateAmt&quot;: 0,&#xd;
      &quot;chargeable&quot;: false,&#xd;
      &quot;chargeRateAmt&quot;: 0,&#xd;
      &quot;chargeTotal&quot;: 0,&#xd;
      &quot;timeNotes&quot;: null,&#xd;
      &quot;invoiceId&quot;: null,&#xd;
      &quot;locked&quot;: false,&#xd;
      &quot;timesheetSubmissionId&quot;: null,&#xd;
      &quot;previousActivityName&quot;: &quot;Default Role&quot;,&#xd;
      &quot;timeTypeName&quot;: &quot;Standard Hour&quot;,&#xd;
      &quot;userCostCodeId&quot;: &quot;4e6dde3a-47e6-484e-ae4c-93bb647f05a1&quot;,&#xd;
      &quot;fnTimesheetCostCode&quot;: 1,&#xd;
      &quot;dataUsersCharge&quot;: 1,&#xd;
      &quot;fnTimesheetChargeableFlag&quot;: 1,&#xd;
      &quot;chargeableAmount&quot;: null,&#xd;
      &quot;projectName&quot;: &quot;Load-Empty project&quot;,&#xd;
      &quot;projectTaskName&quot;: &quot;Default Task&quot;,&#xd;
      &quot;userCostTypeName&quot;: &quot;Standard Hour&quot;,&#xd;
      &quot;invoiced&quot;: false,&#xd;
      &quot;ucir&quot;: &quot;9577a59a-5e36-4c61-aa55-dd032fa358ed&quot;,&#xd;
      &quot;createdBy&quot;: &quot;tenant1user19@mailinator.com&quot;,&#xd;
      &quot;updatedBy&quot;: null,&#xd;
      &quot;createdDate&quot;: &quot;2017-03-30T00:00:00&quot;,&#xd;
      &quot;updatedDate&quot;: null,&#xd;
      &quot;id&quot;: &quot;8181be7b-17a5-4647-b95d-0ac6e92fb00b&quot;,&#xd;
      &quot;version&quot;: &quot;AAAAAAAAs7w=&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;timeDate&quot;: &quot;2017-03-23T17:00:00Z&quot;,&#xd;
      &quot;fromDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;toDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;userProfileId&quot;: &quot;558b18d4-0629-464a-8b49-0c08258584d9&quot;,&#xd;
      &quot;projectId&quot;: &quot;57a0239c-81a0-4c5f-84c5-843b86a18c88&quot;,&#xd;
      &quot;projectTaskId&quot;: &quot;1ddd2f8b-053e-490a-ac69-9db4f0935a8d&quot;,&#xd;
      &quot;invoiceDetailId&quot;: null,&#xd;
      &quot;projectActivityId&quot;: &quot;2b44c982-5c8b-4159-ab99-24788f87a94b&quot;,&#xd;
      &quot;userCostAmtId&quot;: &quot;175b2f8a-bf2d-47a3-b9c3-a3cc409eb45d&quot;,&#xd;
      &quot;effortUnits&quot;: 0.1,&#xd;
      &quot;costTotal&quot;: 0,&#xd;
      &quot;costRateAmt&quot;: 0,&#xd;
      &quot;chargeable&quot;: false,&#xd;
      &quot;chargeRateAmt&quot;: 0,&#xd;
      &quot;chargeTotal&quot;: 0,&#xd;
      &quot;timeNotes&quot;: &quot;Load-note for saving a timesheet&quot;,&#xd;
      &quot;invoiceId&quot;: null,&#xd;
      &quot;locked&quot;: false,&#xd;
      &quot;timesheetSubmissionId&quot;: null,&#xd;
      &quot;previousActivityName&quot;: &quot;Default Role&quot;,&#xd;
      &quot;timeTypeName&quot;: &quot;Standard Hour&quot;,&#xd;
      &quot;userCostCodeId&quot;: null,&#xd;
      &quot;fnTimesheetCostCode&quot;: 0,&#xd;
      &quot;dataUsersCharge&quot;: 0,&#xd;
      &quot;fnTimesheetChargeableFlag&quot;: 0,&#xd;
      &quot;chargeableAmount&quot;: null,&#xd;
      &quot;projectName&quot;: &quot;Project 99&quot;,&#xd;
      &quot;projectTaskName&quot;: &quot;PROJECT TASK 2_99&quot;,&#xd;
      &quot;userCostTypeName&quot;: null,&#xd;
      &quot;invoiced&quot;: false,&#xd;
      &quot;ucir&quot;: &quot;9577a59a-5e36-4c61-aa55-dd032fa358ed&quot;,&#xd;
      &quot;createdBy&quot;: &quot;tenant1user19@mailinator.com&quot;,&#xd;
      &quot;updatedBy&quot;: null,&#xd;
      &quot;createdDate&quot;: &quot;2017-03-27T00:00:00&quot;,&#xd;
      &quot;updatedDate&quot;: null,&#xd;
      &quot;id&quot;: &quot;fb7491ce-e589-4d29-9c1b-0f3e41c4796c&quot;,&#xd;
      &quot;version&quot;: &quot;AAAAAAAAhoY=&quot;,&#xd;
      &quot;groupDate&quot;: &quot;2017-03-23T17:00:00.000Z&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;timeDate&quot;: &quot;2017-03-23T17:00:00Z&quot;,&#xd;
      &quot;fromDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;toDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;userProfileId&quot;: &quot;558b18d4-0629-464a-8b49-0c08258584d9&quot;,&#xd;
      &quot;projectId&quot;: &quot;57a0239c-81a0-4c5f-84c5-843b86a18c88&quot;,&#xd;
      &quot;projectTaskId&quot;: &quot;1ddd2f8b-053e-490a-ac69-9db4f0935a8d&quot;,&#xd;
      &quot;invoiceDetailId&quot;: null,&#xd;
      &quot;projectActivityId&quot;: &quot;2b44c982-5c8b-4159-ab99-24788f87a94b&quot;,&#xd;
      &quot;userCostAmtId&quot;: &quot;175b2f8a-bf2d-47a3-b9c3-a3cc409eb45d&quot;,&#xd;
      &quot;effortUnits&quot;: 0.1,&#xd;
      &quot;costTotal&quot;: 0,&#xd;
      &quot;costRateAmt&quot;: 0,&#xd;
      &quot;chargeable&quot;: false,&#xd;
      &quot;chargeRateAmt&quot;: 0,&#xd;
      &quot;chargeTotal&quot;: 0,&#xd;
      &quot;timeNotes&quot;: &quot;Load-note for saving a timesheet&quot;,&#xd;
      &quot;invoiceId&quot;: null,&#xd;
      &quot;locked&quot;: false,&#xd;
      &quot;timesheetSubmissionId&quot;: null,&#xd;
      &quot;previousActivityName&quot;: &quot;Default Role&quot;,&#xd;
      &quot;timeTypeName&quot;: &quot;Standard Hour&quot;,&#xd;
      &quot;userCostCodeId&quot;: null,&#xd;
      &quot;fnTimesheetCostCode&quot;: 0,&#xd;
      &quot;dataUsersCharge&quot;: 0,&#xd;
      &quot;fnTimesheetChargeableFlag&quot;: 0,&#xd;
      &quot;chargeableAmount&quot;: null,&#xd;
      &quot;projectName&quot;: &quot;Project 99&quot;,&#xd;
      &quot;projectTaskName&quot;: &quot;PROJECT TASK 2_99&quot;,&#xd;
      &quot;userCostTypeName&quot;: null,&#xd;
      &quot;invoiced&quot;: false,&#xd;
      &quot;ucir&quot;: &quot;9577a59a-5e36-4c61-aa55-dd032fa358ed&quot;,&#xd;
      &quot;createdBy&quot;: &quot;tenant1user19@mailinator.com&quot;,&#xd;
      &quot;updatedBy&quot;: null,&#xd;
      &quot;createdDate&quot;: &quot;2017-03-27T00:00:00&quot;,&#xd;
      &quot;updatedDate&quot;: null,&#xd;
      &quot;id&quot;: &quot;6c61b9d8-b1e6-4e9a-a18c-29d4c7e58f8f&quot;,&#xd;
      &quot;version&quot;: &quot;AAAAAAAAi7M=&quot;,&#xd;
      &quot;groupDate&quot;: &quot;2017-03-23T17:00:00.000Z&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;timeDate&quot;: &quot;2017-03-23T17:00:00Z&quot;,&#xd;
      &quot;fromDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;toDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;userProfileId&quot;: &quot;558b18d4-0629-464a-8b49-0c08258584d9&quot;,&#xd;
      &quot;projectId&quot;: &quot;57a0239c-81a0-4c5f-84c5-843b86a18c88&quot;,&#xd;
      &quot;projectTaskId&quot;: &quot;1ddd2f8b-053e-490a-ac69-9db4f0935a8d&quot;,&#xd;
      &quot;invoiceDetailId&quot;: null,&#xd;
      &quot;projectActivityId&quot;: &quot;2b44c982-5c8b-4159-ab99-24788f87a94b&quot;,&#xd;
      &quot;userCostAmtId&quot;: &quot;175b2f8a-bf2d-47a3-b9c3-a3cc409eb45d&quot;,&#xd;
      &quot;effortUnits&quot;: 0.1,&#xd;
      &quot;costTotal&quot;: 0,&#xd;
      &quot;costRateAmt&quot;: 0,&#xd;
      &quot;chargeable&quot;: false,&#xd;
      &quot;chargeRateAmt&quot;: 0,&#xd;
      &quot;chargeTotal&quot;: 0,&#xd;
      &quot;timeNotes&quot;: &quot;Load-note for saving a timesheet&quot;,&#xd;
      &quot;invoiceId&quot;: null,&#xd;
      &quot;locked&quot;: false,&#xd;
      &quot;timesheetSubmissionId&quot;: null,&#xd;
      &quot;previousActivityName&quot;: &quot;Default Role&quot;,&#xd;
      &quot;timeTypeName&quot;: &quot;Standard Hour&quot;,&#xd;
      &quot;userCostCodeId&quot;: null,&#xd;
      &quot;fnTimesheetCostCode&quot;: 0,&#xd;
      &quot;dataUsersCharge&quot;: 0,&#xd;
      &quot;fnTimesheetChargeableFlag&quot;: 0,&#xd;
      &quot;chargeableAmount&quot;: null,&#xd;
      &quot;projectName&quot;: &quot;Project 99&quot;,&#xd;
      &quot;projectTaskName&quot;: &quot;PROJECT TASK 2_99&quot;,&#xd;
      &quot;userCostTypeName&quot;: null,&#xd;
      &quot;invoiced&quot;: false,&#xd;
      &quot;ucir&quot;: &quot;9577a59a-5e36-4c61-aa55-dd032fa358ed&quot;,&#xd;
      &quot;createdBy&quot;: &quot;tenant1user19@mailinator.com&quot;,&#xd;
      &quot;updatedBy&quot;: null,&#xd;
      &quot;createdDate&quot;: &quot;2017-03-27T00:00:00&quot;,&#xd;
      &quot;updatedDate&quot;: null,&#xd;
      &quot;id&quot;: &quot;d17392cd-0ab9-4c38-bba2-33cdae85e130&quot;,&#xd;
      &quot;version&quot;: &quot;AAAAAAAAfUE=&quot;,&#xd;
      &quot;groupDate&quot;: &quot;2017-03-23T17:00:00.000Z&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;timeDate&quot;: &quot;2017-03-23T17:00:00Z&quot;,&#xd;
      &quot;fromDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;toDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;userProfileId&quot;: &quot;558b18d4-0629-464a-8b49-0c08258584d9&quot;,&#xd;
      &quot;projectId&quot;: &quot;57a0239c-81a0-4c5f-84c5-843b86a18c88&quot;,&#xd;
      &quot;projectTaskId&quot;: &quot;1ddd2f8b-053e-490a-ac69-9db4f0935a8d&quot;,&#xd;
      &quot;invoiceDetailId&quot;: null,&#xd;
      &quot;projectActivityId&quot;: &quot;2b44c982-5c8b-4159-ab99-24788f87a94b&quot;,&#xd;
      &quot;userCostAmtId&quot;: &quot;175b2f8a-bf2d-47a3-b9c3-a3cc409eb45d&quot;,&#xd;
      &quot;effortUnits&quot;: 0.1,&#xd;
      &quot;costTotal&quot;: 0,&#xd;
      &quot;costRateAmt&quot;: 0,&#xd;
      &quot;chargeable&quot;: false,&#xd;
      &quot;chargeRateAmt&quot;: 0,&#xd;
      &quot;chargeTotal&quot;: 0,&#xd;
      &quot;timeNotes&quot;: &quot;Load-note for saving a timesheet&quot;,&#xd;
      &quot;invoiceId&quot;: null,&#xd;
      &quot;locked&quot;: false,&#xd;
      &quot;timesheetSubmissionId&quot;: null,&#xd;
      &quot;previousActivityName&quot;: &quot;Default Role&quot;,&#xd;
      &quot;timeTypeName&quot;: &quot;Standard Hour&quot;,&#xd;
      &quot;userCostCodeId&quot;: null,&#xd;
      &quot;fnTimesheetCostCode&quot;: 0,&#xd;
      &quot;dataUsersCharge&quot;: 0,&#xd;
      &quot;fnTimesheetChargeableFlag&quot;: 0,&#xd;
      &quot;chargeableAmount&quot;: null,&#xd;
      &quot;projectName&quot;: &quot;Project 99&quot;,&#xd;
      &quot;projectTaskName&quot;: &quot;PROJECT TASK 2_99&quot;,&#xd;
      &quot;userCostTypeName&quot;: null,&#xd;
      &quot;invoiced&quot;: false,&#xd;
      &quot;ucir&quot;: &quot;9577a59a-5e36-4c61-aa55-dd032fa358ed&quot;,&#xd;
      &quot;createdBy&quot;: &quot;tenant1user19@mailinator.com&quot;,&#xd;
      &quot;updatedBy&quot;: null,&#xd;
      &quot;createdDate&quot;: &quot;2017-03-27T00:00:00&quot;,&#xd;
      &quot;updatedDate&quot;: null,&#xd;
      &quot;id&quot;: &quot;6d6e3e18-48ae-4615-b9be-529f28dfae81&quot;,&#xd;
      &quot;version&quot;: &quot;AAAAAAAAgi4=&quot;,&#xd;
      &quot;groupDate&quot;: &quot;2017-03-23T17:00:00.000Z&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;timeDate&quot;: &quot;2017-03-23T17:00:00Z&quot;,&#xd;
      &quot;fromDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;toDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;userProfileId&quot;: &quot;558b18d4-0629-464a-8b49-0c08258584d9&quot;,&#xd;
      &quot;projectId&quot;: &quot;57a0239c-81a0-4c5f-84c5-843b86a18c88&quot;,&#xd;
      &quot;projectTaskId&quot;: &quot;1ddd2f8b-053e-490a-ac69-9db4f0935a8d&quot;,&#xd;
      &quot;invoiceDetailId&quot;: null,&#xd;
      &quot;projectActivityId&quot;: &quot;2b44c982-5c8b-4159-ab99-24788f87a94b&quot;,&#xd;
      &quot;userCostAmtId&quot;: &quot;175b2f8a-bf2d-47a3-b9c3-a3cc409eb45d&quot;,&#xd;
      &quot;effortUnits&quot;: 0.1,&#xd;
      &quot;costTotal&quot;: 0,&#xd;
      &quot;costRateAmt&quot;: 0,&#xd;
      &quot;chargeable&quot;: false,&#xd;
      &quot;chargeRateAmt&quot;: 0,&#xd;
      &quot;chargeTotal&quot;: 0,&#xd;
      &quot;timeNotes&quot;: &quot;Load-note for saving a timesheet&quot;,&#xd;
      &quot;invoiceId&quot;: null,&#xd;
      &quot;locked&quot;: false,&#xd;
      &quot;timesheetSubmissionId&quot;: null,&#xd;
      &quot;previousActivityName&quot;: &quot;Default Role&quot;,&#xd;
      &quot;timeTypeName&quot;: &quot;Standard Hour&quot;,&#xd;
      &quot;userCostCodeId&quot;: null,&#xd;
      &quot;fnTimesheetCostCode&quot;: 0,&#xd;
      &quot;dataUsersCharge&quot;: 0,&#xd;
      &quot;fnTimesheetChargeableFlag&quot;: 0,&#xd;
      &quot;chargeableAmount&quot;: null,&#xd;
      &quot;projectName&quot;: &quot;Project 99&quot;,&#xd;
      &quot;projectTaskName&quot;: &quot;PROJECT TASK 2_99&quot;,&#xd;
      &quot;userCostTypeName&quot;: null,&#xd;
      &quot;invoiced&quot;: false,&#xd;
      &quot;ucir&quot;: &quot;9577a59a-5e36-4c61-aa55-dd032fa358ed&quot;,&#xd;
      &quot;createdBy&quot;: &quot;tenant1user19@mailinator.com&quot;,&#xd;
      &quot;updatedBy&quot;: null,&#xd;
      &quot;createdDate&quot;: &quot;2017-03-27T00:00:00&quot;,&#xd;
      &quot;updatedDate&quot;: null,&#xd;
      &quot;id&quot;: &quot;91b2dec0-5b2d-461d-a856-7e83bcf63eb5&quot;,&#xd;
      &quot;version&quot;: &quot;AAAAAAAAbuI=&quot;,&#xd;
      &quot;groupDate&quot;: &quot;2017-03-23T17:00:00.000Z&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;timeDate&quot;: &quot;2017-03-23T17:00:00Z&quot;,&#xd;
      &quot;fromDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;toDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;userProfileId&quot;: &quot;558b18d4-0629-464a-8b49-0c08258584d9&quot;,&#xd;
      &quot;projectId&quot;: &quot;57a0239c-81a0-4c5f-84c5-843b86a18c88&quot;,&#xd;
      &quot;projectTaskId&quot;: &quot;1ddd2f8b-053e-490a-ac69-9db4f0935a8d&quot;,&#xd;
      &quot;invoiceDetailId&quot;: null,&#xd;
      &quot;projectActivityId&quot;: &quot;2b44c982-5c8b-4159-ab99-24788f87a94b&quot;,&#xd;
      &quot;userCostAmtId&quot;: &quot;175b2f8a-bf2d-47a3-b9c3-a3cc409eb45d&quot;,&#xd;
      &quot;effortUnits&quot;: 0.1,&#xd;
      &quot;costTotal&quot;: 0,&#xd;
      &quot;costRateAmt&quot;: 0,&#xd;
      &quot;chargeable&quot;: false,&#xd;
      &quot;chargeRateAmt&quot;: 0,&#xd;
      &quot;chargeTotal&quot;: 0,&#xd;
      &quot;timeNotes&quot;: &quot;Load-note for saving a timesheet&quot;,&#xd;
      &quot;invoiceId&quot;: null,&#xd;
      &quot;locked&quot;: false,&#xd;
      &quot;timesheetSubmissionId&quot;: null,&#xd;
      &quot;previousActivityName&quot;: &quot;Default Role&quot;,&#xd;
      &quot;timeTypeName&quot;: &quot;Standard Hour&quot;,&#xd;
      &quot;userCostCodeId&quot;: null,&#xd;
      &quot;fnTimesheetCostCode&quot;: 0,&#xd;
      &quot;dataUsersCharge&quot;: 0,&#xd;
      &quot;fnTimesheetChargeableFlag&quot;: 0,&#xd;
      &quot;chargeableAmount&quot;: null,&#xd;
      &quot;projectName&quot;: &quot;Project 99&quot;,&#xd;
      &quot;projectTaskName&quot;: &quot;PROJECT TASK 2_99&quot;,&#xd;
      &quot;userCostTypeName&quot;: null,&#xd;
      &quot;invoiced&quot;: false,&#xd;
      &quot;ucir&quot;: &quot;9577a59a-5e36-4c61-aa55-dd032fa358ed&quot;,&#xd;
      &quot;createdBy&quot;: &quot;tenant1user19@mailinator.com&quot;,&#xd;
      &quot;updatedBy&quot;: null,&#xd;
      &quot;createdDate&quot;: &quot;2017-03-27T00:00:00&quot;,&#xd;
      &quot;updatedDate&quot;: null,&#xd;
      &quot;id&quot;: &quot;dce3d6ff-adae-4f01-8b07-93700f952671&quot;,&#xd;
      &quot;version&quot;: &quot;AAAAAAAAc3g=&quot;,&#xd;
      &quot;groupDate&quot;: &quot;2017-03-23T17:00:00.000Z&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;timeDate&quot;: &quot;2017-03-23T17:00:00Z&quot;,&#xd;
      &quot;fromDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;toDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;userProfileId&quot;: &quot;558b18d4-0629-464a-8b49-0c08258584d9&quot;,&#xd;
      &quot;projectId&quot;: &quot;57a0239c-81a0-4c5f-84c5-843b86a18c88&quot;,&#xd;
      &quot;projectTaskId&quot;: &quot;1ddd2f8b-053e-490a-ac69-9db4f0935a8d&quot;,&#xd;
      &quot;invoiceDetailId&quot;: null,&#xd;
      &quot;projectActivityId&quot;: &quot;2b44c982-5c8b-4159-ab99-24788f87a94b&quot;,&#xd;
      &quot;userCostAmtId&quot;: &quot;175b2f8a-bf2d-47a3-b9c3-a3cc409eb45d&quot;,&#xd;
      &quot;effortUnits&quot;: 0.1,&#xd;
      &quot;costTotal&quot;: 0,&#xd;
      &quot;costRateAmt&quot;: 0,&#xd;
      &quot;chargeable&quot;: false,&#xd;
      &quot;chargeRateAmt&quot;: 0,&#xd;
      &quot;chargeTotal&quot;: 0,&#xd;
      &quot;timeNotes&quot;: &quot;Load-note for saving a timesheet&quot;,&#xd;
      &quot;invoiceId&quot;: null,&#xd;
      &quot;locked&quot;: false,&#xd;
      &quot;timesheetSubmissionId&quot;: null,&#xd;
      &quot;previousActivityName&quot;: &quot;Default Role&quot;,&#xd;
      &quot;timeTypeName&quot;: &quot;Standard Hour&quot;,&#xd;
      &quot;userCostCodeId&quot;: null,&#xd;
      &quot;fnTimesheetCostCode&quot;: 0,&#xd;
      &quot;dataUsersCharge&quot;: 0,&#xd;
      &quot;fnTimesheetChargeableFlag&quot;: 0,&#xd;
      &quot;chargeableAmount&quot;: null,&#xd;
      &quot;projectName&quot;: &quot;Project 99&quot;,&#xd;
      &quot;projectTaskName&quot;: &quot;PROJECT TASK 2_99&quot;,&#xd;
      &quot;userCostTypeName&quot;: null,&#xd;
      &quot;invoiced&quot;: false,&#xd;
      &quot;ucir&quot;: &quot;9577a59a-5e36-4c61-aa55-dd032fa358ed&quot;,&#xd;
      &quot;createdBy&quot;: &quot;tenant1user19@mailinator.com&quot;,&#xd;
      &quot;updatedBy&quot;: null,&#xd;
      &quot;createdDate&quot;: &quot;2017-03-27T00:00:00&quot;,&#xd;
      &quot;updatedDate&quot;: null,&#xd;
      &quot;id&quot;: &quot;70842bf5-f5a0-4b07-b9ba-b598db288886&quot;,&#xd;
      &quot;version&quot;: &quot;AAAAAAAAYVI=&quot;,&#xd;
      &quot;groupDate&quot;: &quot;2017-03-23T17:00:00.000Z&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;timeDate&quot;: &quot;2017-03-23T17:00:00Z&quot;,&#xd;
      &quot;fromDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;toDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;userProfileId&quot;: &quot;558b18d4-0629-464a-8b49-0c08258584d9&quot;,&#xd;
      &quot;projectId&quot;: &quot;57a0239c-81a0-4c5f-84c5-843b86a18c88&quot;,&#xd;
      &quot;projectTaskId&quot;: &quot;1ddd2f8b-053e-490a-ac69-9db4f0935a8d&quot;,&#xd;
      &quot;invoiceDetailId&quot;: null,&#xd;
      &quot;projectActivityId&quot;: &quot;2b44c982-5c8b-4159-ab99-24788f87a94b&quot;,&#xd;
      &quot;userCostAmtId&quot;: &quot;175b2f8a-bf2d-47a3-b9c3-a3cc409eb45d&quot;,&#xd;
      &quot;effortUnits&quot;: 0.1,&#xd;
      &quot;costTotal&quot;: 0,&#xd;
      &quot;costRateAmt&quot;: 0,&#xd;
      &quot;chargeable&quot;: false,&#xd;
      &quot;chargeRateAmt&quot;: 0,&#xd;
      &quot;chargeTotal&quot;: 0,&#xd;
      &quot;timeNotes&quot;: &quot;Load-note for saving a timesheet&quot;,&#xd;
      &quot;invoiceId&quot;: null,&#xd;
      &quot;locked&quot;: false,&#xd;
      &quot;timesheetSubmissionId&quot;: null,&#xd;
      &quot;previousActivityName&quot;: &quot;Default Role&quot;,&#xd;
      &quot;timeTypeName&quot;: &quot;Standard Hour&quot;,&#xd;
      &quot;userCostCodeId&quot;: null,&#xd;
      &quot;fnTimesheetCostCode&quot;: 0,&#xd;
      &quot;dataUsersCharge&quot;: 0,&#xd;
      &quot;fnTimesheetChargeableFlag&quot;: 0,&#xd;
      &quot;chargeableAmount&quot;: null,&#xd;
      &quot;projectName&quot;: &quot;Project 99&quot;,&#xd;
      &quot;projectTaskName&quot;: &quot;PROJECT TASK 2_99&quot;,&#xd;
      &quot;userCostTypeName&quot;: null,&#xd;
      &quot;invoiced&quot;: false,&#xd;
      &quot;ucir&quot;: &quot;9577a59a-5e36-4c61-aa55-dd032fa358ed&quot;,&#xd;
      &quot;createdBy&quot;: &quot;tenant1user19@mailinator.com&quot;,&#xd;
      &quot;updatedBy&quot;: null,&#xd;
      &quot;createdDate&quot;: &quot;2017-03-27T00:00:00&quot;,&#xd;
      &quot;updatedDate&quot;: null,&#xd;
      &quot;id&quot;: &quot;d2c9dd6e-b037-4d8a-be9d-b6b50ddc56a9&quot;,&#xd;
      &quot;version&quot;: &quot;AAAAAAAAkJU=&quot;,&#xd;
      &quot;groupDate&quot;: &quot;2017-03-23T17:00:00.000Z&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;timeDate&quot;: &quot;2017-03-23T17:00:00Z&quot;,&#xd;
      &quot;fromDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;toDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;userProfileId&quot;: &quot;558b18d4-0629-464a-8b49-0c08258584d9&quot;,&#xd;
      &quot;projectId&quot;: &quot;57a0239c-81a0-4c5f-84c5-843b86a18c88&quot;,&#xd;
      &quot;projectTaskId&quot;: &quot;1ddd2f8b-053e-490a-ac69-9db4f0935a8d&quot;,&#xd;
      &quot;invoiceDetailId&quot;: null,&#xd;
      &quot;projectActivityId&quot;: &quot;2b44c982-5c8b-4159-ab99-24788f87a94b&quot;,&#xd;
      &quot;userCostAmtId&quot;: &quot;175b2f8a-bf2d-47a3-b9c3-a3cc409eb45d&quot;,&#xd;
      &quot;effortUnits&quot;: 0.1,&#xd;
      &quot;costTotal&quot;: 0,&#xd;
      &quot;costRateAmt&quot;: 0,&#xd;
      &quot;chargeable&quot;: false,&#xd;
      &quot;chargeRateAmt&quot;: 0,&#xd;
      &quot;chargeTotal&quot;: 0,&#xd;
      &quot;timeNotes&quot;: &quot;Load-note for saving a timesheet&quot;,&#xd;
      &quot;invoiceId&quot;: null,&#xd;
      &quot;locked&quot;: false,&#xd;
      &quot;timesheetSubmissionId&quot;: null,&#xd;
      &quot;previousActivityName&quot;: &quot;Default Role&quot;,&#xd;
      &quot;timeTypeName&quot;: &quot;Standard Hour&quot;,&#xd;
      &quot;userCostCodeId&quot;: null,&#xd;
      &quot;fnTimesheetCostCode&quot;: 0,&#xd;
      &quot;dataUsersCharge&quot;: 0,&#xd;
      &quot;fnTimesheetChargeableFlag&quot;: 0,&#xd;
      &quot;chargeableAmount&quot;: null,&#xd;
      &quot;projectName&quot;: &quot;Project 99&quot;,&#xd;
      &quot;projectTaskName&quot;: &quot;PROJECT TASK 2_99&quot;,&#xd;
      &quot;userCostTypeName&quot;: null,&#xd;
      &quot;invoiced&quot;: false,&#xd;
      &quot;ucir&quot;: &quot;9577a59a-5e36-4c61-aa55-dd032fa358ed&quot;,&#xd;
      &quot;createdBy&quot;: &quot;tenant1user19@mailinator.com&quot;,&#xd;
      &quot;updatedBy&quot;: null,&#xd;
      &quot;createdDate&quot;: &quot;2017-03-27T00:00:00&quot;,&#xd;
      &quot;updatedDate&quot;: null,&#xd;
      &quot;id&quot;: &quot;d18a02c7-8aa2-4df3-9160-b9e74b2ba363&quot;,&#xd;
      &quot;version&quot;: &quot;AAAAAAAAah4=&quot;,&#xd;
      &quot;groupDate&quot;: &quot;2017-03-23T17:00:00.000Z&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;timeDate&quot;: &quot;2017-03-23T17:00:00Z&quot;,&#xd;
      &quot;fromDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;toDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;userProfileId&quot;: &quot;558b18d4-0629-464a-8b49-0c08258584d9&quot;,&#xd;
      &quot;projectId&quot;: &quot;57a0239c-81a0-4c5f-84c5-843b86a18c88&quot;,&#xd;
      &quot;projectTaskId&quot;: &quot;1ddd2f8b-053e-490a-ac69-9db4f0935a8d&quot;,&#xd;
      &quot;invoiceDetailId&quot;: null,&#xd;
      &quot;projectActivityId&quot;: &quot;2b44c982-5c8b-4159-ab99-24788f87a94b&quot;,&#xd;
      &quot;userCostAmtId&quot;: &quot;175b2f8a-bf2d-47a3-b9c3-a3cc409eb45d&quot;,&#xd;
      &quot;effortUnits&quot;: 0.1,&#xd;
      &quot;costTotal&quot;: 0,&#xd;
      &quot;costRateAmt&quot;: 0,&#xd;
      &quot;chargeable&quot;: false,&#xd;
      &quot;chargeRateAmt&quot;: 0,&#xd;
      &quot;chargeTotal&quot;: 0,&#xd;
      &quot;timeNotes&quot;: &quot;Load-note for saving a timesheet&quot;,&#xd;
      &quot;invoiceId&quot;: null,&#xd;
      &quot;locked&quot;: false,&#xd;
      &quot;timesheetSubmissionId&quot;: null,&#xd;
      &quot;previousActivityName&quot;: &quot;Default Role&quot;,&#xd;
      &quot;timeTypeName&quot;: &quot;Standard Hour&quot;,&#xd;
      &quot;userCostCodeId&quot;: null,&#xd;
      &quot;fnTimesheetCostCode&quot;: 0,&#xd;
      &quot;dataUsersCharge&quot;: 0,&#xd;
      &quot;fnTimesheetChargeableFlag&quot;: 0,&#xd;
      &quot;chargeableAmount&quot;: null,&#xd;
      &quot;projectName&quot;: &quot;Project 99&quot;,&#xd;
      &quot;projectTaskName&quot;: &quot;PROJECT TASK 2_99&quot;,&#xd;
      &quot;userCostTypeName&quot;: null,&#xd;
      &quot;invoiced&quot;: false,&#xd;
      &quot;ucir&quot;: &quot;9577a59a-5e36-4c61-aa55-dd032fa358ed&quot;,&#xd;
      &quot;createdBy&quot;: &quot;tenant1user19@mailinator.com&quot;,&#xd;
      &quot;updatedBy&quot;: null,&#xd;
      &quot;createdDate&quot;: &quot;2017-03-27T00:00:00&quot;,&#xd;
      &quot;updatedDate&quot;: null,&#xd;
      &quot;id&quot;: &quot;fb33c055-8f80-4f35-9435-bc4d518a7ed0&quot;,&#xd;
      &quot;version&quot;: &quot;AAAAAAAAeDI=&quot;,&#xd;
      &quot;groupDate&quot;: &quot;2017-03-23T17:00:00.000Z&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;timeDate&quot;: &quot;2017-03-23T17:00:00Z&quot;,&#xd;
      &quot;fromDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;toDate&quot;: &quot;0001-01-01T00:00:00Z&quot;,&#xd;
      &quot;userProfileId&quot;: &quot;558b18d4-0629-464a-8b49-0c08258584d9&quot;,&#xd;
      &quot;projectId&quot;: &quot;57a0239c-81a0-4c5f-84c5-843b86a18c88&quot;,&#xd;
      &quot;projectTaskId&quot;: &quot;1ddd2f8b-053e-490a-ac69-9db4f0935a8d&quot;,&#xd;
      &quot;invoiceDetailId&quot;: null,&#xd;
      &quot;projectActivityId&quot;: &quot;2b44c982-5c8b-4159-ab99-24788f87a94b&quot;,&#xd;
      &quot;userCostAmtId&quot;: &quot;175b2f8a-bf2d-47a3-b9c3-a3cc409eb45d&quot;,&#xd;
      &quot;effortUnits&quot;: 0.1,&#xd;
      &quot;costTotal&quot;: 0,&#xd;
      &quot;costRateAmt&quot;: 0,&#xd;
      &quot;chargeable&quot;: false,&#xd;
      &quot;chargeRateAmt&quot;: 0,&#xd;
      &quot;chargeTotal&quot;: 0,&#xd;
      &quot;timeNotes&quot;: &quot;Load-note for saving a timesheet&quot;,&#xd;
      &quot;invoiceId&quot;: null,&#xd;
      &quot;locked&quot;: false,&#xd;
      &quot;timesheetSubmissionId&quot;: null,&#xd;
      &quot;previousActivityName&quot;: &quot;Default Role&quot;,&#xd;
      &quot;timeTypeName&quot;: &quot;Standard Hour&quot;,&#xd;
      &quot;userCostCodeId&quot;: null,&#xd;
      &quot;fnTimesheetCostCode&quot;: 0,&#xd;
      &quot;dataUsersCharge&quot;: 0,&#xd;
      &quot;fnTimesheetChargeableFlag&quot;: 0,&#xd;
      &quot;chargeableAmount&quot;: null,&#xd;
      &quot;projectName&quot;: &quot;Project 99&quot;,&#xd;
      &quot;projectTaskName&quot;: &quot;PROJECT TASK 2_99&quot;,&#xd;
      &quot;userCostTypeName&quot;: null,&#xd;
      &quot;invoiced&quot;: false,&#xd;
      &quot;ucir&quot;: &quot;9577a59a-5e36-4c61-aa55-dd032fa358ed&quot;,&#xd;
      &quot;createdBy&quot;: &quot;tenant1user19@mailinator.com&quot;,&#xd;
      &quot;updatedBy&quot;: null,&#xd;
      &quot;createdDate&quot;: &quot;2017-03-27T00:00:00&quot;,&#xd;
      &quot;updatedDate&quot;: null,&#xd;
      &quot;id&quot;: &quot;bc9b426c-6a50-4241-b4d7-ec0797bcfc77&quot;,&#xd;
      &quot;version&quot;: &quot;AAAAAAAAZZI=&quot;,&#xd;
      &quot;groupDate&quot;: &quot;2017-03-23T17:00:00.000Z&quot;&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">loadtest.rhinoapps.com</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">rhinoApi/api/TimesheetSubmissions</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                          </elementProp>
                          <elementProp name="Origin" elementType="Header">
                            <stringProp name="Header.name">Origin</stringProp>
                            <stringProp name="Header.value">https://loadtest.rhinoapps.com</stringProp>
                          </elementProp>
                          <elementProp name="X-DevTools-Emulate-Network-Conditions-Client-Id" elementType="Header">
                            <stringProp name="Header.name">X-DevTools-Emulate-Network-Conditions-Client-Id</stringProp>
                            <stringProp name="Header.value">a88c0755-8e77-412e-bac1-0e7fd44e999b</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                          </elementProp>
                          <elementProp name="Authorization" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer V_UbgBWUpDdaMEmDcPeWYJAx41khyUMk66xpzTmsnc4jyDMs91zbRuRJUynaWMF-bgLQ8Vo884eA00i5Q8sTl-ZMCL7bQH1f975pfg3NRSeHHgS-qdOWZ2ld1MOpdF-7YHxF7pNLR9KAern85LbIjaxMcxBg3H5Pa9mKvOLjzVbnz7u5eQRvWhczu3G5H6NMmuzjUhULyqUz2HA6uNgracUepIe7OyIAOYBe_dGQWLEsX2HERC_6Vu3sSwTNgBmq9Kghs-mX5Alfh_xnb3grVM1agcFiVna_9-TYCXOTAc9FcGpUy4QLdYjv42cieeVb0ZO0BdIvWORK7HNXbGJjShmtgmmyxaNZGH8zBdo0P21Po17NSDnIeMQJRP2NL1ey3z1sd9Syk6_5Ky1TLebknq-rqyUnbZdN9QdgWjo0cIFhyY-nACFIDZR7Dx3PJbQB8PnXYrcpDaEVXKqM_mO18wTdY8oPcD2hdRI0cHF2JiEeZSQLxnqR2Y-s3cLho7w3TC2uNDorU6ULpLWalWTO1vIMu79yNDhUjGQxGU-sLwxv2sZ5m7Gx5WWkTvjsgUOBE4w3AaPGnYmvuRNd0bB9FRjfewLzV9dC-GUK5ga9E3opYNhyDTLYuG0K2DXf72BraVs7Ns1aT8ZePgTz7rkWNCH0r-er10vcbwWiYDBfQjE</stringProp>
                          </elementProp>
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                          <elementProp name="Referer" elementType="Header">
                            <stringProp name="Header.name">Referer</stringProp>
                            <stringProp name="Header.value">https://loadtest.rhinoapps.com/Rhino/</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, br</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="RandomTimer.range">2729.6000000000004</stringProp>
                        <stringProp name="ConstantTimer.delay">5459.200000000001</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserProfiles" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/UserProfiles</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">2000</stringProp>
                        <stringProp name="RandomTimer.range">4000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="104.Visit_Timesheet_Approval_page" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Visit_Timesheet_Approval_page" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/#/timesheet-submission</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                        <stringProp name="DurationAssertion.duration">3000</stringProp>
                      </DurationAssertion>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="timesheetAdminView" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/timesheetAdminView.html</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetTimesheetsWithPeriod" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="isGetAdminOnly" elementType="HTTPArgument">
                            <stringProp name="Argument.name">isGetAdminOnly</stringProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="from" elementType="HTTPArgument">
                            <stringProp name="Argument.name">from</stringProp>
                            <stringProp name="Argument.value">${fromDate}</stringProp>
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="to" elementType="HTTPArgument">
                            <stringProp name="Argument.name">to</stringProp>
                            <stringProp name="Argument.value">${toDate}</stringProp>
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="userId" elementType="HTTPArgument">
                            <stringProp name="Argument.name">userId</stringProp>
                            <stringProp name="Argument.value">${userProfileId}</stringProp>
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Timesheets/GetTimesheetsWithPeriod</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***" enabled="false">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="isGetAdminOnly" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">isGetAdminOnly</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="from" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">from</stringProp>
                            <stringProp name="Argument.value">2017-03-26T17:00:00.000Z</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="to" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">to</stringProp>
                            <stringProp name="Argument.value">2017-04-02T16:59:59.000Z</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="t" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">t</stringProp>
                            <stringProp name="Argument.value">1490856863358</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="userId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">userId</stringProp>
                            <stringProp name="Argument.value">558b18d4-0629-464a-8b49-0c08258584d9</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">loadtest.rhinoapps.com</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">rhinoApi/api/Timesheets/GetTimesheetsWithPeriod</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                          </elementProp>
                          <elementProp name="X-DevTools-Emulate-Network-Conditions-Client-Id" elementType="Header">
                            <stringProp name="Header.name">X-DevTools-Emulate-Network-Conditions-Client-Id</stringProp>
                            <stringProp name="Header.value">a88c0755-8e77-412e-bac1-0e7fd44e999b</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                          </elementProp>
                          <elementProp name="Authorization" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer V_UbgBWUpDdaMEmDcPeWYJAx41khyUMk66xpzTmsnc4jyDMs91zbRuRJUynaWMF-bgLQ8Vo884eA00i5Q8sTl-ZMCL7bQH1f975pfg3NRSeHHgS-qdOWZ2ld1MOpdF-7YHxF7pNLR9KAern85LbIjaxMcxBg3H5Pa9mKvOLjzVbnz7u5eQRvWhczu3G5H6NMmuzjUhULyqUz2HA6uNgracUepIe7OyIAOYBe_dGQWLEsX2HERC_6Vu3sSwTNgBmq9Kghs-mX5Alfh_xnb3grVM1agcFiVna_9-TYCXOTAc9FcGpUy4QLdYjv42cieeVb0ZO0BdIvWORK7HNXbGJjShmtgmmyxaNZGH8zBdo0P21Po17NSDnIeMQJRP2NL1ey3z1sd9Syk6_5Ky1TLebknq-rqyUnbZdN9QdgWjo0cIFhyY-nACFIDZR7Dx3PJbQB8PnXYrcpDaEVXKqM_mO18wTdY8oPcD2hdRI0cHF2JiEeZSQLxnqR2Y-s3cLho7w3TC2uNDorU6ULpLWalWTO1vIMu79yNDhUjGQxGU-sLwxv2sZ5m7Gx5WWkTvjsgUOBE4w3AaPGnYmvuRNd0bB9FRjfewLzV9dC-GUK5ga9E3opYNhyDTLYuG0K2DXf72BraVs7Ns1aT8ZePgTz7rkWNCH0r-er10vcbwWiYDBfQjE</stringProp>
                          </elementProp>
                          <elementProp name="Referer" elementType="Header">
                            <stringProp name="Header.name">Referer</stringProp>
                            <stringProp name="Header.value">https://loadtest.rhinoapps.com/Rhino/</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="RandomTimer.range">132.4</stringProp>
                        <stringProp name="ConstantTimer.delay">264.8</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="timesheetSubmissionList" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/timesheetSubmissionList.html</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">2000</stringProp>
                        <stringProp name="RandomTimer.range">5000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="105.Select_week_to_approve" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="85.Select_a_week_to_approve" enabled="false">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Timesheets/GetTimesheetsWithPeriod?from=${appfromDate}&amp;isGetAdminOnly=true&amp;to=${apptoDate}&amp;userId=${userProfileId}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, br</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                        <stringProp name="DurationAssertion.duration">3000</stringProp>
                      </DurationAssertion>
                      <hashTree/>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">5000</stringProp>
                        <stringProp name="RandomTimer.range">35000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetTimesheetsWithPeriod" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="isGetAdminOnly" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">isGetAdminOnly</stringProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="from" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">from</stringProp>
                            <stringProp name="Argument.value">${appfromDate}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="to" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">to</stringProp>
                            <stringProp name="Argument.value">${apptoDate}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="userId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">userId</stringProp>
                            <stringProp name="Argument.value">${userProfileId}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Timesheets/GetTimesheetsWithPeriod</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                        <stringProp name="ConstantTimer.delay">5000</stringProp>
                        <stringProp name="RandomTimer.range">35000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">2000</stringProp>
                        <stringProp name="RandomTimer.range">4000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="106.Select TS to approve" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_Project" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Projects</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="TestPlan.comments">get id &amp; projectManagerId</stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                          </elementProp>
                          <elementProp name="Authorization" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_projectId" enabled="false">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">projectId</stringProp>
                        <stringProp name="RegexExtractor.regex">.*&quot;projectId&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="Sample.scope">all</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_GetProjectsWithLive" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetProjectsWithLive</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="TestPlan.comments">data[14].Projects/GetProjectsWithLive &amp; id</stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                          </elementProp>
                          <elementProp name="Authorization" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_userCostCodeId Default " enabled="false">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/UserCostCodes</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                          </elementProp>
                          <elementProp name="Authorization" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_userCostCodeId" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">userCostCodeId</stringProp>
                        <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="Sample.scope">all</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="get_UserCostCodesId" enabled="false">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-209463674">${userCostCodeId}</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetWithTypeAndCodeActiveByCostCode" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/UserCostAmts/GetWithTypeAndCodeActiveByCostCode/${userCostCodeId}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                          </elementProp>
                          <elementProp name="Authorization" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_projectActivityId" enabled="false">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">projectActivityId</stringProp>
                        <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="Sample.scope">all</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify_projectActivityId" enabled="false">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1419238769">${projectActivityId}</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_userCostAmtId Default" enabled="false">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/UserCostAmts/GetWithTypeActiveByCostCode/${userCostCodeId}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                          </elementProp>
                          <elementProp name="Authorization" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_userCostAmtId" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">userCostAmtId</stringProp>
                        <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="Sample.scope">all</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                        <stringProp name="ConstantTimer.delay">10000</stringProp>
                        <stringProp name="RandomTimer.range">30000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="timesheetMemberView" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/timesheetMemberView.html</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="timesheetMemberListWeekView" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/timesheetMemberListWeekView.html</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetTimesheetsWithPeriod" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="isGetAdminOnly" elementType="HTTPArgument">
                            <stringProp name="Argument.name">isGetAdminOnly</stringProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="from" elementType="HTTPArgument">
                            <stringProp name="Argument.name">from</stringProp>
                            <stringProp name="Argument.value">${appfromDate}</stringProp>
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="to" elementType="HTTPArgument">
                            <stringProp name="Argument.name">to</stringProp>
                            <stringProp name="Argument.value">${apptoDate}</stringProp>
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                          <elementProp name="userId" elementType="HTTPArgument">
                            <stringProp name="Argument.name">userId</stringProp>
                            <stringProp name="Argument.value">${userProfileId}</stringProp>
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Timesheets/GetTimesheetsWithPeriod</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="timesheetList" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/timesheetList.html</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">5000</stringProp>
                        <stringProp name="RandomTimer.range">35000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                    <stringProp name="IfController.condition">&quot;${TimesheetIdS}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${TimesheetIdS}&quot; != &quot;\${TimesheetIdS}&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="107.Approve_Timesheet" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Approve_Timesheet" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/TimesheetSubmissions/Approval/${TimesheetIdS}</stringProp>
                        <stringProp name="HTTPSampler.method">PUT</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">bearer ${token}</stringProp>
                            </elementProp>
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate, br</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_timesheetIdA" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">TimesheetIdA</stringProp>
                          <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                          <stringProp name="Sample.scope">all</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="ConstantTimer.delay">2000</stringProp>
                          <stringProp name="RandomTimer.range">4000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                        <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                          <stringProp name="DurationAssertion.duration">3000</stringProp>
                        </DurationAssertion>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                    <stringProp name="IfController.condition">&quot;${submitTS_msg}&quot; != &quot;Successful&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Edit_Timesheet" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="timesheetFormEdit" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/timesheetFormEdit.html</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTasks" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTasks</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="RandomTimer.range">3000</stringProp>
                          <stringProp name="ConstantTimer.delay">1000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE TimeSheets " enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/TimeSheets/${timesheetId}</stringProp>
                      <stringProp name="HTTPSampler.method">DELETE</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="RandomTimer.range">5000</stringProp>
                        <stringProp name="ConstantTimer.delay">3000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Approve Expense" enabled="true"/>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Transaction Expense" enabled="true"/>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="108.Visit_Expense_page_to_approve" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="Authorization" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">bearer ${token}</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Visit_Expense_page" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/#/expense</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                        <stringProp name="DurationAssertion.duration">3000</stringProp>
                      </DurationAssertion>
                      <hashTree/>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                        <stringProp name="RandomTimer.range">3000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="expenseMemberView" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/expenseMemberView.html</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Load_Expense_information" enabled="true"/>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ExpenseTypes" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/ExpenseTypes</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_expenseTypeName" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">expenseTypeName</stringProp>
                          <stringProp name="RegexExtractor.regex">&quot;expenseTypeName&quot;:&quot;(.+?)&quot;</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                          <stringProp name="Sample.scope">all</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_expenseTypeId" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">expenseTypeId</stringProp>
                          <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                          <stringProp name="Sample.scope">all</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetProjectsWithLive" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetProjectsWithLive</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserProfiles" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/UserProfiles</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="isGetAdminOnly" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">isGetAdminOnly</stringProp>
                              <stringProp name="Argument.value">true</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="from" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">from</stringProp>
                              <stringProp name="Argument.value">${fromDate}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="searchTerm" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">searchTerm</stringProp>
                            </elementProp>
                            <elementProp name="userId" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">userId</stringProp>
                              <stringProp name="Argument.value">${userProfileId}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/Expenses/Search</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="expenseList" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/expenseList.html</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="RandomTimer.range">3000</stringProp>
                          <stringProp name="ConstantTimer.delay">1000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ExpenseTypes" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/ExpenseTypes</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="RandomTimer.range">3000</stringProp>
                          <stringProp name="ConstantTimer.delay">1000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="109.Click_Add_Expense_to_approve" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="Authorization" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">bearer ${token}</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Add_Expense" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/expenseFormAdd.html</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                        <stringProp name="DurationAssertion.duration">3000</stringProp>
                      </DurationAssertion>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserProfiles" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/UserProfiles</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ExpenseTypes" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/ExpenseTypes</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_expenseTypeName" enabled="false">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">expenseTypeName</stringProp>
                        <stringProp name="RegexExtractor.regex">&quot;expenseTypeName&quot;:&quot;(.+?)&quot;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="Sample.scope">all</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_expenseTypeId" enabled="false">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">expenseTypeId</stringProp>
                        <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="Sample.scope">all</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContacts/GetContactsWithEnableSupplier" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts/GetContactsWithEnableSupplier</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">2000</stringProp>
                        <stringProp name="RandomTimer.range">4000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/UIBuilder" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/UIBuilder</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="RandomTimer.range">3000</stringProp>
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="110.Select_ProjectTask" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                        <elementProp name="Authorization" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">bearer ${token}</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_Expense_Type_ID" enabled="false">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/ExpenseTypes</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                          </elementProp>
                          <elementProp name="Authorization" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_expenseTypeName" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">expenseTypeName</stringProp>
                        <stringProp name="RegexExtractor.regex">&quot;expenseTypeName&quot;:&quot;(.+?)&quot;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="Sample.scope">all</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_expenseTypeId" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">expenseTypeId</stringProp>
                        <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="Sample.scope">all</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify_expenseTypeId" enabled="false">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-1454372281">${expenseTypeId}</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_ProjectTaskInformation" enabled="false">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTasks/GetWithPaging</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                          </elementProp>
                          <elementProp name="Authorization" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_projectTaskId" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">projectTaskId</stringProp>
                        <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="Sample.scope">all</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_projectId" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">projectId</stringProp>
                        <stringProp name="RegexExtractor.regex">.*&quot;projectId&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="Sample.scope">all</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">20000</stringProp>
                        <stringProp name="RandomTimer.range">60000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTasks" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTasks</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="RandomTimer.range">60000</stringProp>
                        <stringProp name="ConstantTimer.delay">10000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                    <stringProp name="IfController.condition">&quot;${expenseTypeId}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${expenseTypeId}&quot; != &quot;\${expenseTypeId}&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="111.Click_Save_expense_to_approve" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - &apos;Travel (Flights, Trains, Parking)&apos;" enabled="true">
                        <stringProp name="IfController.condition">&quot;${expenseTypeName}&quot; == &quot;Travel (Flights, Trains, Parking)&quot;</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Save_expense" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="expenseNetAmt" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">expenseNetAmt</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="chargeable" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">chargeable</stringProp>
                                <stringProp name="Argument.value">true</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="units" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">units</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="expenseDate" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">expenseDate</stringProp>
                                <stringProp name="Argument.value">${apptimeDate}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="paymentType" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">paymentType</stringProp>
                                <stringProp name="Argument.value">0</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="taxRate2Amount" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">taxRate2Amount</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="projectTaskId" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">projectTaskId</stringProp>
                                <stringProp name="Argument.value">${projectTaskId}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="taxRate3Amount" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">taxRate3Amount</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="receiptAttachment" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">receiptAttachment</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="supplier" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">supplier</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="taxRate1Amount" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">taxRate1Amount</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="perUnitMultiplier" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">perUnitMultiplier</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="chargeableAmount" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">chargeableAmount</stringProp>
                                <stringProp name="Argument.value">17</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="expenseTypeId" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">expenseTypeId</stringProp>
                                <stringProp name="Argument.value">${expenseTypeId}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="userProfileId" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">userProfileId</stringProp>
                                <stringProp name="Argument.value">${userProfileId}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="expenseNotes" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">expenseNotes</stringProp>
                                <stringProp name="Argument.value">Travel (Flights, Trains, Parking)&apos;</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="expenseGrossAmt" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">expenseGrossAmt</stringProp>
                                <stringProp name="Argument.value">17</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="locked" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">locked</stringProp>
                                <stringProp name="Argument.value">false</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="projectId" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">projectId</stringProp>
                                <stringProp name="Argument.value">${projectId}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/Expenses/PostExpense</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="TestPlan.comments">PostExpense Travel (Flights, Trains, Parking)&apos;</stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="Accept-Encoding" elementType="Header">
                                <stringProp name="Header.name">Accept-Encoding</stringProp>
                                <stringProp name="Header.value">gzip, deflate</stringProp>
                              </elementProp>
                              <elementProp name="User-Agent" elementType="Header">
                                <stringProp name="Header.name">User-Agent</stringProp>
                                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:51.0) Gecko/20100101 Firefox/51.0</stringProp>
                              </elementProp>
                              <elementProp name="Accept" elementType="Header">
                                <stringProp name="Header.name">Accept</stringProp>
                                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Authorization</stringProp>
                                <stringProp name="Header.value">bearer ${token}</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Language" elementType="Header">
                                <stringProp name="Header.name">Accept-Language</stringProp>
                                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="expenseId Extractor" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                            <stringProp name="RegexExtractor.refname">expenseId</stringProp>
                            <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                            <stringProp name="RegexExtractor.match_number">1</stringProp>
                            <stringProp name="Sample.scope">all</stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="get expenseId" enabled="false">
                            <collectionProp name="Asserion.test_strings">
                              <stringProp name="-1820558495">${expenseId}</stringProp>
                            </collectionProp>
                            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                            <boolProp name="Assertion.assume_success">false</boolProp>
                            <intProp name="Assertion.test_type">2</intProp>
                          </ResponseAssertion>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_message" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">message</stringProp>
                            <stringProp name="RegexExtractor.refname">message</stringProp>
                            <stringProp name="RegexExtractor.regex">.*&quot;message&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                            <stringProp name="RegexExtractor.match_number">1</stringProp>
                            <stringProp name="Sample.scope">all</stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                            <stringProp name="RandomTimer.range">5000</stringProp>
                            <stringProp name="ConstantTimer.delay">3000</stringProp>
                          </UniformRandomTimer>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - &apos;Meals&apos;" enabled="true">
                        <stringProp name="IfController.condition">&quot;${expenseTypeName}&quot; == &quot;Meals&quot;</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Save_expense " enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="expenseNetAmt" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">expenseNetAmt</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="chargeable" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">chargeable</stringProp>
                                <stringProp name="Argument.value">true</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="units" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">units</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="expenseDate" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">expenseDate</stringProp>
                                <stringProp name="Argument.value">${apptimeDate}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="paymentType" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">paymentType</stringProp>
                                <stringProp name="Argument.value">0</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="taxRate2Amount" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">taxRate2Amount</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="projectTaskId" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">projectTaskId</stringProp>
                                <stringProp name="Argument.value">${projectTaskId}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="taxRate3Amount" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">taxRate3Amount</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="receiptAttachment" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">receiptAttachment</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="supplier" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">supplier</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="taxRate1Amount" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">taxRate1Amount</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="perUnitMultiplier" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">perUnitMultiplier</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="chargeableAmount" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">chargeableAmount</stringProp>
                                <stringProp name="Argument.value">14</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="expenseTypeId" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">expenseTypeId</stringProp>
                                <stringProp name="Argument.value">${expenseTypeId}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="userProfileId" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">userProfileId</stringProp>
                                <stringProp name="Argument.value">${userProfileId}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="expenseNotes" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">expenseNotes</stringProp>
                                <stringProp name="Argument.value">Meals</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="expenseGrossAmt" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">expenseGrossAmt</stringProp>
                                <stringProp name="Argument.value">14</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="locked" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">locked</stringProp>
                                <stringProp name="Argument.value">false</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="projectId" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">projectId</stringProp>
                                <stringProp name="Argument.value">${projectId}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/Expenses/PostExpense</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="TestPlan.comments">PostExpense</stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="Accept-Encoding" elementType="Header">
                                <stringProp name="Header.name">Accept-Encoding</stringProp>
                                <stringProp name="Header.value">gzip, deflate</stringProp>
                              </elementProp>
                              <elementProp name="User-Agent" elementType="Header">
                                <stringProp name="Header.name">User-Agent</stringProp>
                                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:51.0) Gecko/20100101 Firefox/51.0</stringProp>
                              </elementProp>
                              <elementProp name="Accept" elementType="Header">
                                <stringProp name="Header.name">Accept</stringProp>
                                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Authorization</stringProp>
                                <stringProp name="Header.value">bearer ${token}</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Language" elementType="Header">
                                <stringProp name="Header.name">Accept-Language</stringProp>
                                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="expenseId Extractor" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                            <stringProp name="RegexExtractor.refname">expenseId</stringProp>
                            <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                            <stringProp name="RegexExtractor.match_number">1</stringProp>
                            <stringProp name="Sample.scope">all</stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="get expenseId" enabled="false">
                            <collectionProp name="Asserion.test_strings">
                              <stringProp name="-1820558495">${expenseId}</stringProp>
                            </collectionProp>
                            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                            <boolProp name="Assertion.assume_success">false</boolProp>
                            <intProp name="Assertion.test_type">2</intProp>
                          </ResponseAssertion>
                          <hashTree/>
                          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                            <stringProp name="RandomTimer.range">5000</stringProp>
                            <stringProp name="ConstantTimer.delay">3000</stringProp>
                          </UniformRandomTimer>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - &apos;Own Car - Mileage @ 45p&apos;" enabled="true">
                        <stringProp name="IfController.condition">&quot;${expenseTypeName}&quot; == &quot;Own Car - Mileage @ 45p&quot;</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Save_expense" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="expenseNetAmt" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">expenseNetAmt</stringProp>
                                <stringProp name="Argument.value">0.45</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="chargeable" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">chargeable</stringProp>
                                <stringProp name="Argument.value">true</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="units" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">units</stringProp>
                                <stringProp name="Argument.value">1</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="expenseDate" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">expenseDate</stringProp>
                                <stringProp name="Argument.value">${apptimeDate}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="paymentType" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">paymentType</stringProp>
                                <stringProp name="Argument.value">0</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="taxRate2Amount" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">taxRate2Amount</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="projectTaskId" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">projectTaskId</stringProp>
                                <stringProp name="Argument.value">${projectTaskId}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="taxRate3Amount" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">taxRate3Amount</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="receiptAttachment" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">receiptAttachment</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="supplier" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">supplier</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="taxRate1Amount" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">taxRate1Amount</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="perUnitMultiplier" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">perUnitMultiplier</stringProp>
                                <stringProp name="Argument.value">0.45</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="chargeableAmount" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">chargeableAmount</stringProp>
                                <stringProp name="Argument.value">0.45</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="expenseTypeId" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">expenseTypeId</stringProp>
                                <stringProp name="Argument.value">${expenseTypeId}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="userProfileId" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">userProfileId</stringProp>
                                <stringProp name="Argument.value">${userProfileId}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="expenseNotes" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">expenseNotes</stringProp>
                                <stringProp name="Argument.value">Own Car - Mileage @ 45p</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="expenseGrossAmt" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">expenseGrossAmt</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="locked" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">locked</stringProp>
                                <stringProp name="Argument.value">false</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="projectId" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">projectId</stringProp>
                                <stringProp name="Argument.value">${projectId}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/Expenses/PostExpense</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="TestPlan.comments">PostExpense</stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="Accept-Encoding" elementType="Header">
                                <stringProp name="Header.name">Accept-Encoding</stringProp>
                                <stringProp name="Header.value">gzip, deflate</stringProp>
                              </elementProp>
                              <elementProp name="User-Agent" elementType="Header">
                                <stringProp name="Header.name">User-Agent</stringProp>
                                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:51.0) Gecko/20100101 Firefox/51.0</stringProp>
                              </elementProp>
                              <elementProp name="Accept" elementType="Header">
                                <stringProp name="Header.name">Accept</stringProp>
                                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Authorization</stringProp>
                                <stringProp name="Header.value">bearer ${token}</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Language" elementType="Header">
                                <stringProp name="Header.name">Accept-Language</stringProp>
                                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="expenseId Extractor" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                            <stringProp name="RegexExtractor.refname">expenseId</stringProp>
                            <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                            <stringProp name="RegexExtractor.match_number">1</stringProp>
                            <stringProp name="Sample.scope">all</stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="get expenseId" enabled="false">
                            <collectionProp name="Asserion.test_strings">
                              <stringProp name="-1820558495">${expenseId}</stringProp>
                            </collectionProp>
                            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                            <boolProp name="Assertion.assume_success">false</boolProp>
                            <intProp name="Assertion.test_type">2</intProp>
                          </ResponseAssertion>
                          <hashTree/>
                          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                            <stringProp name="RandomTimer.range">5000</stringProp>
                            <stringProp name="ConstantTimer.delay">3000</stringProp>
                          </UniformRandomTimer>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - &apos;General Purchases&apos;" enabled="true">
                        <stringProp name="IfController.condition">&quot;${expenseTypeName}&quot; == &quot;General Purchases&quot;</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Save_expense" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="expenseNetAmt" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">expenseNetAmt</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="chargeable" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">chargeable</stringProp>
                                <stringProp name="Argument.value">true</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="units" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">units</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="expenseDate" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">expenseDate</stringProp>
                                <stringProp name="Argument.value">${apptimeDate}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="paymentType" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">paymentType</stringProp>
                                <stringProp name="Argument.value">0</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="taxRate2Amount" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">taxRate2Amount</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="projectTaskId" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">projectTaskId</stringProp>
                                <stringProp name="Argument.value">${projectTaskId}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="taxRate3Amount" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">taxRate3Amount</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="receiptAttachment" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">receiptAttachment</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="supplier" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">supplier</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="taxRate1Amount" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">taxRate1Amount</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="perUnitMultiplier" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">perUnitMultiplier</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="chargeableAmount" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">chargeableAmount</stringProp>
                                <stringProp name="Argument.value">12</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="expenseTypeId" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">expenseTypeId</stringProp>
                                <stringProp name="Argument.value">${expenseTypeId}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="userProfileId" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">userProfileId</stringProp>
                                <stringProp name="Argument.value">${userProfileId}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="expenseNotes" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">expenseNotes</stringProp>
                                <stringProp name="Argument.value">Note for add expense General Purchases</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="expenseGrossAmt" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">expenseGrossAmt</stringProp>
                                <stringProp name="Argument.value">12</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="locked" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">locked</stringProp>
                                <stringProp name="Argument.value">false</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="projectId" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">projectId</stringProp>
                                <stringProp name="Argument.value">${projectId}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/Expenses/PostExpense</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="TestPlan.comments">PostExpense</stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="Accept-Encoding" elementType="Header">
                                <stringProp name="Header.name">Accept-Encoding</stringProp>
                                <stringProp name="Header.value">gzip, deflate</stringProp>
                              </elementProp>
                              <elementProp name="User-Agent" elementType="Header">
                                <stringProp name="Header.name">User-Agent</stringProp>
                                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:51.0) Gecko/20100101 Firefox/51.0</stringProp>
                              </elementProp>
                              <elementProp name="Accept" elementType="Header">
                                <stringProp name="Header.name">Accept</stringProp>
                                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Authorization</stringProp>
                                <stringProp name="Header.value">bearer ${token}</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Language" elementType="Header">
                                <stringProp name="Header.name">Accept-Language</stringProp>
                                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="expenseId Extractor" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                            <stringProp name="RegexExtractor.refname">expenseId</stringProp>
                            <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                            <stringProp name="RegexExtractor.match_number">1</stringProp>
                            <stringProp name="Sample.scope">all</stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="get expenseId" enabled="false">
                            <collectionProp name="Asserion.test_strings">
                              <stringProp name="-1820558495">${expenseId}</stringProp>
                            </collectionProp>
                            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                            <boolProp name="Assertion.assume_success">false</boolProp>
                            <intProp name="Assertion.test_type">2</intProp>
                          </ResponseAssertion>
                          <hashTree/>
                          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                            <stringProp name="RandomTimer.range">5000</stringProp>
                            <stringProp name="ConstantTimer.delay">3000</stringProp>
                          </UniformRandomTimer>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - &apos;Accomodation&apos;" enabled="true">
                        <stringProp name="IfController.condition">&quot;${expenseTypeName}&quot; == &quot;Accomodation&quot;</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Save_expense" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="expenseNetAmt" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">expenseNetAmt</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="chargeable" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">chargeable</stringProp>
                                <stringProp name="Argument.value">true</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="units" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">units</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="expenseDate" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">expenseDate</stringProp>
                                <stringProp name="Argument.value">${apptimeDate}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="paymentType" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">paymentType</stringProp>
                                <stringProp name="Argument.value">0</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="taxRate2Amount" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">taxRate2Amount</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="projectTaskId" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">projectTaskId</stringProp>
                                <stringProp name="Argument.value">${projectTaskId}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="taxRate3Amount" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">taxRate3Amount</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="receiptAttachment" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">receiptAttachment</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="supplier" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">supplier</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="taxRate1Amount" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">taxRate1Amount</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="perUnitMultiplier" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">perUnitMultiplier</stringProp>
                                <stringProp name="Argument.value">null</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="chargeableAmount" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">chargeableAmount</stringProp>
                                <stringProp name="Argument.value">11</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="expenseTypeId" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">expenseTypeId</stringProp>
                                <stringProp name="Argument.value">${expenseTypeId}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="userProfileId" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">userProfileId</stringProp>
                                <stringProp name="Argument.value">${userProfileId}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="expenseNotes" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">expenseNotes</stringProp>
                                <stringProp name="Argument.value">Note for Accomodation</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="expenseGrossAmt" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">expenseGrossAmt</stringProp>
                                <stringProp name="Argument.value">11</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="locked" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">locked</stringProp>
                                <stringProp name="Argument.value">false</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="projectId" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">projectId</stringProp>
                                <stringProp name="Argument.value">${projectId}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/Expenses/PostExpense</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          <stringProp name="TestPlan.comments">PostExpense</stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="Accept-Encoding" elementType="Header">
                                <stringProp name="Header.name">Accept-Encoding</stringProp>
                                <stringProp name="Header.value">gzip, deflate</stringProp>
                              </elementProp>
                              <elementProp name="User-Agent" elementType="Header">
                                <stringProp name="Header.name">User-Agent</stringProp>
                                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:51.0) Gecko/20100101 Firefox/51.0</stringProp>
                              </elementProp>
                              <elementProp name="Accept" elementType="Header">
                                <stringProp name="Header.name">Accept</stringProp>
                                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                              </elementProp>
                              <elementProp name="" elementType="Header">
                                <stringProp name="Header.name">Authorization</stringProp>
                                <stringProp name="Header.value">bearer ${token}</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Language" elementType="Header">
                                <stringProp name="Header.name">Accept-Language</stringProp>
                                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="expenseId Extractor" enabled="true">
                            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                            <stringProp name="RegexExtractor.refname">expenseId</stringProp>
                            <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                            <stringProp name="RegexExtractor.match_number">1</stringProp>
                            <stringProp name="Sample.scope">all</stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="get expenseId" enabled="false">
                            <collectionProp name="Asserion.test_strings">
                              <stringProp name="-1820558495">${expenseId}</stringProp>
                            </collectionProp>
                            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                            <boolProp name="Assertion.assume_success">false</boolProp>
                            <intProp name="Assertion.test_type">2</intProp>
                          </ResponseAssertion>
                          <hashTree/>
                          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                            <stringProp name="ConstantTimer.delay">1000</stringProp>
                            <stringProp name="RandomTimer.range">3000</stringProp>
                          </UniformRandomTimer>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                          </elementProp>
                          <elementProp name="Authorization" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                        <stringProp name="IfController.condition">&quot;${expenseId}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${expenseId}&quot; != &quot;\${expenseId}&quot;</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="isGetAdminOnly" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">isGetAdminOnly</stringProp>
                                <stringProp name="Argument.value">true</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="from" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">from</stringProp>
                                <stringProp name="Argument.value">${appfromDate}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="searchTerm" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.value"></stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                <stringProp name="Argument.name">searchTerm</stringProp>
                              </elementProp>
                              <elementProp name="userId" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">userId</stringProp>
                                <stringProp name="Argument.value">${userProfileId}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/Expenses/Search</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree/>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Expenses/${expenseId}" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/Expenses/${expenseId}</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree/>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="expenseList" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/expenseList.html</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                            <stringProp name="RandomTimer.range">3000</stringProp>
                            <stringProp name="ConstantTimer.delay">1000</stringProp>
                          </UniformRandomTimer>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetFooterCounts/${expenseId}" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/Expenses/GetFooterCounts/${expenseId}</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree/>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="expenseFormDetail" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/expenseFormDetail.html</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                            <stringProp name="RandomTimer.range">5000</stringProp>
                            <stringProp name="ConstantTimer.delay">3000</stringProp>
                          </UniformRandomTimer>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ExpenseTypes" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments"/>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol"></stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">${apiPath}/api/ExpenseTypes</stringProp>
                          <stringProp name="HTTPSampler.method">GET</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                          <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_expenseTypeName" enabled="false">
                            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                            <stringProp name="RegexExtractor.refname">expenseTypeName</stringProp>
                            <stringProp name="RegexExtractor.regex">&quot;expenseTypeName&quot;:&quot;(.+?)&quot;</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                            <stringProp name="RegexExtractor.match_number">1</stringProp>
                            <stringProp name="Sample.scope">all</stringProp>
                          </RegexExtractor>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_expenseTypeId" enabled="false">
                            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                            <stringProp name="RegexExtractor.refname">expenseTypeId</stringProp>
                            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                            <stringProp name="RegexExtractor.match_number">1</stringProp>
                            <stringProp name="Sample.scope">all</stringProp>
                          </RegexExtractor>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                    <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                      <stringProp name="DurationAssertion.duration">3000</stringProp>
                    </DurationAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                  <stringProp name="IfController.condition">&quot;${expenseId}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${expenseId}&quot; != &quot;\${expenseId}&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="112.Submit_Expense" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit_Expense" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&quot;expenses&quot;:[{&quot;id&quot;:&quot;${expenseId}&quot;}]}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${apiPath}/api/ExpenseSubmissions</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                      <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, br</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                          </elementProp>
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">2000</stringProp>
                        <stringProp name="RandomTimer.range">4000</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_expenseIdS" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">expenseIdS</stringProp>
                        <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="Sample.scope">all</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_submitmessage" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">submitexpense_msg</stringProp>
                        <stringProp name="RegexExtractor.regex">.*&quot;message&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="Sample.scope">all</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                        <stringProp name="DurationAssertion.duration">3000</stringProp>
                      </DurationAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                    <stringProp name="IfController.condition">&quot;${expenseIdS}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${expenseIdS}&quot; != &quot;\${expenseIdS}&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="113.Visit_Expense_Approval_page" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Visit_Expense_Approval_page" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${rhinoPath}/#/expense-submission</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                          <stringProp name="DurationAssertion.duration">3000</stringProp>
                        </DurationAssertion>
                        <hashTree/>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                          <stringProp name="ConstantTimer.delay">3000</stringProp>
                          <stringProp name="RandomTimer.range">5000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="expenseAdminView" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/expenseAdminView.html</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ExpenseTypes" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/ExpenseTypes</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_expenseTypeName" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">expenseTypeName</stringProp>
                          <stringProp name="RegexExtractor.regex">&quot;expenseTypeName&quot;:&quot;(.+?)&quot;</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                          <stringProp name="Sample.scope">all</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_expenseTypeId" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">expenseTypeId</stringProp>
                          <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                          <stringProp name="Sample.scope">all</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetProjectsWithLive" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetProjectsWithLive</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserProfiles" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/UserProfiles</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ExpenseSubmissions/GetSubmitted_fromDate" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="from" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">${appfromDate}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">from</stringProp>
                            </elementProp>
                            <elementProp name="searchTerm" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">searchTerm</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="userId" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">${userProfileId}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">userId</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/ExpenseSubmissions/GetSubmitted</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.image_parser">true</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="expenseSubmissionList" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/expenseSubmissionList.html</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.image_parser">true</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="ConstantTimer.delay">3000</stringProp>
                          <stringProp name="RandomTimer.range">5000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="114.Select_Expense_to_approve" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserProfiles" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/UserProfiles</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetProjectsWithLive" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetProjectsWithLive</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ExpenseTypes" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/ExpenseTypes</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_expenseTypeName" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">expenseTypeName</stringProp>
                          <stringProp name="RegexExtractor.regex">&quot;expenseTypeName&quot;:&quot;(.+?)&quot;</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                          <stringProp name="Sample.scope">all</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_expenseTypeId" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">expenseTypeId</stringProp>
                          <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                          <stringProp name="Sample.scope">all</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Select_Expense_to_approve" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/Expenses/GetExpensesBySubmission/${expenseIdS}</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                            </elementProp>
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">bearer ${token}</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                          <stringProp name="ConstantTimer.delay">5000</stringProp>
                          <stringProp name="RandomTimer.range">20000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                        <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                          <stringProp name="DurationAssertion.duration">3000</stringProp>
                        </DurationAssertion>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="expenseMemberView" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/expenseMemberView.html</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="expenseList" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/expenseList.html</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                          <stringProp name="RandomTimer.range">3000</stringProp>
                          <stringProp name="ConstantTimer.delay">1000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ExpenseTypes" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/ExpenseTypes</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="ConstantTimer.delay">5000</stringProp>
                          <stringProp name="RandomTimer.range">20000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="115.Approve_Expense" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="94.Approve_Expense" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/ExpenseSubmissions/Approval/${expenseIdS}</stringProp>
                        <stringProp name="HTTPSampler.method">PUT</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">bearer ${token}</stringProp>
                            </elementProp>
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate, br</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_expenseIdA" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">expenseIdA</stringProp>
                          <stringProp name="RegexExtractor.regex">.*&quot;id&quot;:&quot;([^&quot;]+)&quot;.*</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                          <stringProp name="Sample.scope">all</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                          <stringProp name="DurationAssertion.duration">3000</stringProp>
                        </DurationAssertion>
                        <hashTree/>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                          <stringProp name="ConstantTimer.delay">3000</stringProp>
                          <stringProp name="RandomTimer.range">5000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ExpenseSubmissions/GetSubmitted" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="from" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">from</stringProp>
                              <stringProp name="Argument.value">${appfromDate}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="searchTerm" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">searchTerm</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="userId" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">userId</stringProp>
                              <stringProp name="Argument.value">${userProfileId}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/ExpenseSubmissions/GetSubmitted</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="ConstantTimer.delay">3000</stringProp>
                          <stringProp name="RandomTimer.range">5000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                    <stringProp name="IfController.condition">&quot;${submitexpense_msg}&quot; != &quot;Successful&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Back_to_Expense_page" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                          </elementProp>
                          <elementProp name="Authorization" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="expenseMemberView" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/expenseMemberView.html</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.image_parser">true</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ExpenseTypes" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/ExpenseTypes</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_expenseTypeName" enabled="false">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">expenseTypeName</stringProp>
                          <stringProp name="RegexExtractor.regex">&quot;expenseTypeName&quot;:&quot;(.+?)&quot;</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                          <stringProp name="Sample.scope">all</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_expenseTypeId" enabled="false">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">expenseTypeId</stringProp>
                          <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                          <stringProp name="Sample.scope">all</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetProjectsWithLive" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetProjectsWithLive</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserProfiles" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/UserProfiles</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="isGetAdminOnly" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">isGetAdminOnly</stringProp>
                              <stringProp name="Argument.value">true</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="from" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">from</stringProp>
                              <stringProp name="Argument.value">${fromDate}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="searchTerm" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">searchTerm</stringProp>
                            </elementProp>
                            <elementProp name="userId" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">userId</stringProp>
                              <stringProp name="Argument.value">${userProfileId}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/Expenses/Search</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Expenses/${expenseId}" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/Expenses/${expenseId}</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="expenseList" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/expenseList.html</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ExpenseTypes" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/ExpenseTypes</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_expenseTypeName" enabled="false">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">expenseTypeName</stringProp>
                          <stringProp name="RegexExtractor.regex">&quot;expenseTypeName&quot;:&quot;(.+?)&quot;</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                          <stringProp name="Sample.scope">all</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get_expenseTypeId" enabled="false">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">expenseTypeId</stringProp>
                          <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                          <stringProp name="Sample.scope">all</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetFooterCounts/${expenseId}" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/Expenses/GetFooterCounts/${expenseId}</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="expenseFormDetail.html" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/expenseFormDetail.html</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetContactsWithEnableSupplier" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts/GetContactsWithEnableSupplier</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="RandomTimer.range">3000</stringProp>
                          <stringProp name="ConstantTimer.delay">1000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Click_Edit_Expense" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                          </elementProp>
                          <elementProp name="Authorization" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Edit_Expense" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/expenseFormEdit.html</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                            </elementProp>
                            <elementProp name="Authorization" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">bearer ${token}</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                          <stringProp name="RandomTimer.range">5000</stringProp>
                          <stringProp name="ConstantTimer.delay">3000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserProfiles" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/UserProfiles</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                            </elementProp>
                            <elementProp name="X-DevTools-Emulate-Network-Conditions-Client-Id" elementType="Header">
                              <stringProp name="Header.name">X-DevTools-Emulate-Network-Conditions-Client-Id</stringProp>
                              <stringProp name="Header.value">02c5719f-5215-4b44-8767-e0175f288cfd</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                            </elementProp>
                            <elementProp name="Authorization" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">bearer Uae-dANF95qEYbhmhu3hJ-8TPDbJg0lzX4mZTqszlUD9iniYTjS7n5Mpu-pUloH8wOHXsp1_xQ9fxXWnjcEpI3kwhErjTeNwBV9t-tprZi-jT-kvY53vp3mrridiZecXRk0qneBlb3gmULQ_QN5yODbFEukbykup9Gjk012qH5zAdoskjJ2eonZp9zRernBGSggiPtiljy8wCsdCuNrdUJFc9cBxrnFvlX18w-0jlOGiWmx3x26GGJfIMn_8zjJCQ8CG1uAuptn_ilS2CvTG_7Vk2x_LvWt-KCE1DQSlM7g0S0bJGo_ykObE_CsEqZp1y0SwXQpgpUVVEzwuMG7_y_BjQ89zQyiJsrr9vK4gObQ3CKIFIfYSsshT6tmnv8wPs6AWka383Du4SY2tMBy91UXITgJ0M8CQKRPIgXkYrZ3C1lnvCHlwl6US40-GfjaLXITiArvB5fG1_94UNhs6gCr5ezlG2ScQ8bZmk3u-Z0k6wS7BfF1adju-F2dOPwh_95VHfsimXDMhdPZ7hS1Wc5Nmkh4Srw45fdqaL7KhsaEgpbLF6yFSGtcyot5eHl56M7dtKtLWL6bn4tmLFaqthGkohnVomth-2v5oRlqUQVeLLOLZe5D9Gj0mbUsz1OZX0jMHYkB-nMkWdsdQW6NQ5INz6oCQKYrFBxDcojGTRzwH18-zIe5WukyEB59fg1c2aQuzQZvdNdhtUdLhiLerUA</stringProp>
                            </elementProp>
                            <elementProp name="Referer" elementType="Header">
                              <stringProp name="Header.name">Referer</stringProp>
                              <stringProp name="Header.value">http://10.84.1.76/SBAWEB_QC/</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                          <stringProp name="RandomTimer.range">35.6</stringProp>
                          <stringProp name="ConstantTimer.delay">71.2</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ExpenseTypes" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/ExpenseTypes</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                            </elementProp>
                            <elementProp name="X-DevTools-Emulate-Network-Conditions-Client-Id" elementType="Header">
                              <stringProp name="Header.name">X-DevTools-Emulate-Network-Conditions-Client-Id</stringProp>
                              <stringProp name="Header.value">02c5719f-5215-4b44-8767-e0175f288cfd</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                            </elementProp>
                            <elementProp name="Authorization" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">bearer Uae-dANF95qEYbhmhu3hJ-8TPDbJg0lzX4mZTqszlUD9iniYTjS7n5Mpu-pUloH8wOHXsp1_xQ9fxXWnjcEpI3kwhErjTeNwBV9t-tprZi-jT-kvY53vp3mrridiZecXRk0qneBlb3gmULQ_QN5yODbFEukbykup9Gjk012qH5zAdoskjJ2eonZp9zRernBGSggiPtiljy8wCsdCuNrdUJFc9cBxrnFvlX18w-0jlOGiWmx3x26GGJfIMn_8zjJCQ8CG1uAuptn_ilS2CvTG_7Vk2x_LvWt-KCE1DQSlM7g0S0bJGo_ykObE_CsEqZp1y0SwXQpgpUVVEzwuMG7_y_BjQ89zQyiJsrr9vK4gObQ3CKIFIfYSsshT6tmnv8wPs6AWka383Du4SY2tMBy91UXITgJ0M8CQKRPIgXkYrZ3C1lnvCHlwl6US40-GfjaLXITiArvB5fG1_94UNhs6gCr5ezlG2ScQ8bZmk3u-Z0k6wS7BfF1adju-F2dOPwh_95VHfsimXDMhdPZ7hS1Wc5Nmkh4Srw45fdqaL7KhsaEgpbLF6yFSGtcyot5eHl56M7dtKtLWL6bn4tmLFaqthGkohnVomth-2v5oRlqUQVeLLOLZe5D9Gj0mbUsz1OZX0jMHYkB-nMkWdsdQW6NQ5INz6oCQKYrFBxDcojGTRzwH18-zIe5WukyEB59fg1c2aQuzQZvdNdhtUdLhiLerUA</stringProp>
                            </elementProp>
                            <elementProp name="Referer" elementType="Header">
                              <stringProp name="Header.name">Referer</stringProp>
                              <stringProp name="Header.value">http://10.84.1.76/SBAWEB_QC/</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="RandomTimer.range">4000</stringProp>
                          <stringProp name="ConstantTimer.delay">2000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Click_DELETE_Expense" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">bearer ${token}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE Expenses" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/Expenses/${expenseId}</stringProp>
                        <stringProp name="HTTPSampler.method">DELETE</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">Authorization</stringProp>
                              <stringProp name="Header.value">bearer ${token}</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                          <stringProp name="RandomTimer.range">5000</stringProp>
                          <stringProp name="ConstantTimer.delay">3000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ExpenseTypes" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${apiPath}/api/ExpenseTypes</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                        <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="RandomTimer.range">5000</stringProp>
                          <stringProp name="ConstantTimer.delay">3000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="DELETE" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">bearer ${token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">&quot;${projectTaskId}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${projectTaskId}&quot; != &quot;\${projectTaskId}&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="DELETE Task" enabled="true"/>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="116.Back_to_Project" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Back_to_Project" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/projectView.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                    <stringProp name="DurationAssertion.duration">3000</stringProp>
                  </DurationAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectStatuses/GetDefaultStatus" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectStatuses/GetDefaultStatus</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTypes/GetDefaultType" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTypes/GetDefaultType</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectActivities" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="filter" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">{&quot;active&quot;:true}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">filter</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectActivities</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/GetWithPaging" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="filter" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">filter</stringProp>
                      </elementProp>
                      <elementProp name="page" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">page</stringProp>
                      </elementProp>
                      <elementProp name="type" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">type</stringProp>
                        <stringProp name="Argument.value">0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetWithPaging</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/GetWithPaging" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="filter" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">filter</stringProp>
                      </elementProp>
                      <elementProp name="page" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">2</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">page</stringProp>
                      </elementProp>
                      <elementProp name="type" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">type</stringProp>
                        <stringProp name="Argument.value">0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetWithPaging</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="projectList" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/projectList.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectStatuses" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectStatuses</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContacts" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTypes" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTypes</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="117.SELECT_Project" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SELECT Empty Project" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/${projectId}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/GetFooterCounts/${projectId}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetFooterCounts/${projectId}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">1000</stringProp>
                    <stringProp name="RandomTimer.range">3000</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="projectFormDetail" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/projectFormDetail.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">1000</stringProp>
                    <stringProp name="RandomTimer.range">3000</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="118.Click_Tasks" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Tasks_project" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/projectTaskView.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                    <stringProp name="DurationAssertion.duration">3000</stringProp>
                  </DurationAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectActivities" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="filter" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">{&quot;active&quot;:true}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">filter</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectActivities</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/Projects</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/GetProjectsWithLive" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetProjectsWithLive</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTasks/GetWithPaging?filter=0&amp;page=1&amp;plannedDeadLine=2017-03-26T17:00:00.000Z&amp;projectId=973fe143-58cc-4334-b73f-6ad931cd1c08&amp;t=1490614318839&amp;type=2" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="filter" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">filter</stringProp>
                      </elementProp>
                      <elementProp name="plannedDeadLine" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">plannedDeadLine</stringProp>
                        <stringProp name="Argument.value">${timeDate}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="page" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">page</stringProp>
                      </elementProp>
                      <elementProp name="type" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">2</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">type</stringProp>
                      </elementProp>
                      <elementProp name="projectId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">projectId</stringProp>
                        <stringProp name="Argument.value">${projectId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTasks/GetWithPaging</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="projectTaskList" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/projectTaskList.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/UIBuilder" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/UIBuilder</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">1000</stringProp>
                    <stringProp name="RandomTimer.range">3000</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="119.Select_Task" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Select_Task" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTasks/${projectTaskId}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                    <stringProp name="DurationAssertion.duration">3000</stringProp>
                  </DurationAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTasks/GetFooterCounts/${projectTaskId}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTasks/GetFooterCounts/${projectTaskId}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/${projectId}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/${projectId}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectActivities/GetByProject/${projectId}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectActivities/GetByProject/${projectId}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">1000</stringProp>
                    <stringProp name="RandomTimer.range">3000</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Open_Default_Task_Detail" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/projectTaskFormDetail.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="120.Click_Edit_Task" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Edit_Task" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/projectTaskFormEdit.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                    <stringProp name="DurationAssertion.duration">3000</stringProp>
                  </DurationAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/UIBuilder" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/UIBuilder</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserProfiles" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/UserProfiles</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">1000</stringProp>
                    <stringProp name="RandomTimer.range">3000</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="121.Click_Delete_Task" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click_Delete_Task" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTasks/${projectTaskId}</stringProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="TestPlan.comments">DEL_Default_Project_Task</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">bearer ${token}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                    <stringProp name="DurationAssertion.duration">3000</stringProp>
                  </DurationAssertion>
                  <hashTree/>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">1000</stringProp>
                    <stringProp name="RandomTimer.range">3000</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">&quot;${projectId}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${projectId}&quot; != &quot;\${projectId}&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="DELETE_Project" enabled="true"/>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="122.Back_to_Project" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Back_to_Project" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/commonViews/projectView.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                    <stringProp name="DurationAssertion.duration">3000</stringProp>
                  </DurationAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectStatuses/GetDefaultStatus" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectStatuses/GetDefaultStatus</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTypes/GetDefaultType" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTypes/GetDefaultType</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectActivities" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="filter" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">{&quot;active&quot;:true}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">filter</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectActivities</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/GetWithPaging" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="filter" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">filter</stringProp>
                      </elementProp>
                      <elementProp name="page" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">page</stringProp>
                      </elementProp>
                      <elementProp name="type" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">type</stringProp>
                        <stringProp name="Argument.value">0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetWithPaging</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/GetWithPaging" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="filter" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">filter</stringProp>
                      </elementProp>
                      <elementProp name="page" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">2</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">page</stringProp>
                      </elementProp>
                      <elementProp name="type" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">type</stringProp>
                        <stringProp name="Argument.value">0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetWithPaging</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/${projectId}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/${projectId}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="projectList" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/projectList.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectStatuses" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectStatuses</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContacts" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTypes" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTypes</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/GetFooterCounts/${projectId}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetFooterCounts/${projectId}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="projectFormDetail" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/projectFormDetail.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">1000</stringProp>
                    <stringProp name="RandomTimer.range">3000</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="123.EDIT_Project" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EDIT Project" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${rhinoPath}/language/en/views/web/projectFormEdit.html</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">bearer ${token}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContacts" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTypes" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTypes</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserProfiles" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/UserProfiles</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectStatuses" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectStatuses</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContactSales/GetByContact/${contactId}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContactSales/GetByContact/${contactId}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">1000</stringProp>
                    <stringProp name="RandomTimer.range">3000</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="124.DEL_Project" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="33.DEL project" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/${projectId}</stringProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">bearer ${token}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, sdch, br</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Empty Project has been deleted" enabled="false">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="1259833018">Successful</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="TestPlan.comments">Verify Empty Project has been deleted</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Projects/GetWithPaging" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="filter" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">filter</stringProp>
                      </elementProp>
                      <elementProp name="page" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">3</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">page</stringProp>
                      </elementProp>
                      <elementProp name="type" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">type</stringProp>
                        <stringProp name="Argument.value">0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/Projects/GetWithPaging</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectStatuses" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectStatuses</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CompanyContacts" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProjectTypes" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiPath}/api/ProjectTypes</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">1000</stringProp>
                    <stringProp name="RandomTimer.range">3000</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">&quot;${contactId}&quot; != &quot;NOT FOUND&quot; &amp;&amp; &quot;${contactId}&quot; != &quot;\${contactId}&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="125.Click_DELETE_Contact" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">bearer ${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE_CompanyContact" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts/${contactId}</stringProp>
                <stringProp name="HTTPSampler.method">DELETE</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">bearer ${token}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify contact has been deleted" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1259833018">Successful</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="TestPlan.comments">Verify contact has been deleted</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetWithPaging" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiPath}/api/CompanyContacts/GetWithPaging</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">2</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
                  <stringProp name="RandomTimer.range">137.6</stringProp>
                  <stringProp name="ConstantTimer.delay">275.2</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
